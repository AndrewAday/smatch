{'acct': [{'call': 'eventfd2', 'reason': set([('file', 'f_mode')])},
          {'call': 'swapoff', 'reason': set([('file', 'f_mode')])},
          {'call': 'memfd_create', 'reason': set([('file', 'f_mode')])},
          {'call': 'remap_file_pages', 'reason': set([('file', 'f_mode')])},
          {'call': 'dup3', 'reason': set([('file', 'f_mode')])},
          {'call': 'epoll_create1', 'reason': set([('file', 'f_mode')])},
          {'call': 'epoll_ctl', 'reason': set([('file', 'f_mode')])},
          {'call': 'flock', 'reason': set([('file', 'f_mode')])},
          {'call': 'openat', 'reason': set([('file', 'f_mode')])},
          {'call': 'uselib', 'reason': set([('file', 'f_mode')])},
          {'call': 'accept4', 'reason': set([('file', 'f_mode')])},
          {'call': 'socketpair', 'reason': set([('file', 'f_mode')])},
          {'call': 'shmat', 'reason': set([('file', 'f_mode')])},
          {'call': 'socket', 'reason': set([('file', 'f_mode')])},
          {'call': 'pipe2', 'reason': set([('file', 'f_mode')])},
          {'call': 'perf_event_open', 'reason': set([('file', 'f_mode')])},
          {'call': 'shmdt', 'reason': set([('file', 'f_mode')])},
          {'call': 'open', 'reason': set([('file', 'f_mode')])},
          {'call': 'dup', 'reason': set([('file', 'f_mode')])},
          {'call': 'setns', 'reason': set([('file', 'f_mode')])},
          {'call': 'shmctl', 'reason': set([('file', 'f_mode')])},
          {'call': 'swapon', 'reason': set([('file', 'f_mode')])},
          {'call': 'mmap_pgoff', 'reason': set([('file', 'f_mode')])},
          {'call': 'mq_open', 'reason': set([('file', 'f_mode')])},
          {'call': 'open_by_handle_at', 'reason': set([('file', 'f_mode')])}],
 'alarm': [{'call': 'waitid',
            'reason': set([('timeval', 'tv_sec'), ('timeval', 'tv_usec')])},
           {'call': 'settimeofday',
            'reason': set([('timeval', 'tv_sec'), ('timeval', 'tv_usec')])},
           {'call': 'adjtimex',
            'reason': set([('timeval', 'tv_sec'), ('timeval', 'tv_usec')])},
           {'call': 'getitimer',
            'reason': set([('timeval', 'tv_sec'), ('timeval', 'tv_usec')])},
           {'call': 'select',
            'reason': set([('timeval', 'tv_sec'), ('timeval', 'tv_usec')])},
           {'call': 'wait4',
            'reason': set([('timeval', 'tv_sec'), ('timeval', 'tv_usec')])},
           {'call': 'getrusage',
            'reason': set([('timeval', 'tv_sec'), ('timeval', 'tv_usec')])},
           {'call': 'setitimer',
            'reason': set([('timeval', 'tv_sec'), ('timeval', 'tv_usec')])},
           {'call': 'clock_adjtime',
            'reason': set([('timeval', 'tv_sec'), ('timeval', 'tv_usec')])},
           {'call': 'ppoll',
            'reason': set([('timeval', 'tv_sec'), ('timeval', 'tv_usec')])}],
 'bpf': [{'call': 'keyctl', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'rt_sigtimedwait',
          'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'msgrcv', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'eventfd2',
          'reason': set([('file', 'f_op'), ('file', 'private_data')])},
         {'call': 'kill', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'swapoff',
          'reason': set([('file', 'f_op'), ('file', 'private_data')])},
         {'call': 'sched_getaffinity',
          'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'sched_setparam', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'memfd_create',
          'reason': set([('file', 'f_op'), ('file', 'private_data')])},
         {'call': 'ioprio_set', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'remap_file_pages',
          'reason': set([('file', 'f_op'), ('file', 'private_data')])},
         {'call': 'dup3',
          'reason': set([('file', 'f_op'), ('file', 'private_data')])},
         {'call': 'getppid', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'ioperm', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'mq_timedreceive',
          'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'capget', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'sched_setaffinity',
          'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'signal', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'semtimedop', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'umount', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'sched_rr_get_interval',
          'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'epoll_create1',
          'reason': set([('file', 'f_op'), ('file', 'private_data')])},
         {'call': 'epoll_ctl',
          'reason': set([('file', 'f_op'), ('file', 'private_data')])},
         {'call': 'flock',
          'reason': set([('file', 'f_op'), ('file', 'private_data')])},
         {'call': 'openat',
          'reason': set([('file', 'f_op'), ('file', 'private_data')])},
         {'call': 'uselib',
          'reason': set([('file', 'f_op'), ('file', 'private_data')])},
         {'call': 'rt_sigprocmask', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'accept4',
          'reason': set([('file', 'f_op'), ('file', 'private_data')])},
         {'call': 'setsid', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'sigaltstack', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'sched_setattr', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'socketpair',
          'reason': set([('file', 'f_op'), ('file', 'private_data')])},
         {'call': 'migrate_pages', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'getitimer', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'setpgid', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'getsid', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'shmat',
          'reason': set([('file', 'f_op'), ('file', 'private_data')])},
         {'call': 'socket',
          'reason': set([('file', 'f_op'), ('file', 'private_data')])},
         {'call': 'pipe2',
          'reason': set([('file', 'f_op'), ('file', 'private_data')])},
         {'call': 'prlimit64', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'perf_event_open',
          'reason': set([('bpf_prog', 'aux'),
                         ('file', 'f_op'),
                         ('file', 'private_data'),
                         ('mm_segment_t', 'seg')])},
         {'call': 'shmdt',
          'reason': set([('file', 'f_op'), ('file', 'private_data')])},
         {'call': 'rt_sigaction', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'getpgid', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'acct',
          'reason': set([('file', 'f_op'), ('file', 'private_data')])},
         {'call': 'open',
          'reason': set([('file', 'f_op'), ('file', 'private_data')])},
         {'call': 'getpriority', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'sigaction', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'dup',
          'reason': set([('file', 'f_op'), ('file', 'private_data')])},
         {'call': 'setns',
          'reason': set([('file', 'f_op'),
                         ('file', 'private_data'),
                         ('mm_segment_t', 'seg')])},
         {'call': 'fork', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'get_robust_list',
          'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'mq_timedsend', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'sched_getscheduler',
          'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'ptrace', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'shmctl',
          'reason': set([('file', 'f_op'), ('file', 'private_data')])},
         {'call': 'swapon',
          'reason': set([('file', 'f_op'), ('file', 'private_data')])},
         {'call': 'sched_getattr', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'getrusage', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'sched_setscheduler',
          'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'setitimer', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'ioprio_get', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'vfork', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'mmap_pgoff',
          'reason': set([('file', 'f_op'), ('file', 'private_data')])},
         {'call': 'prctl', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'move_pages', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'setpriority', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'clone', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'mq_open',
          'reason': set([('file', 'f_op'), ('file', 'private_data')])},
         {'call': 'sched_getparam', 'reason': set([('mm_segment_t', 'seg')])},
         {'call': 'open_by_handle_at',
          'reason': set([('file', 'f_op'), ('file', 'private_data')])}],
 'brk': [{'call': 'swapoff',
          'reason': set([('mm_struct', 'brk'),
                         ('mm_struct', 'def_flags'),
                         ('mm_struct', 'end_data'),
                         ('mm_struct', 'start_brk'),
                         ('mm_struct', 'start_data')])},
         {'call': 'remap_file_pages',
          'reason': set([('mm_struct', 'brk'),
                         ('mm_struct', 'def_flags'),
                         ('mm_struct', 'end_data'),
                         ('mm_struct', 'start_brk'),
                         ('mm_struct', 'start_data'),
                         ('vm_area_struct', 'vm_flags'),
                         ('vm_area_struct', 'vm_start')])},
         {'call': 'io_getevents',
          'reason': set([('mm_struct', 'brk'),
                         ('mm_struct', 'def_flags'),
                         ('mm_struct', 'end_data'),
                         ('mm_struct', 'start_brk'),
                         ('mm_struct', 'start_data')])},
         {'call': 'migrate_pages',
          'reason': set([('mm_struct', 'brk'),
                         ('mm_struct', 'def_flags'),
                         ('mm_struct', 'end_data'),
                         ('mm_struct', 'start_brk'),
                         ('mm_struct', 'start_data')])},
         {'call': 'shmdt',
          'reason': set([('mm_struct', 'brk'),
                         ('mm_struct', 'def_flags'),
                         ('mm_struct', 'end_data'),
                         ('mm_struct', 'start_brk'),
                         ('mm_struct', 'start_data'),
                         ('vm_area_struct', 'vm_flags'),
                         ('vm_area_struct', 'vm_start')])},
         {'call': 'get_mempolicy',
          'reason': set([('mm_struct', 'brk'),
                         ('mm_struct', 'def_flags'),
                         ('mm_struct', 'end_data'),
                         ('mm_struct', 'start_brk'),
                         ('mm_struct', 'start_data'),
                         ('vm_area_struct', 'vm_flags'),
                         ('vm_area_struct', 'vm_start')])},
         {'call': 'munlockall',
          'reason': set([('mm_struct', 'def_flags'),
                         ('vm_area_struct', 'vm_flags'),
                         ('vm_area_struct', 'vm_start')])},
         {'call': 'pkey_mprotect',
          'reason': set([('vm_area_struct', 'vm_flags'),
                         ('vm_area_struct', 'vm_start')])},
         {'call': 'madvise',
          'reason': set([('vm_area_struct', 'vm_flags'),
                         ('vm_area_struct', 'vm_start')])},
         {'call': 'getrusage',
          'reason': set([('mm_struct', 'brk'),
                         ('mm_struct', 'def_flags'),
                         ('mm_struct', 'end_data'),
                         ('mm_struct', 'start_brk'),
                         ('mm_struct', 'start_data')])},
         {'call': 'io_setup',
          'reason': set([('mm_struct', 'brk'),
                         ('mm_struct', 'def_flags'),
                         ('mm_struct', 'end_data'),
                         ('mm_struct', 'start_brk'),
                         ('mm_struct', 'start_data')])},
         {'call': 'mprotect',
          'reason': set([('vm_area_struct', 'vm_flags'),
                         ('vm_area_struct', 'vm_start')])},
         {'call': 'mremap',
          'reason': set([('mm_struct', 'brk'),
                         ('mm_struct', 'def_flags'),
                         ('mm_struct', 'end_data'),
                         ('mm_struct', 'start_brk'),
                         ('mm_struct', 'start_data'),
                         ('vm_area_struct', 'vm_flags'),
                         ('vm_area_struct', 'vm_start')])},
         {'call': 'io_destroy',
          'reason': set([('mm_struct', 'brk'),
                         ('mm_struct', 'def_flags'),
                         ('mm_struct', 'end_data'),
                         ('mm_struct', 'start_brk'),
                         ('mm_struct', 'start_data')])},
         {'call': 'mbind',
          'reason': set([('mm_struct', 'brk'),
                         ('mm_struct', 'def_flags'),
                         ('mm_struct', 'end_data'),
                         ('mm_struct', 'start_brk'),
                         ('mm_struct', 'start_data')])},
         {'call': 'prctl',
          'reason': set([('mm_struct', 'brk'),
                         ('mm_struct', 'def_flags'),
                         ('mm_struct', 'end_data'),
                         ('mm_struct', 'start_brk'),
                         ('mm_struct', 'start_data'),
                         ('vm_area_struct', 'vm_flags'),
                         ('vm_area_struct', 'vm_start')])},
         {'call': 'move_pages',
          'reason': set([('mm_struct', 'brk'),
                         ('mm_struct', 'def_flags'),
                         ('mm_struct', 'end_data'),
                         ('mm_struct', 'start_brk'),
                         ('mm_struct', 'start_data')])},
         {'call': 'modify_ldt',
          'reason': set([('mm_struct', 'brk'),
                         ('mm_struct', 'def_flags'),
                         ('mm_struct', 'end_data'),
                         ('mm_struct', 'start_brk'),
                         ('mm_struct', 'start_data')])},
         {'call': 'munlock',
          'reason': set([('vm_area_struct', 'vm_flags'),
                         ('vm_area_struct', 'vm_start')])},
         {'call': 'mincore',
          'reason': set([('mm_struct', 'brk'),
                         ('mm_struct', 'def_flags'),
                         ('mm_struct', 'end_data'),
                         ('mm_struct', 'start_brk'),
                         ('mm_struct', 'start_data'),
                         ('vm_area_struct', 'vm_flags'),
                         ('vm_area_struct', 'vm_start')])},
         {'call': 'io_cancel',
          'reason': set([('mm_struct', 'brk'),
                         ('mm_struct', 'def_flags'),
                         ('mm_struct', 'end_data'),
                         ('mm_struct', 'start_brk'),
                         ('mm_struct', 'start_data')])},
         {'call': 'mlockall',
          'reason': set([('mm_struct', 'def_flags'),
                         ('vm_area_struct', 'vm_flags'),
                         ('vm_area_struct', 'vm_start')])}],
 'capset': [{'call': 'keyctl', 'reason': set([('task_struct', 'cred')])},
            {'call': 'rt_sigtimedwait',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'msgrcv', 'reason': set([('task_struct', 'cred')])},
            {'call': 'kill', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_getaffinity',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_setparam',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'ioprio_set', 'reason': set([('task_struct', 'cred')])},
            {'call': 'getppid', 'reason': set([('task_struct', 'cred')])},
            {'call': 'mq_timedreceive',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'capget', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_setaffinity',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'signal', 'reason': set([('task_struct', 'cred')])},
            {'call': 'semtimedop', 'reason': set([('task_struct', 'cred')])},
            {'call': 'umount', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_rr_get_interval',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'rt_sigprocmask',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'setsid', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sigaltstack', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_setattr',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'migrate_pages',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'getitimer', 'reason': set([('task_struct', 'cred')])},
            {'call': 'setpgid', 'reason': set([('task_struct', 'cred')])},
            {'call': 'getsid', 'reason': set([('task_struct', 'cred')])},
            {'call': 'prlimit64', 'reason': set([('task_struct', 'cred')])},
            {'call': 'perf_event_open',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'rt_sigaction',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'getpgid', 'reason': set([('task_struct', 'cred')])},
            {'call': 'getpriority', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sigaction', 'reason': set([('task_struct', 'cred')])},
            {'call': 'setns', 'reason': set([('task_struct', 'cred')])},
            {'call': 'fork', 'reason': set([('task_struct', 'cred')])},
            {'call': 'get_robust_list',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'mq_timedsend',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_getscheduler',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'ptrace', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_getattr',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'getrusage', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_setscheduler',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'setitimer', 'reason': set([('task_struct', 'cred')])},
            {'call': 'ioprio_get', 'reason': set([('task_struct', 'cred')])},
            {'call': 'vfork', 'reason': set([('task_struct', 'cred')])},
            {'call': 'prctl', 'reason': set([('task_struct', 'cred')])},
            {'call': 'move_pages', 'reason': set([('task_struct', 'cred')])},
            {'call': 'setpriority', 'reason': set([('task_struct', 'cred')])},
            {'call': 'clone', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_getparam',
             'reason': set([('task_struct', 'cred')])}],
 'clock_adjtime': [{'call': 'clock_getres',
                    'reason': set([('k_clock', 'clock_adj')])},
                   {'call': 'timer_delete',
                    'reason': set([('k_clock', 'clock_adj')])},
                   {'call': 'timer_create',
                    'reason': set([('k_clock', 'clock_adj')])},
                   {'call': 'clock_gettime',
                    'reason': set([('k_clock', 'clock_adj')])},
                   {'call': 'timer_settime',
                    'reason': set([('k_clock', 'clock_adj')])},
                   {'call': 'timer_gettime',
                    'reason': set([('k_clock', 'clock_adj')])},
                   {'call': 'clock_settime',
                    'reason': set([('k_clock', 'clock_adj')])},
                   {'call': 'clock_nanosleep',
                    'reason': set([('k_clock', 'clock_adj')])}],
 'clock_nanosleep': [{'call': 'rt_sigtimedwait',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'mq_unlink',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'swapoff',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'clock_getres',
                      'reason': set([('k_clock', 'nsleep')])},
                     {'call': 'timer_delete',
                      'reason': set([('k_clock', 'nsleep')])},
                     {'call': 'fchmod',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'memfd_create',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'readlinkat',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'io_getevents',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'fchown',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'mq_timedreceive',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'utime',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'semtimedop',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'settimeofday',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'timer_create',
                      'reason': set([('k_clock', 'nsleep')])},
                     {'call': 'clock_gettime',
                      'reason': set([('k_clock', 'nsleep')])},
                     {'call': 'sched_rr_get_interval',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'timerfd_gettime',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'pselect6',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'uselib',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'fchmodat',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'inotify_add_watch',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'timer_settime',
                      'reason': set([('k_clock', 'nsleep'),
                                     ('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'ftruncate',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'timer_gettime',
                      'reason': set([('k_clock', 'nsleep'),
                                     ('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'ioctl',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'linkat',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'stime',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'futimesat',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'poll',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'clock_settime',
                      'reason': set([('k_clock', 'nsleep')])},
                     {'call': 'select',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'unlink',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'nanosleep',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'mq_getsetattr',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'faccessat',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'mq_timedsend',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'swapon',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'epoll_wait',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'fchownat',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'fstat',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'timerfd_settime',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'mq_notify',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'sendfile',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'newfstat',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'unlinkat',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'clock_adjtime',
                      'reason': set([('k_clock', 'nsleep')])},
                     {'call': 'futex',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'recvmmsg',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'sendfile64',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])},
                     {'call': 'ppoll',
                      'reason': set([('timespec', 'tv_nsec'),
                                     ('timespec', 'tv_sec')])}],
 'clock_settime': [{'call': 'clock_getres',
                    'reason': set([('k_clock', 'clock_set')])},
                   {'call': 'timer_delete',
                    'reason': set([('k_clock', 'clock_set')])},
                   {'call': 'timer_create',
                    'reason': set([('k_clock', 'clock_set')])},
                   {'call': 'clock_gettime',
                    'reason': set([('k_clock', 'clock_set')])},
                   {'call': 'timer_settime',
                    'reason': set([('k_clock', 'clock_set')])},
                   {'call': 'timer_gettime',
                    'reason': set([('k_clock', 'clock_set')])},
                   {'call': 'clock_nanosleep',
                    'reason': set([('k_clock', 'clock_set')])},
                   {'call': 'clock_adjtime',
                    'reason': set([('k_clock', 'clock_set')])}],
 'copy_file_range': [{'call': 'syncfs', 'reason': set([('fd', 'flags')])},
                     {'call': 'vmsplice', 'reason': set([('fd', 'flags')])},
                     {'call': 'pwritev64', 'reason': set([('fd', 'flags')])},
                     {'call': 'fremovexattr',
                      'reason': set([('fd', 'flags')])},
                     {'call': 'readahead', 'reason': set([('fd', 'flags')])},
                     {'call': 'getdents', 'reason': set([('fd', 'flags')])},
                     {'call': 'writev', 'reason': set([('fd', 'flags')])},
                     {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
                     {'call': 'fchmod', 'reason': set([('fd', 'flags')])},
                     {'call': 'pread64', 'reason': set([('fd', 'flags')])},
                     {'call': 'signalfd4', 'reason': set([('fd', 'flags')])},
                     {'call': 'read', 'reason': set([('fd', 'flags')])},
                     {'call': 'fchown', 'reason': set([('fd', 'flags')])},
                     {'call': 'mq_timedreceive',
                      'reason': set([('fd', 'flags')])},
                     {'call': 'utime', 'reason': set([('fd', 'flags')])},
                     {'call': 'fsync', 'reason': set([('fd', 'flags')])},
                     {'call': 'bpf', 'reason': set([('fd', 'flags')])},
                     {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
                     {'call': 'fsetxattr', 'reason': set([('fd', 'flags')])},
                     {'call': 'sendto', 'reason': set([('fd', 'flags')])},
                     {'call': 'tee', 'reason': set([('fd', 'flags')])},
                     {'call': 'sync_file_range',
                      'reason': set([('fd', 'flags')])},
                     {'call': 'lseek', 'reason': set([('fd', 'flags')])},
                     {'call': 'connect', 'reason': set([('fd', 'flags')])},
                     {'call': 'getsockname',
                      'reason': set([('fd', 'flags')])},
                     {'call': 'epoll_ctl', 'reason': set([('fd', 'flags')])},
                     {'call': 'flock', 'reason': set([('fd', 'flags')])},
                     {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
                     {'call': 'fchdir', 'reason': set([('fd', 'flags')])},
                     {'call': 'accept4', 'reason': set([('fd', 'flags')])},
                     {'call': 'old_readdir',
                      'reason': set([('fd', 'flags')])},
                     {'call': 'inotify_rm_watch',
                      'reason': set([('fd', 'flags')])},
                     {'call': 'utimensat', 'reason': set([('fd', 'flags')])},
                     {'call': 'inotify_add_watch',
                      'reason': set([('fd', 'flags')])},
                     {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
                     {'call': 'splice', 'reason': set([('fd', 'flags')])},
                     {'call': 'ftruncate', 'reason': set([('fd', 'flags')])},
                     {'call': 'preadv', 'reason': set([('fd', 'flags')])},
                     {'call': 'getpeername',
                      'reason': set([('fd', 'flags')])},
                     {'call': 'setsockopt', 'reason': set([('fd', 'flags')])},
                     {'call': 'fcntl', 'reason': set([('fd', 'flags')])},
                     {'call': 'ioctl', 'reason': set([('fd', 'flags')])},
                     {'call': 'pwrite64', 'reason': set([('fd', 'flags')])},
                     {'call': 'perf_event_open',
                      'reason': set([('fd', 'flags')])},
                     {'call': 'pwritev64v2',
                      'reason': set([('fd', 'flags')])},
                     {'call': 'futimesat', 'reason': set([('fd', 'flags')])},
                     {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
                     {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
                     {'call': 'getsockopt', 'reason': set([('fd', 'flags')])},
                     {'call': 'mq_getsetattr',
                      'reason': set([('fd', 'flags')])},
                     {'call': 'fdatasync', 'reason': set([('fd', 'flags')])},
                     {'call': 'getdents64', 'reason': set([('fd', 'flags')])},
                     {'call': 'listen', 'reason': set([('fd', 'flags')])},
                     {'call': 'mq_timedsend',
                      'reason': set([('fd', 'flags')])},
                     {'call': 'fgetxattr', 'reason': set([('fd', 'flags')])},
                     {'call': 'fcntl64', 'reason': set([('fd', 'flags')])},
                     {'call': 'fallocate', 'reason': set([('fd', 'flags')])},
                     {'call': 'epoll_wait', 'reason': set([('fd', 'flags')])},
                     {'call': 'llseek', 'reason': set([('fd', 'flags')])},
                     {'call': 'preadv64v2', 'reason': set([('fd', 'flags')])},
                     {'call': 'readv', 'reason': set([('fd', 'flags')])},
                     {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
                     {'call': 'fstatfs64', 'reason': set([('fd', 'flags')])},
                     {'call': 'write', 'reason': set([('fd', 'flags')])},
                     {'call': 'mq_notify', 'reason': set([('fd', 'flags')])},
                     {'call': 'sendfile', 'reason': set([('fd', 'flags')])},
                     {'call': 'bind', 'reason': set([('fd', 'flags')])},
                     {'call': 'flistxattr', 'reason': set([('fd', 'flags')])},
                     {'call': 'sendfile64', 'reason': set([('fd', 'flags')])}],
 'delete_module': [{'call': 'init_module',
                    'reason': set([('module', 'exit'),
                                   ('module', 'init'),
                                   ('module', 'state')])},
                   {'call': 'finit_module',
                    'reason': set([('module', 'exit'),
                                   ('module', 'init'),
                                   ('module', 'state')])}],
 'dup3': [{'call': 'unshare',
           'reason': set([('fdtable', 'max_fds'),
                          ('files_struct', 'fdt'),
                          ('files_struct', 'resize_in_progress')])},
          {'call': 'select', 'reason': set([('fdtable', 'max_fds')])},
          {'call': 'dup2',
           'reason': set([('fdtable', 'max_fds'),
                          ('files_struct', 'fdt'),
                          ('files_struct', 'resize_in_progress')])}],
 'epoll_create1': [{'call': 'keyctl',
                    'reason': set([('cred', 'user'),
                                   ('task_struct', 'cred')])},
                   {'call': 'rt_sigtimedwait',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'setfsuid', 'reason': set([('cred', 'user')])},
                   {'call': 'msgrcv',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'kill', 'reason': set([('task_struct', 'cred')])},
                   {'call': 'getresuid16', 'reason': set([('cred', 'user')])},
                   {'call': 'getresgid', 'reason': set([('cred', 'user')])},
                   {'call': 'sched_getaffinity',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'sched_setparam',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'setgid', 'reason': set([('cred', 'user')])},
                   {'call': 'ioprio_set',
                    'reason': set([('cred', 'user'),
                                   ('task_struct', 'cred')])},
                   {'call': 'capset', 'reason': set([('cred', 'user')])},
                   {'call': 'getppid',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'mq_timedreceive',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'getresgid16', 'reason': set([('cred', 'user')])},
                   {'call': 'capget',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'sched_setaffinity',
                    'reason': set([('cred', 'user'),
                                   ('task_struct', 'cred')])},
                   {'call': 'setfsgid', 'reason': set([('cred', 'user')])},
                   {'call': 'unshare', 'reason': set([('cred', 'user')])},
                   {'call': 'signal',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'setreuid', 'reason': set([('cred', 'user')])},
                   {'call': 'semtimedop',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'umount',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'sched_rr_get_interval',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'getresuid', 'reason': set([('cred', 'user')])},
                   {'call': 'epoll_ctl',
                    'reason': set([('eventpoll', 'user'),
                                   ('eventpoll', 'ws')])},
                   {'call': 'rt_sigprocmask',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'setsid',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'sigaltstack',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'sched_setattr',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'migrate_pages',
                    'reason': set([('cred', 'user'),
                                   ('task_struct', 'cred')])},
                   {'call': 'getitimer',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'setpgid',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'setresgid', 'reason': set([('cred', 'user')])},
                   {'call': 'setregid', 'reason': set([('cred', 'user')])},
                   {'call': 'getsid',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'prlimit64',
                    'reason': set([('cred', 'user'),
                                   ('task_struct', 'cred')])},
                   {'call': 'perf_event_open',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'getgroups16', 'reason': set([('cred', 'user')])},
                   {'call': 'rt_sigaction',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'getpgid',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'getpriority',
                    'reason': set([('cred', 'user'),
                                   ('task_struct', 'cred')])},
                   {'call': 'sigaction',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'faccessat', 'reason': set([('cred', 'user')])},
                   {'call': 'setns',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'fork', 'reason': set([('task_struct', 'cred')])},
                   {'call': 'get_robust_list',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'mq_timedsend',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'sched_getscheduler',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'ptrace',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'epoll_wait',
                    'reason': set([('eventpoll', 'user'),
                                   ('eventpoll', 'ws')])},
                   {'call': 'sched_getattr',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'getrusage',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'sched_setscheduler',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'setresuid', 'reason': set([('cred', 'user')])},
                   {'call': 'setitimer',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'ioprio_get',
                    'reason': set([('cred', 'user'),
                                   ('task_struct', 'cred')])},
                   {'call': 'vfork',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'setuid', 'reason': set([('cred', 'user')])},
                   {'call': 'prctl',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'move_pages',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'getgroups', 'reason': set([('cred', 'user')])},
                   {'call': 'setpriority',
                    'reason': set([('cred', 'user'),
                                   ('task_struct', 'cred')])},
                   {'call': 'clone',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'sched_getparam',
                    'reason': set([('task_struct', 'cred')])}],
 'epoll_ctl': [{'call': 'syncfs',
                'reason': set([('fd', 'flags'), ('list_head', 'next')])},
               {'call': 'keyctl', 'reason': set([('list_head', 'next')])},
               {'call': 'rt_sigtimedwait',
                'reason': set([('list_head', 'next')])},
               {'call': 'vmsplice',
                'reason': set([('fd', 'flags'), ('list_head', 'next')])},
               {'call': 'msgrcv', 'reason': set([('list_head', 'next')])},
               {'call': 'eventfd2',
                'reason': set([('file', 'f_op'), ('list_head', 'next')])},
               {'call': 'mq_unlink', 'reason': set([('list_head', 'next')])},
               {'call': 'pwritev64', 'reason': set([('fd', 'flags')])},
               {'call': 'kill', 'reason': set([('list_head', 'next')])},
               {'call': 'swapoff',
                'reason': set([('file', 'f_op'), ('list_head', 'next')])},
               {'call': 'fremovexattr', 'reason': set([('fd', 'flags')])},
               {'call': 'readahead',
                'reason': set([('fd', 'flags'), ('list_head', 'next')])},
               {'call': 'getdents', 'reason': set([('fd', 'flags')])},
               {'call': 'timer_delete',
                'reason': set([('list_head', 'next')])},
               {'call': 'sched_getaffinity',
                'reason': set([('list_head', 'next')])},
               {'call': 'writev', 'reason': set([('fd', 'flags')])},
               {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
               {'call': 'sched_setparam',
                'reason': set([('list_head', 'next')])},
               {'call': 'fchmod',
                'reason': set([('fd', 'flags'), ('list_head', 'next')])},
               {'call': 'setgid', 'reason': set([('list_head', 'next')])},
               {'call': 'pread64', 'reason': set([('fd', 'flags')])},
               {'call': 'pivot_root', 'reason': set([('list_head', 'next')])},
               {'call': 'signalfd4', 'reason': set([('fd', 'flags')])},
               {'call': 'memfd_create',
                'reason': set([('file', 'f_op'), ('list_head', 'next')])},
               {'call': 'ioprio_set', 'reason': set([('list_head', 'next')])},
               {'call': 'delete_module',
                'reason': set([('list_head', 'next')])},
               {'call': 'remap_file_pages',
                'reason': set([('file', 'f_op'), ('list_head', 'next')])},
               {'call': 'dup3',
                'reason': set([('file', 'f_op'), ('list_head', 'next')])},
               {'call': 'readlinkat', 'reason': set([('list_head', 'next')])},
               {'call': 'read', 'reason': set([('fd', 'flags')])},
               {'call': 'io_getevents',
                'reason': set([('list_head', 'next')])},
               {'call': 'getppid', 'reason': set([('list_head', 'next')])},
               {'call': 'fchown',
                'reason': set([('fd', 'flags'), ('list_head', 'next')])},
               {'call': 'mq_timedreceive',
                'reason': set([('fd', 'flags'), ('list_head', 'next')])},
               {'call': 'capget', 'reason': set([('list_head', 'next')])},
               {'call': 'utime', 'reason': set([('fd', 'flags')])},
               {'call': 'sched_setaffinity',
                'reason': set([('list_head', 'next')])},
               {'call': 'ustat', 'reason': set([('list_head', 'next')])},
               {'call': 'fsync', 'reason': set([('fd', 'flags')])},
               {'call': 'bpf',
                'reason': set([('fd', 'flags'), ('list_head', 'next')])},
               {'call': 'unshare', 'reason': set([('list_head', 'next')])},
               {'call': 'signal', 'reason': set([('list_head', 'next')])},
               {'call': 'setreuid', 'reason': set([('list_head', 'next')])},
               {'call': 'semtimedop', 'reason': set([('list_head', 'next')])},
               {'call': 'umount', 'reason': set([('list_head', 'next')])},
               {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
               {'call': 'fsetxattr', 'reason': set([('fd', 'flags')])},
               {'call': 'timer_create',
                'reason': set([('list_head', 'next')])},
               {'call': 'sendto', 'reason': set([('fd', 'flags')])},
               {'call': 'mkdirat', 'reason': set([('list_head', 'next')])},
               {'call': 'sched_rr_get_interval',
                'reason': set([('list_head', 'next')])},
               {'call': 'epoll_create1',
                'reason': set([('epitem', 'nwait'),
                               ('epitem', 'ws'),
                               ('epoll_event', 'events'),
                               ('file', 'f_op'),
                               ('list_head', 'next')])},
               {'call': 'timerfd_gettime',
                'reason': set([('list_head', 'next')])},
               {'call': 'tee',
                'reason': set([('fd', 'flags'), ('list_head', 'next')])},
               {'call': 'semctl', 'reason': set([('list_head', 'next')])},
               {'call': 'sync_file_range',
                'reason': set([('fd', 'flags'), ('list_head', 'next')])},
               {'call': 'lseek', 'reason': set([('fd', 'flags')])},
               {'call': 'connect', 'reason': set([('fd', 'flags')])},
               {'call': 'getsockname', 'reason': set([('fd', 'flags')])},
               {'call': 'flock',
                'reason': set([('fd', 'flags'),
                               ('file', 'f_op'),
                               ('list_head', 'next')])},
               {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
               {'call': 'fchdir', 'reason': set([('fd', 'flags')])},
               {'call': 'openat',
                'reason': set([('file', 'f_op'), ('list_head', 'next')])},
               {'call': 'lookup_dcookie',
                'reason': set([('list_head', 'next')])},
               {'call': 'uselib',
                'reason': set([('file', 'f_op'), ('list_head', 'next')])},
               {'call': 'renameat2', 'reason': set([('list_head', 'next')])},
               {'call': 'rt_sigprocmask',
                'reason': set([('list_head', 'next')])},
               {'call': 'accept4',
                'reason': set([('fd', 'flags'),
                               ('file', 'f_op'),
                               ('list_head', 'next')])},
               {'call': 'msgctl', 'reason': set([('list_head', 'next')])},
               {'call': 'reboot', 'reason': set([('list_head', 'next')])},
               {'call': 'setsid', 'reason': set([('list_head', 'next')])},
               {'call': 'set_trip_temp',
                'reason': set([('list_head', 'next')])},
               {'call': 'sigaltstack',
                'reason': set([('list_head', 'next')])},
               {'call': 'sched_setattr',
                'reason': set([('list_head', 'next')])},
               {'call': 'old_readdir', 'reason': set([('fd', 'flags')])},
               {'call': 'inotify_rm_watch',
                'reason': set([('fd', 'flags'), ('list_head', 'next')])},
               {'call': 'socketpair',
                'reason': set([('file', 'f_op'), ('list_head', 'next')])},
               {'call': 'utimensat', 'reason': set([('fd', 'flags')])},
               {'call': 'migrate_pages',
                'reason': set([('list_head', 'next')])},
               {'call': 'getitimer', 'reason': set([('list_head', 'next')])},
               {'call': 'fchmodat', 'reason': set([('list_head', 'next')])},
               {'call': 'setpgid', 'reason': set([('list_head', 'next')])},
               {'call': 'init_module',
                'reason': set([('list_head', 'next')])},
               {'call': 'setresgid', 'reason': set([('list_head', 'next')])},
               {'call': 'getcwd', 'reason': set([('list_head', 'next')])},
               {'call': 'inotify_add_watch',
                'reason': set([('fd', 'flags'), ('list_head', 'next')])},
               {'call': 'get_trip_temp',
                'reason': set([('list_head', 'next')])},
               {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
               {'call': 'timer_settime',
                'reason': set([('list_head', 'next')])},
               {'call': 'setregid', 'reason': set([('list_head', 'next')])},
               {'call': 'splice',
                'reason': set([('fd', 'flags'), ('list_head', 'next')])},
               {'call': 'ftruncate',
                'reason': set([('fd', 'flags'), ('list_head', 'next')])},
               {'call': 'timer_gettime',
                'reason': set([('list_head', 'next')])},
               {'call': 'preadv', 'reason': set([('fd', 'flags')])},
               {'call': 'getpeername', 'reason': set([('fd', 'flags')])},
               {'call': 'getsid', 'reason': set([('list_head', 'next')])},
               {'call': 'shmat',
                'reason': set([('file', 'f_op'), ('list_head', 'next')])},
               {'call': 'setsockopt', 'reason': set([('fd', 'flags')])},
               {'call': 'mknodat', 'reason': set([('list_head', 'next')])},
               {'call': 'socket',
                'reason': set([('file', 'f_op'), ('list_head', 'next')])},
               {'call': 'symlinkat', 'reason': set([('list_head', 'next')])},
               {'call': 'pipe2',
                'reason': set([('file', 'f_op'), ('list_head', 'next')])},
               {'call': 'fcntl', 'reason': set([('fd', 'flags')])},
               {'call': 'ioctl',
                'reason': set([('fd', 'flags'), ('list_head', 'next')])},
               {'call': 'prlimit64', 'reason': set([('list_head', 'next')])},
               {'call': 'pwrite64', 'reason': set([('fd', 'flags')])},
               {'call': 'perf_event_open',
                'reason': set([('fd', 'flags'),
                               ('file', 'f_op'),
                               ('list_head', 'next')])},
               {'call': 'linkat', 'reason': set([('list_head', 'next')])},
               {'call': 'getgroups16',
                'reason': set([('list_head', 'next')])},
               {'call': 'shmdt',
                'reason': set([('file', 'f_op'), ('list_head', 'next')])},
               {'call': 'pwritev64v2', 'reason': set([('fd', 'flags')])},
               {'call': 'quotactl', 'reason': set([('list_head', 'next')])},
               {'call': 'rt_sigaction',
                'reason': set([('list_head', 'next')])},
               {'call': 'futimesat', 'reason': set([('fd', 'flags')])},
               {'call': 'request_key',
                'reason': set([('list_head', 'next')])},
               {'call': 'getpgid', 'reason': set([('list_head', 'next')])},
               {'call': 'brk', 'reason': set([('list_head', 'next')])},
               {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
               {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
               {'call': 'acct',
                'reason': set([('file', 'f_op'), ('list_head', 'next')])},
               {'call': 'open',
                'reason': set([('file', 'f_op'), ('list_head', 'next')])},
               {'call': 'unlink', 'reason': set([('list_head', 'next')])},
               {'call': 'getsockopt', 'reason': set([('fd', 'flags')])},
               {'call': 'exit_group', 'reason': set([('list_head', 'next')])},
               {'call': 'getpriority',
                'reason': set([('list_head', 'next')])},
               {'call': 'sigaction', 'reason': set([('list_head', 'next')])},
               {'call': 'mq_getsetattr',
                'reason': set([('fd', 'flags'), ('list_head', 'next')])},
               {'call': 'faccessat', 'reason': set([('list_head', 'next')])},
               {'call': 'rmdir', 'reason': set([('list_head', 'next')])},
               {'call': 'dup',
                'reason': set([('file', 'f_op'), ('list_head', 'next')])},
               {'call': 'fdatasync', 'reason': set([('fd', 'flags')])},
               {'call': 'setgroups16',
                'reason': set([('list_head', 'next')])},
               {'call': 'setns',
                'reason': set([('file', 'f_op'), ('list_head', 'next')])},
               {'call': 'getdents64', 'reason': set([('fd', 'flags')])},
               {'call': 'listen', 'reason': set([('fd', 'flags')])},
               {'call': 'fork', 'reason': set([('list_head', 'next')])},
               {'call': 'get_mempolicy',
                'reason': set([('list_head', 'next')])},
               {'call': 'io_submit', 'reason': set([('list_head', 'next')])},
               {'call': 'get_robust_list',
                'reason': set([('list_head', 'next')])},
               {'call': 'copy_file_range', 'reason': set([('fd', 'flags')])},
               {'call': 'mq_timedsend',
                'reason': set([('fd', 'flags'), ('list_head', 'next')])},
               {'call': 'sched_yield',
                'reason': set([('list_head', 'next')])},
               {'call': 'sched_getscheduler',
                'reason': set([('list_head', 'next')])},
               {'call': 'fgetxattr', 'reason': set([('fd', 'flags')])},
               {'call': 'ptrace', 'reason': set([('list_head', 'next')])},
               {'call': 'shmctl',
                'reason': set([('file', 'f_op'), ('list_head', 'next')])},
               {'call': 'fcntl64', 'reason': set([('fd', 'flags')])},
               {'call': 'munlockall', 'reason': set([('list_head', 'next')])},
               {'call': 'swapon',
                'reason': set([('file', 'f_op'), ('list_head', 'next')])},
               {'call': 'fallocate', 'reason': set([('fd', 'flags')])},
               {'call': 'pkey_mprotect',
                'reason': set([('list_head', 'next')])},
               {'call': 'madvise', 'reason': set([('list_head', 'next')])},
               {'call': 'epoll_wait',
                'reason': set([('fd', 'flags'), ('list_head', 'next')])},
               {'call': 'sched_getattr',
                'reason': set([('list_head', 'next')])},
               {'call': 'fchownat', 'reason': set([('list_head', 'next')])},
               {'call': 'getrusage', 'reason': set([('list_head', 'next')])},
               {'call': 'timerfd_settime',
                'reason': set([('list_head', 'next')])},
               {'call': 'sched_setscheduler',
                'reason': set([('list_head', 'next')])},
               {'call': 'setresuid', 'reason': set([('list_head', 'next')])},
               {'call': 'setitimer', 'reason': set([('list_head', 'next')])},
               {'call': 'ioprio_get', 'reason': set([('list_head', 'next')])},
               {'call': 'vfork', 'reason': set([('list_head', 'next')])},
               {'call': 'setuid', 'reason': set([('list_head', 'next')])},
               {'call': 'llseek', 'reason': set([('fd', 'flags')])},
               {'call': 'io_setup', 'reason': set([('list_head', 'next')])},
               {'call': 'mprotect', 'reason': set([('list_head', 'next')])},
               {'call': 'mmap_pgoff',
                'reason': set([('file', 'f_op'), ('list_head', 'next')])},
               {'call': 'mremap', 'reason': set([('list_head', 'next')])},
               {'call': 'io_destroy', 'reason': set([('list_head', 'next')])},
               {'call': 'mbind', 'reason': set([('list_head', 'next')])},
               {'call': 'preadv64v2', 'reason': set([('fd', 'flags')])},
               {'call': 'readv', 'reason': set([('fd', 'flags')])},
               {'call': 'prctl', 'reason': set([('list_head', 'next')])},
               {'call': 'move_pages', 'reason': set([('list_head', 'next')])},
               {'call': 'timerfd_create',
                'reason': set([('list_head', 'next')])},
               {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
               {'call': 'modify_ldt', 'reason': set([('list_head', 'next')])},
               {'call': 'getgroups', 'reason': set([('list_head', 'next')])},
               {'call': 'fstatfs64', 'reason': set([('fd', 'flags')])},
               {'call': 'dup2', 'reason': set([('list_head', 'next')])},
               {'call': 'get_curr_temp',
                'reason': set([('list_head', 'next')])},
               {'call': 'msgsnd', 'reason': set([('list_head', 'next')])},
               {'call': 'write', 'reason': set([('fd', 'flags')])},
               {'call': 'munlock', 'reason': set([('list_head', 'next')])},
               {'call': 'setpriority',
                'reason': set([('list_head', 'next')])},
               {'call': 'inotify_init1',
                'reason': set([('list_head', 'next')])},
               {'call': 'mincore', 'reason': set([('list_head', 'next')])},
               {'call': 'mq_notify',
                'reason': set([('fd', 'flags'), ('list_head', 'next')])},
               {'call': 'sendfile',
                'reason': set([('fd', 'flags'), ('list_head', 'next')])},
               {'call': 'timer_getoverrun',
                'reason': set([('list_head', 'next')])},
               {'call': 'kexec_load', 'reason': set([('list_head', 'next')])},
               {'call': 'clone', 'reason': set([('list_head', 'next')])},
               {'call': 'mq_open',
                'reason': set([('file', 'f_op'), ('list_head', 'next')])},
               {'call': 'setgroups', 'reason': set([('list_head', 'next')])},
               {'call': 'unlinkat', 'reason': set([('list_head', 'next')])},
               {'call': 'sched_getparam',
                'reason': set([('list_head', 'next')])},
               {'call': 'io_cancel', 'reason': set([('list_head', 'next')])},
               {'call': 'open_by_handle_at',
                'reason': set([('file', 'f_op'), ('list_head', 'next')])},
               {'call': 'bind', 'reason': set([('fd', 'flags')])},
               {'call': 'flistxattr', 'reason': set([('fd', 'flags')])},
               {'call': 'finit_module',
                'reason': set([('list_head', 'next')])},
               {'call': 'sendfile64',
                'reason': set([('fd', 'flags'), ('list_head', 'next')])},
               {'call': 'mlockall', 'reason': set([('list_head', 'next')])}],
 'epoll_wait': [{'call': 'syncfs', 'reason': set([('fd', 'flags')])},
                {'call': 'keyctl', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'rt_sigtimedwait',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'vmsplice', 'reason': set([('fd', 'flags')])},
                {'call': 'msgrcv', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'eventfd2', 'reason': set([('file', 'f_op')])},
                {'call': 'pwritev64', 'reason': set([('fd', 'flags')])},
                {'call': 'kill', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'swapoff', 'reason': set([('file', 'f_op')])},
                {'call': 'fremovexattr', 'reason': set([('fd', 'flags')])},
                {'call': 'readahead', 'reason': set([('fd', 'flags')])},
                {'call': 'getdents', 'reason': set([('fd', 'flags')])},
                {'call': 'sched_getaffinity',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'writev', 'reason': set([('fd', 'flags')])},
                {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
                {'call': 'sched_setparam',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'fchmod', 'reason': set([('fd', 'flags')])},
                {'call': 'pread64', 'reason': set([('fd', 'flags')])},
                {'call': 'signalfd4', 'reason': set([('fd', 'flags')])},
                {'call': 'memfd_create', 'reason': set([('file', 'f_op')])},
                {'call': 'ioprio_set',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'remap_file_pages',
                 'reason': set([('file', 'f_op')])},
                {'call': 'dup3', 'reason': set([('file', 'f_op')])},
                {'call': 'read', 'reason': set([('fd', 'flags')])},
                {'call': 'getppid', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'fchown', 'reason': set([('fd', 'flags')])},
                {'call': 'ioperm', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'mq_timedreceive',
                 'reason': set([('fd', 'flags'), ('mm_segment_t', 'seg')])},
                {'call': 'capget', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'utime', 'reason': set([('fd', 'flags')])},
                {'call': 'sched_setaffinity',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'fsync', 'reason': set([('fd', 'flags')])},
                {'call': 'bpf', 'reason': set([('fd', 'flags')])},
                {'call': 'signal', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'semtimedop',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'umount', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
                {'call': 'fsetxattr', 'reason': set([('fd', 'flags')])},
                {'call': 'sendto', 'reason': set([('fd', 'flags')])},
                {'call': 'sched_rr_get_interval',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'epoll_create1', 'reason': set([('file', 'f_op')])},
                {'call': 'tee', 'reason': set([('fd', 'flags')])},
                {'call': 'sync_file_range', 'reason': set([('fd', 'flags')])},
                {'call': 'lseek', 'reason': set([('fd', 'flags')])},
                {'call': 'connect', 'reason': set([('fd', 'flags')])},
                {'call': 'getsockname', 'reason': set([('fd', 'flags')])},
                {'call': 'epoll_ctl',
                 'reason': set([('fd', 'flags'), ('file', 'f_op')])},
                {'call': 'flock',
                 'reason': set([('fd', 'flags'), ('file', 'f_op')])},
                {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
                {'call': 'fchdir', 'reason': set([('fd', 'flags')])},
                {'call': 'openat', 'reason': set([('file', 'f_op')])},
                {'call': 'uselib', 'reason': set([('file', 'f_op')])},
                {'call': 'rt_sigprocmask',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'accept4',
                 'reason': set([('fd', 'flags'), ('file', 'f_op')])},
                {'call': 'setsid', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'sigaltstack',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'sched_setattr',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'old_readdir', 'reason': set([('fd', 'flags')])},
                {'call': 'inotify_rm_watch',
                 'reason': set([('fd', 'flags')])},
                {'call': 'socketpair', 'reason': set([('file', 'f_op')])},
                {'call': 'utimensat', 'reason': set([('fd', 'flags')])},
                {'call': 'migrate_pages',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'getitimer',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'setpgid', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'inotify_add_watch',
                 'reason': set([('fd', 'flags')])},
                {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
                {'call': 'splice', 'reason': set([('fd', 'flags')])},
                {'call': 'ftruncate', 'reason': set([('fd', 'flags')])},
                {'call': 'preadv', 'reason': set([('fd', 'flags')])},
                {'call': 'getpeername', 'reason': set([('fd', 'flags')])},
                {'call': 'getsid', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'shmat', 'reason': set([('file', 'f_op')])},
                {'call': 'setsockopt', 'reason': set([('fd', 'flags')])},
                {'call': 'socket', 'reason': set([('file', 'f_op')])},
                {'call': 'pipe2', 'reason': set([('file', 'f_op')])},
                {'call': 'fcntl', 'reason': set([('fd', 'flags')])},
                {'call': 'ioctl', 'reason': set([('fd', 'flags')])},
                {'call': 'prlimit64',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'pwrite64', 'reason': set([('fd', 'flags')])},
                {'call': 'perf_event_open',
                 'reason': set([('fd', 'flags'),
                                ('file', 'f_op'),
                                ('mm_segment_t', 'seg')])},
                {'call': 'shmdt', 'reason': set([('file', 'f_op')])},
                {'call': 'pwritev64v2', 'reason': set([('fd', 'flags')])},
                {'call': 'rt_sigaction',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'futimesat', 'reason': set([('fd', 'flags')])},
                {'call': 'getpgid', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
                {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
                {'call': 'acct', 'reason': set([('file', 'f_op')])},
                {'call': 'open', 'reason': set([('file', 'f_op')])},
                {'call': 'getsockopt', 'reason': set([('fd', 'flags')])},
                {'call': 'getpriority',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'sigaction',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'mq_getsetattr', 'reason': set([('fd', 'flags')])},
                {'call': 'dup', 'reason': set([('file', 'f_op')])},
                {'call': 'fdatasync', 'reason': set([('fd', 'flags')])},
                {'call': 'setns',
                 'reason': set([('file', 'f_op'), ('mm_segment_t', 'seg')])},
                {'call': 'getdents64', 'reason': set([('fd', 'flags')])},
                {'call': 'listen', 'reason': set([('fd', 'flags')])},
                {'call': 'fork', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'get_robust_list',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'copy_file_range', 'reason': set([('fd', 'flags')])},
                {'call': 'mq_timedsend',
                 'reason': set([('fd', 'flags'), ('mm_segment_t', 'seg')])},
                {'call': 'sched_getscheduler',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'fgetxattr', 'reason': set([('fd', 'flags')])},
                {'call': 'ptrace', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'shmctl', 'reason': set([('file', 'f_op')])},
                {'call': 'fcntl64', 'reason': set([('fd', 'flags')])},
                {'call': 'swapon', 'reason': set([('file', 'f_op')])},
                {'call': 'fallocate', 'reason': set([('fd', 'flags')])},
                {'call': 'sched_getattr',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'getrusage',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'sched_setscheduler',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'setitimer',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'ioprio_get',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'vfork', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'llseek', 'reason': set([('fd', 'flags')])},
                {'call': 'mmap_pgoff', 'reason': set([('file', 'f_op')])},
                {'call': 'preadv64v2', 'reason': set([('fd', 'flags')])},
                {'call': 'readv', 'reason': set([('fd', 'flags')])},
                {'call': 'prctl', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'move_pages',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
                {'call': 'fstatfs64', 'reason': set([('fd', 'flags')])},
                {'call': 'write', 'reason': set([('fd', 'flags')])},
                {'call': 'setpriority',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'mq_notify', 'reason': set([('fd', 'flags')])},
                {'call': 'sendfile', 'reason': set([('fd', 'flags')])},
                {'call': 'clone', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'mq_open', 'reason': set([('file', 'f_op')])},
                {'call': 'sched_getparam',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'open_by_handle_at',
                 'reason': set([('file', 'f_op')])},
                {'call': 'bind', 'reason': set([('fd', 'flags')])},
                {'call': 'flistxattr', 'reason': set([('fd', 'flags')])},
                {'call': 'sendfile64', 'reason': set([('fd', 'flags')])}],
 'faccessat': [{'call': 'keyctl', 'reason': set([('task_struct', 'cred')])},
               {'call': 'rt_sigtimedwait',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'msgrcv', 'reason': set([('task_struct', 'cred')])},
               {'call': 'eventfd2', 'reason': set([('path', 'mnt')])},
               {'call': 'kill', 'reason': set([('task_struct', 'cred')])},
               {'call': 'swapoff', 'reason': set([('path', 'mnt')])},
               {'call': 'sched_getaffinity',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_setparam',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'pivot_root', 'reason': set([('path', 'mnt')])},
               {'call': 'memfd_create', 'reason': set([('path', 'mnt')])},
               {'call': 'ioprio_set',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'remap_file_pages', 'reason': set([('path', 'mnt')])},
               {'call': 'dup3', 'reason': set([('path', 'mnt')])},
               {'call': 'getppid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'mq_timedreceive',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'capget', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_setaffinity',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'unshare', 'reason': set([('path', 'mnt')])},
               {'call': 'signal', 'reason': set([('task_struct', 'cred')])},
               {'call': 'setreuid', 'reason': set([('cred', 'uid')])},
               {'call': 'semtimedop',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'umount', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_rr_get_interval',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'epoll_create1', 'reason': set([('path', 'mnt')])},
               {'call': 'epoll_ctl', 'reason': set([('path', 'mnt')])},
               {'call': 'flock', 'reason': set([('path', 'mnt')])},
               {'call': 'openat', 'reason': set([('path', 'mnt')])},
               {'call': 'lookup_dcookie', 'reason': set([('path', 'mnt')])},
               {'call': 'uselib', 'reason': set([('path', 'mnt')])},
               {'call': 'rt_sigprocmask',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'accept4', 'reason': set([('path', 'mnt')])},
               {'call': 'setsid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sigaltstack',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_setattr',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'socketpair', 'reason': set([('path', 'mnt')])},
               {'call': 'migrate_pages',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'getitimer',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setpgid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'getcwd', 'reason': set([('path', 'mnt')])},
               {'call': 'getsid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'shmat', 'reason': set([('path', 'mnt')])},
               {'call': 'socket', 'reason': set([('path', 'mnt')])},
               {'call': 'pipe2', 'reason': set([('path', 'mnt')])},
               {'call': 'prlimit64',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'perf_event_open',
                'reason': set([('path', 'mnt'), ('task_struct', 'cred')])},
               {'call': 'shmdt', 'reason': set([('path', 'mnt')])},
               {'call': 'quotactl', 'reason': set([('path', 'mnt')])},
               {'call': 'rt_sigaction',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'getpgid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'acct', 'reason': set([('path', 'mnt')])},
               {'call': 'open', 'reason': set([('path', 'mnt')])},
               {'call': 'getpriority',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sigaction',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'dup', 'reason': set([('path', 'mnt')])},
               {'call': 'setns',
                'reason': set([('path', 'mnt'), ('task_struct', 'cred')])},
               {'call': 'fork', 'reason': set([('task_struct', 'cred')])},
               {'call': 'get_robust_list',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'mq_timedsend',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_getscheduler',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'ptrace', 'reason': set([('task_struct', 'cred')])},
               {'call': 'shmctl', 'reason': set([('path', 'mnt')])},
               {'call': 'swapon', 'reason': set([('path', 'mnt')])},
               {'call': 'sched_getattr',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'getrusage',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_setscheduler',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setresuid', 'reason': set([('cred', 'uid')])},
               {'call': 'setitimer',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'ioprio_get',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'vfork', 'reason': set([('task_struct', 'cred')])},
               {'call': 'setuid', 'reason': set([('cred', 'uid')])},
               {'call': 'mmap_pgoff', 'reason': set([('path', 'mnt')])},
               {'call': 'prctl', 'reason': set([('task_struct', 'cred')])},
               {'call': 'move_pages',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setpriority',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'clone', 'reason': set([('task_struct', 'cred')])},
               {'call': 'mq_open', 'reason': set([('path', 'mnt')])},
               {'call': 'sched_getparam',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'open_by_handle_at',
                'reason': set([('path', 'mnt')])}],
 'fallocate': [{'call': 'syncfs', 'reason': set([('fd', 'flags')])},
               {'call': 'vmsplice', 'reason': set([('fd', 'flags')])},
               {'call': 'pwritev64', 'reason': set([('fd', 'flags')])},
               {'call': 'fremovexattr', 'reason': set([('fd', 'flags')])},
               {'call': 'readahead', 'reason': set([('fd', 'flags')])},
               {'call': 'getdents', 'reason': set([('fd', 'flags')])},
               {'call': 'writev', 'reason': set([('fd', 'flags')])},
               {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
               {'call': 'fchmod', 'reason': set([('fd', 'flags')])},
               {'call': 'pread64', 'reason': set([('fd', 'flags')])},
               {'call': 'signalfd4', 'reason': set([('fd', 'flags')])},
               {'call': 'read', 'reason': set([('fd', 'flags')])},
               {'call': 'fchown', 'reason': set([('fd', 'flags')])},
               {'call': 'mq_timedreceive', 'reason': set([('fd', 'flags')])},
               {'call': 'utime', 'reason': set([('fd', 'flags')])},
               {'call': 'fsync', 'reason': set([('fd', 'flags')])},
               {'call': 'bpf', 'reason': set([('fd', 'flags')])},
               {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
               {'call': 'fsetxattr', 'reason': set([('fd', 'flags')])},
               {'call': 'sendto', 'reason': set([('fd', 'flags')])},
               {'call': 'tee', 'reason': set([('fd', 'flags')])},
               {'call': 'sync_file_range', 'reason': set([('fd', 'flags')])},
               {'call': 'lseek', 'reason': set([('fd', 'flags')])},
               {'call': 'connect', 'reason': set([('fd', 'flags')])},
               {'call': 'getsockname', 'reason': set([('fd', 'flags')])},
               {'call': 'epoll_ctl', 'reason': set([('fd', 'flags')])},
               {'call': 'flock', 'reason': set([('fd', 'flags')])},
               {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
               {'call': 'fchdir', 'reason': set([('fd', 'flags')])},
               {'call': 'accept4', 'reason': set([('fd', 'flags')])},
               {'call': 'old_readdir', 'reason': set([('fd', 'flags')])},
               {'call': 'inotify_rm_watch', 'reason': set([('fd', 'flags')])},
               {'call': 'utimensat', 'reason': set([('fd', 'flags')])},
               {'call': 'inotify_add_watch',
                'reason': set([('fd', 'flags')])},
               {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
               {'call': 'splice', 'reason': set([('fd', 'flags')])},
               {'call': 'ftruncate', 'reason': set([('fd', 'flags')])},
               {'call': 'preadv', 'reason': set([('fd', 'flags')])},
               {'call': 'getpeername', 'reason': set([('fd', 'flags')])},
               {'call': 'setsockopt', 'reason': set([('fd', 'flags')])},
               {'call': 'fcntl', 'reason': set([('fd', 'flags')])},
               {'call': 'ioctl', 'reason': set([('fd', 'flags')])},
               {'call': 'pwrite64', 'reason': set([('fd', 'flags')])},
               {'call': 'perf_event_open', 'reason': set([('fd', 'flags')])},
               {'call': 'pwritev64v2', 'reason': set([('fd', 'flags')])},
               {'call': 'futimesat', 'reason': set([('fd', 'flags')])},
               {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
               {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
               {'call': 'getsockopt', 'reason': set([('fd', 'flags')])},
               {'call': 'mq_getsetattr', 'reason': set([('fd', 'flags')])},
               {'call': 'fdatasync', 'reason': set([('fd', 'flags')])},
               {'call': 'getdents64', 'reason': set([('fd', 'flags')])},
               {'call': 'listen', 'reason': set([('fd', 'flags')])},
               {'call': 'copy_file_range', 'reason': set([('fd', 'flags')])},
               {'call': 'mq_timedsend', 'reason': set([('fd', 'flags')])},
               {'call': 'fgetxattr', 'reason': set([('fd', 'flags')])},
               {'call': 'fcntl64', 'reason': set([('fd', 'flags')])},
               {'call': 'epoll_wait', 'reason': set([('fd', 'flags')])},
               {'call': 'llseek', 'reason': set([('fd', 'flags')])},
               {'call': 'preadv64v2', 'reason': set([('fd', 'flags')])},
               {'call': 'readv', 'reason': set([('fd', 'flags')])},
               {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
               {'call': 'fstatfs64', 'reason': set([('fd', 'flags')])},
               {'call': 'write', 'reason': set([('fd', 'flags')])},
               {'call': 'mq_notify', 'reason': set([('fd', 'flags')])},
               {'call': 'sendfile', 'reason': set([('fd', 'flags')])},
               {'call': 'bind', 'reason': set([('fd', 'flags')])},
               {'call': 'flistxattr', 'reason': set([('fd', 'flags')])},
               {'call': 'sendfile64', 'reason': set([('fd', 'flags')])}],
 'fchdir': [{'call': 'syncfs', 'reason': set([('fd', 'flags')])},
            {'call': 'vmsplice', 'reason': set([('fd', 'flags')])},
            {'call': 'eventfd2', 'reason': set([('path', 'dentry')])},
            {'call': 'pwritev64', 'reason': set([('fd', 'flags')])},
            {'call': 'swapoff', 'reason': set([('path', 'dentry')])},
            {'call': 'fremovexattr', 'reason': set([('fd', 'flags')])},
            {'call': 'readahead', 'reason': set([('fd', 'flags')])},
            {'call': 'getdents', 'reason': set([('fd', 'flags')])},
            {'call': 'writev', 'reason': set([('fd', 'flags')])},
            {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
            {'call': 'fchmod', 'reason': set([('fd', 'flags')])},
            {'call': 'pread64', 'reason': set([('fd', 'flags')])},
            {'call': 'pivot_root', 'reason': set([('path', 'dentry')])},
            {'call': 'signalfd4', 'reason': set([('fd', 'flags')])},
            {'call': 'memfd_create', 'reason': set([('path', 'dentry')])},
            {'call': 'remap_file_pages', 'reason': set([('path', 'dentry')])},
            {'call': 'dup3', 'reason': set([('path', 'dentry')])},
            {'call': 'read', 'reason': set([('fd', 'flags')])},
            {'call': 'fchown', 'reason': set([('fd', 'flags')])},
            {'call': 'mq_timedreceive', 'reason': set([('fd', 'flags')])},
            {'call': 'utime', 'reason': set([('fd', 'flags')])},
            {'call': 'fsync', 'reason': set([('fd', 'flags')])},
            {'call': 'bpf', 'reason': set([('fd', 'flags')])},
            {'call': 'unshare', 'reason': set([('path', 'dentry')])},
            {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
            {'call': 'fsetxattr', 'reason': set([('fd', 'flags')])},
            {'call': 'sendto', 'reason': set([('fd', 'flags')])},
            {'call': 'epoll_create1', 'reason': set([('path', 'dentry')])},
            {'call': 'tee', 'reason': set([('fd', 'flags')])},
            {'call': 'sync_file_range', 'reason': set([('fd', 'flags')])},
            {'call': 'lseek', 'reason': set([('fd', 'flags')])},
            {'call': 'connect', 'reason': set([('fd', 'flags')])},
            {'call': 'getsockname', 'reason': set([('fd', 'flags')])},
            {'call': 'epoll_ctl',
             'reason': set([('fd', 'flags'), ('path', 'dentry')])},
            {'call': 'flock',
             'reason': set([('fd', 'flags'), ('path', 'dentry')])},
            {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
            {'call': 'openat', 'reason': set([('path', 'dentry')])},
            {'call': 'lookup_dcookie', 'reason': set([('path', 'dentry')])},
            {'call': 'uselib', 'reason': set([('path', 'dentry')])},
            {'call': 'accept4',
             'reason': set([('fd', 'flags'), ('path', 'dentry')])},
            {'call': 'old_readdir', 'reason': set([('fd', 'flags')])},
            {'call': 'inotify_rm_watch', 'reason': set([('fd', 'flags')])},
            {'call': 'socketpair', 'reason': set([('path', 'dentry')])},
            {'call': 'utimensat', 'reason': set([('fd', 'flags')])},
            {'call': 'getcwd', 'reason': set([('path', 'dentry')])},
            {'call': 'inotify_add_watch', 'reason': set([('fd', 'flags')])},
            {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
            {'call': 'splice', 'reason': set([('fd', 'flags')])},
            {'call': 'ftruncate', 'reason': set([('fd', 'flags')])},
            {'call': 'preadv', 'reason': set([('fd', 'flags')])},
            {'call': 'getpeername', 'reason': set([('fd', 'flags')])},
            {'call': 'shmat', 'reason': set([('path', 'dentry')])},
            {'call': 'setsockopt', 'reason': set([('fd', 'flags')])},
            {'call': 'socket', 'reason': set([('path', 'dentry')])},
            {'call': 'pipe2', 'reason': set([('path', 'dentry')])},
            {'call': 'fcntl', 'reason': set([('fd', 'flags')])},
            {'call': 'ioctl', 'reason': set([('fd', 'flags')])},
            {'call': 'pwrite64', 'reason': set([('fd', 'flags')])},
            {'call': 'perf_event_open',
             'reason': set([('fd', 'flags'), ('path', 'dentry')])},
            {'call': 'shmdt', 'reason': set([('path', 'dentry')])},
            {'call': 'pwritev64v2', 'reason': set([('fd', 'flags')])},
            {'call': 'quotactl', 'reason': set([('path', 'dentry')])},
            {'call': 'futimesat', 'reason': set([('fd', 'flags')])},
            {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
            {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
            {'call': 'acct', 'reason': set([('path', 'dentry')])},
            {'call': 'open', 'reason': set([('path', 'dentry')])},
            {'call': 'getsockopt', 'reason': set([('fd', 'flags')])},
            {'call': 'mq_getsetattr', 'reason': set([('fd', 'flags')])},
            {'call': 'dup', 'reason': set([('path', 'dentry')])},
            {'call': 'fdatasync', 'reason': set([('fd', 'flags')])},
            {'call': 'setns', 'reason': set([('path', 'dentry')])},
            {'call': 'getdents64', 'reason': set([('fd', 'flags')])},
            {'call': 'listen', 'reason': set([('fd', 'flags')])},
            {'call': 'copy_file_range', 'reason': set([('fd', 'flags')])},
            {'call': 'mq_timedsend', 'reason': set([('fd', 'flags')])},
            {'call': 'fgetxattr', 'reason': set([('fd', 'flags')])},
            {'call': 'shmctl', 'reason': set([('path', 'dentry')])},
            {'call': 'fcntl64', 'reason': set([('fd', 'flags')])},
            {'call': 'swapon', 'reason': set([('path', 'dentry')])},
            {'call': 'fallocate', 'reason': set([('fd', 'flags')])},
            {'call': 'epoll_wait', 'reason': set([('fd', 'flags')])},
            {'call': 'llseek', 'reason': set([('fd', 'flags')])},
            {'call': 'mmap_pgoff', 'reason': set([('path', 'dentry')])},
            {'call': 'preadv64v2', 'reason': set([('fd', 'flags')])},
            {'call': 'readv', 'reason': set([('fd', 'flags')])},
            {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
            {'call': 'fstatfs64', 'reason': set([('fd', 'flags')])},
            {'call': 'write', 'reason': set([('fd', 'flags')])},
            {'call': 'mq_notify', 'reason': set([('fd', 'flags')])},
            {'call': 'sendfile', 'reason': set([('fd', 'flags')])},
            {'call': 'mq_open', 'reason': set([('path', 'dentry')])},
            {'call': 'open_by_handle_at',
             'reason': set([('path', 'dentry')])},
            {'call': 'bind', 'reason': set([('fd', 'flags')])},
            {'call': 'flistxattr', 'reason': set([('fd', 'flags')])},
            {'call': 'sendfile64', 'reason': set([('fd', 'flags')])}],
 'fchmod': [{'call': 'syncfs', 'reason': set([('fd', 'flags')])},
            {'call': 'vmsplice', 'reason': set([('fd', 'flags')])},
            {'call': 'eventfd2',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'pwritev64', 'reason': set([('fd', 'flags')])},
            {'call': 'swapoff',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'fremovexattr', 'reason': set([('fd', 'flags')])},
            {'call': 'readahead', 'reason': set([('fd', 'flags')])},
            {'call': 'getdents', 'reason': set([('fd', 'flags')])},
            {'call': 'writev', 'reason': set([('fd', 'flags')])},
            {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
            {'call': 'pread64', 'reason': set([('fd', 'flags')])},
            {'call': 'pivot_root',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'signalfd4', 'reason': set([('fd', 'flags')])},
            {'call': 'memfd_create',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'remap_file_pages',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'dup3',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'read', 'reason': set([('fd', 'flags')])},
            {'call': 'fchown', 'reason': set([('fd', 'flags')])},
            {'call': 'mq_timedreceive', 'reason': set([('fd', 'flags')])},
            {'call': 'utime', 'reason': set([('fd', 'flags')])},
            {'call': 'fsync', 'reason': set([('fd', 'flags')])},
            {'call': 'bpf', 'reason': set([('fd', 'flags')])},
            {'call': 'unshare',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
            {'call': 'fsetxattr', 'reason': set([('fd', 'flags')])},
            {'call': 'sendto', 'reason': set([('fd', 'flags')])},
            {'call': 'epoll_create1',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'tee', 'reason': set([('fd', 'flags')])},
            {'call': 'sync_file_range', 'reason': set([('fd', 'flags')])},
            {'call': 'lseek', 'reason': set([('fd', 'flags')])},
            {'call': 'connect', 'reason': set([('fd', 'flags')])},
            {'call': 'getsockname', 'reason': set([('fd', 'flags')])},
            {'call': 'epoll_ctl',
             'reason': set([('fd', 'flags'),
                            ('path', 'dentry'),
                            ('path', 'mnt')])},
            {'call': 'flock',
             'reason': set([('fd', 'flags'),
                            ('path', 'dentry'),
                            ('path', 'mnt')])},
            {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
            {'call': 'fchdir', 'reason': set([('fd', 'flags')])},
            {'call': 'openat',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'lookup_dcookie',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'uselib',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'accept4',
             'reason': set([('fd', 'flags'),
                            ('path', 'dentry'),
                            ('path', 'mnt')])},
            {'call': 'old_readdir', 'reason': set([('fd', 'flags')])},
            {'call': 'inotify_rm_watch', 'reason': set([('fd', 'flags')])},
            {'call': 'socketpair',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'utimensat', 'reason': set([('fd', 'flags')])},
            {'call': 'getcwd',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'inotify_add_watch', 'reason': set([('fd', 'flags')])},
            {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
            {'call': 'splice', 'reason': set([('fd', 'flags')])},
            {'call': 'ftruncate', 'reason': set([('fd', 'flags')])},
            {'call': 'preadv', 'reason': set([('fd', 'flags')])},
            {'call': 'getpeername', 'reason': set([('fd', 'flags')])},
            {'call': 'shmat',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'setsockopt', 'reason': set([('fd', 'flags')])},
            {'call': 'socket',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'pipe2',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'fcntl', 'reason': set([('fd', 'flags')])},
            {'call': 'ioctl', 'reason': set([('fd', 'flags')])},
            {'call': 'pwrite64', 'reason': set([('fd', 'flags')])},
            {'call': 'perf_event_open',
             'reason': set([('fd', 'flags'),
                            ('path', 'dentry'),
                            ('path', 'mnt')])},
            {'call': 'shmdt',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'pwritev64v2', 'reason': set([('fd', 'flags')])},
            {'call': 'quotactl',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'futimesat', 'reason': set([('fd', 'flags')])},
            {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
            {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
            {'call': 'acct',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'open',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'getsockopt', 'reason': set([('fd', 'flags')])},
            {'call': 'mq_getsetattr', 'reason': set([('fd', 'flags')])},
            {'call': 'dup',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'fdatasync', 'reason': set([('fd', 'flags')])},
            {'call': 'setns',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'getdents64', 'reason': set([('fd', 'flags')])},
            {'call': 'listen', 'reason': set([('fd', 'flags')])},
            {'call': 'copy_file_range', 'reason': set([('fd', 'flags')])},
            {'call': 'mq_timedsend', 'reason': set([('fd', 'flags')])},
            {'call': 'fgetxattr', 'reason': set([('fd', 'flags')])},
            {'call': 'shmctl',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'fcntl64', 'reason': set([('fd', 'flags')])},
            {'call': 'swapon',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'fallocate', 'reason': set([('fd', 'flags')])},
            {'call': 'epoll_wait', 'reason': set([('fd', 'flags')])},
            {'call': 'llseek', 'reason': set([('fd', 'flags')])},
            {'call': 'mmap_pgoff',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'preadv64v2', 'reason': set([('fd', 'flags')])},
            {'call': 'readv', 'reason': set([('fd', 'flags')])},
            {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
            {'call': 'fstatfs64', 'reason': set([('fd', 'flags')])},
            {'call': 'write', 'reason': set([('fd', 'flags')])},
            {'call': 'mq_notify', 'reason': set([('fd', 'flags')])},
            {'call': 'sendfile', 'reason': set([('fd', 'flags')])},
            {'call': 'mq_open',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'open_by_handle_at',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'bind', 'reason': set([('fd', 'flags')])},
            {'call': 'flistxattr', 'reason': set([('fd', 'flags')])},
            {'call': 'sendfile64', 'reason': set([('fd', 'flags')])}],
 'fchmodat': [{'call': 'eventfd2',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'swapoff',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'pivot_root',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'memfd_create',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'remap_file_pages',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'dup3',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'unshare',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'epoll_create1',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'epoll_ctl',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'flock',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'openat',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'lookup_dcookie',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'uselib',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'accept4',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'socketpair',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'getcwd',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'shmat',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'socket',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'pipe2',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'perf_event_open',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'shmdt',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'quotactl',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'acct',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'open',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'dup',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'setns',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'shmctl',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'swapon',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'mmap_pgoff',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'mq_open',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'open_by_handle_at',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])}],
 'fchown': [{'call': 'syncfs', 'reason': set([('fd', 'flags')])},
            {'call': 'vmsplice', 'reason': set([('fd', 'flags')])},
            {'call': 'eventfd2', 'reason': set([('path', 'dentry')])},
            {'call': 'pwritev64', 'reason': set([('fd', 'flags')])},
            {'call': 'swapoff', 'reason': set([('path', 'dentry')])},
            {'call': 'fremovexattr', 'reason': set([('fd', 'flags')])},
            {'call': 'readahead', 'reason': set([('fd', 'flags')])},
            {'call': 'getdents', 'reason': set([('fd', 'flags')])},
            {'call': 'writev', 'reason': set([('fd', 'flags')])},
            {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
            {'call': 'fchmod', 'reason': set([('fd', 'flags')])},
            {'call': 'pread64', 'reason': set([('fd', 'flags')])},
            {'call': 'pivot_root', 'reason': set([('path', 'dentry')])},
            {'call': 'signalfd4', 'reason': set([('fd', 'flags')])},
            {'call': 'memfd_create', 'reason': set([('path', 'dentry')])},
            {'call': 'remap_file_pages', 'reason': set([('path', 'dentry')])},
            {'call': 'dup3', 'reason': set([('path', 'dentry')])},
            {'call': 'read', 'reason': set([('fd', 'flags')])},
            {'call': 'mq_timedreceive', 'reason': set([('fd', 'flags')])},
            {'call': 'utime', 'reason': set([('fd', 'flags')])},
            {'call': 'fsync', 'reason': set([('fd', 'flags')])},
            {'call': 'bpf', 'reason': set([('fd', 'flags')])},
            {'call': 'unshare', 'reason': set([('path', 'dentry')])},
            {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
            {'call': 'fsetxattr', 'reason': set([('fd', 'flags')])},
            {'call': 'sendto', 'reason': set([('fd', 'flags')])},
            {'call': 'epoll_create1', 'reason': set([('path', 'dentry')])},
            {'call': 'tee', 'reason': set([('fd', 'flags')])},
            {'call': 'sync_file_range', 'reason': set([('fd', 'flags')])},
            {'call': 'lseek', 'reason': set([('fd', 'flags')])},
            {'call': 'connect', 'reason': set([('fd', 'flags')])},
            {'call': 'getsockname', 'reason': set([('fd', 'flags')])},
            {'call': 'epoll_ctl',
             'reason': set([('fd', 'flags'), ('path', 'dentry')])},
            {'call': 'flock',
             'reason': set([('fd', 'flags'), ('path', 'dentry')])},
            {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
            {'call': 'fchdir', 'reason': set([('fd', 'flags')])},
            {'call': 'openat', 'reason': set([('path', 'dentry')])},
            {'call': 'lookup_dcookie', 'reason': set([('path', 'dentry')])},
            {'call': 'uselib', 'reason': set([('path', 'dentry')])},
            {'call': 'accept4',
             'reason': set([('fd', 'flags'), ('path', 'dentry')])},
            {'call': 'old_readdir', 'reason': set([('fd', 'flags')])},
            {'call': 'inotify_rm_watch', 'reason': set([('fd', 'flags')])},
            {'call': 'socketpair', 'reason': set([('path', 'dentry')])},
            {'call': 'utimensat', 'reason': set([('fd', 'flags')])},
            {'call': 'getcwd', 'reason': set([('path', 'dentry')])},
            {'call': 'inotify_add_watch', 'reason': set([('fd', 'flags')])},
            {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
            {'call': 'splice', 'reason': set([('fd', 'flags')])},
            {'call': 'ftruncate', 'reason': set([('fd', 'flags')])},
            {'call': 'preadv', 'reason': set([('fd', 'flags')])},
            {'call': 'getpeername', 'reason': set([('fd', 'flags')])},
            {'call': 'shmat', 'reason': set([('path', 'dentry')])},
            {'call': 'setsockopt', 'reason': set([('fd', 'flags')])},
            {'call': 'socket', 'reason': set([('path', 'dentry')])},
            {'call': 'pipe2', 'reason': set([('path', 'dentry')])},
            {'call': 'fcntl', 'reason': set([('fd', 'flags')])},
            {'call': 'ioctl', 'reason': set([('fd', 'flags')])},
            {'call': 'pwrite64', 'reason': set([('fd', 'flags')])},
            {'call': 'perf_event_open',
             'reason': set([('fd', 'flags'), ('path', 'dentry')])},
            {'call': 'shmdt', 'reason': set([('path', 'dentry')])},
            {'call': 'pwritev64v2', 'reason': set([('fd', 'flags')])},
            {'call': 'quotactl', 'reason': set([('path', 'dentry')])},
            {'call': 'futimesat', 'reason': set([('fd', 'flags')])},
            {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
            {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
            {'call': 'acct', 'reason': set([('path', 'dentry')])},
            {'call': 'open', 'reason': set([('path', 'dentry')])},
            {'call': 'getsockopt', 'reason': set([('fd', 'flags')])},
            {'call': 'mq_getsetattr', 'reason': set([('fd', 'flags')])},
            {'call': 'dup', 'reason': set([('path', 'dentry')])},
            {'call': 'fdatasync', 'reason': set([('fd', 'flags')])},
            {'call': 'setns', 'reason': set([('path', 'dentry')])},
            {'call': 'getdents64', 'reason': set([('fd', 'flags')])},
            {'call': 'listen', 'reason': set([('fd', 'flags')])},
            {'call': 'copy_file_range', 'reason': set([('fd', 'flags')])},
            {'call': 'mq_timedsend', 'reason': set([('fd', 'flags')])},
            {'call': 'fgetxattr', 'reason': set([('fd', 'flags')])},
            {'call': 'shmctl', 'reason': set([('path', 'dentry')])},
            {'call': 'fcntl64', 'reason': set([('fd', 'flags')])},
            {'call': 'swapon', 'reason': set([('path', 'dentry')])},
            {'call': 'fallocate', 'reason': set([('fd', 'flags')])},
            {'call': 'epoll_wait', 'reason': set([('fd', 'flags')])},
            {'call': 'llseek', 'reason': set([('fd', 'flags')])},
            {'call': 'mmap_pgoff', 'reason': set([('path', 'dentry')])},
            {'call': 'preadv64v2', 'reason': set([('fd', 'flags')])},
            {'call': 'readv', 'reason': set([('fd', 'flags')])},
            {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
            {'call': 'fstatfs64', 'reason': set([('fd', 'flags')])},
            {'call': 'write', 'reason': set([('fd', 'flags')])},
            {'call': 'mq_notify', 'reason': set([('fd', 'flags')])},
            {'call': 'sendfile', 'reason': set([('fd', 'flags')])},
            {'call': 'mq_open', 'reason': set([('path', 'dentry')])},
            {'call': 'open_by_handle_at',
             'reason': set([('path', 'dentry')])},
            {'call': 'bind', 'reason': set([('fd', 'flags')])},
            {'call': 'flistxattr', 'reason': set([('fd', 'flags')])},
            {'call': 'sendfile64', 'reason': set([('fd', 'flags')])}],
 'fchownat': [{'call': 'eventfd2', 'reason': set([('path', 'dentry')])},
              {'call': 'swapoff', 'reason': set([('path', 'dentry')])},
              {'call': 'pivot_root', 'reason': set([('path', 'dentry')])},
              {'call': 'memfd_create', 'reason': set([('path', 'dentry')])},
              {'call': 'remap_file_pages',
               'reason': set([('path', 'dentry')])},
              {'call': 'dup3', 'reason': set([('path', 'dentry')])},
              {'call': 'unshare', 'reason': set([('path', 'dentry')])},
              {'call': 'epoll_create1', 'reason': set([('path', 'dentry')])},
              {'call': 'epoll_ctl', 'reason': set([('path', 'dentry')])},
              {'call': 'flock', 'reason': set([('path', 'dentry')])},
              {'call': 'openat', 'reason': set([('path', 'dentry')])},
              {'call': 'lookup_dcookie', 'reason': set([('path', 'dentry')])},
              {'call': 'uselib', 'reason': set([('path', 'dentry')])},
              {'call': 'accept4', 'reason': set([('path', 'dentry')])},
              {'call': 'socketpair', 'reason': set([('path', 'dentry')])},
              {'call': 'getcwd', 'reason': set([('path', 'dentry')])},
              {'call': 'shmat', 'reason': set([('path', 'dentry')])},
              {'call': 'socket', 'reason': set([('path', 'dentry')])},
              {'call': 'pipe2', 'reason': set([('path', 'dentry')])},
              {'call': 'perf_event_open',
               'reason': set([('path', 'dentry')])},
              {'call': 'shmdt', 'reason': set([('path', 'dentry')])},
              {'call': 'quotactl', 'reason': set([('path', 'dentry')])},
              {'call': 'acct', 'reason': set([('path', 'dentry')])},
              {'call': 'open', 'reason': set([('path', 'dentry')])},
              {'call': 'dup', 'reason': set([('path', 'dentry')])},
              {'call': 'setns', 'reason': set([('path', 'dentry')])},
              {'call': 'shmctl', 'reason': set([('path', 'dentry')])},
              {'call': 'swapon', 'reason': set([('path', 'dentry')])},
              {'call': 'mmap_pgoff', 'reason': set([('path', 'dentry')])},
              {'call': 'mq_open', 'reason': set([('path', 'dentry')])},
              {'call': 'open_by_handle_at',
               'reason': set([('path', 'dentry')])}],
 'fcntl': [{'call': 'syncfs', 'reason': set([('fd', 'flags')])},
           {'call': 'vmsplice', 'reason': set([('fd', 'flags')])},
           {'call': 'eventfd2', 'reason': set([('file', 'f_mode')])},
           {'call': 'pwritev64', 'reason': set([('fd', 'flags')])},
           {'call': 'swapoff', 'reason': set([('file', 'f_mode')])},
           {'call': 'fremovexattr', 'reason': set([('fd', 'flags')])},
           {'call': 'readahead', 'reason': set([('fd', 'flags')])},
           {'call': 'getdents', 'reason': set([('fd', 'flags')])},
           {'call': 'writev', 'reason': set([('fd', 'flags')])},
           {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
           {'call': 'fchmod', 'reason': set([('fd', 'flags')])},
           {'call': 'pread64', 'reason': set([('fd', 'flags')])},
           {'call': 'signalfd4', 'reason': set([('fd', 'flags')])},
           {'call': 'memfd_create', 'reason': set([('file', 'f_mode')])},
           {'call': 'remap_file_pages', 'reason': set([('file', 'f_mode')])},
           {'call': 'dup3', 'reason': set([('file', 'f_mode')])},
           {'call': 'read', 'reason': set([('fd', 'flags')])},
           {'call': 'fchown', 'reason': set([('fd', 'flags')])},
           {'call': 'mq_timedreceive', 'reason': set([('fd', 'flags')])},
           {'call': 'utime', 'reason': set([('fd', 'flags')])},
           {'call': 'fsync', 'reason': set([('fd', 'flags')])},
           {'call': 'bpf', 'reason': set([('fd', 'flags')])},
           {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
           {'call': 'fsetxattr', 'reason': set([('fd', 'flags')])},
           {'call': 'sendto', 'reason': set([('fd', 'flags')])},
           {'call': 'epoll_create1', 'reason': set([('file', 'f_mode')])},
           {'call': 'tee', 'reason': set([('fd', 'flags')])},
           {'call': 'sync_file_range', 'reason': set([('fd', 'flags')])},
           {'call': 'lseek', 'reason': set([('fd', 'flags')])},
           {'call': 'connect', 'reason': set([('fd', 'flags')])},
           {'call': 'getsockname', 'reason': set([('fd', 'flags')])},
           {'call': 'epoll_ctl',
            'reason': set([('fd', 'flags'), ('file', 'f_mode')])},
           {'call': 'flock',
            'reason': set([('fd', 'flags'), ('file', 'f_mode')])},
           {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
           {'call': 'fchdir', 'reason': set([('fd', 'flags')])},
           {'call': 'openat', 'reason': set([('file', 'f_mode')])},
           {'call': 'uselib', 'reason': set([('file', 'f_mode')])},
           {'call': 'accept4',
            'reason': set([('fd', 'flags'), ('file', 'f_mode')])},
           {'call': 'old_readdir', 'reason': set([('fd', 'flags')])},
           {'call': 'inotify_rm_watch', 'reason': set([('fd', 'flags')])},
           {'call': 'socketpair', 'reason': set([('file', 'f_mode')])},
           {'call': 'utimensat', 'reason': set([('fd', 'flags')])},
           {'call': 'inotify_add_watch', 'reason': set([('fd', 'flags')])},
           {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
           {'call': 'splice', 'reason': set([('fd', 'flags')])},
           {'call': 'ftruncate', 'reason': set([('fd', 'flags')])},
           {'call': 'preadv', 'reason': set([('fd', 'flags')])},
           {'call': 'getpeername', 'reason': set([('fd', 'flags')])},
           {'call': 'shmat', 'reason': set([('file', 'f_mode')])},
           {'call': 'setsockopt', 'reason': set([('fd', 'flags')])},
           {'call': 'socket', 'reason': set([('file', 'f_mode')])},
           {'call': 'pipe2', 'reason': set([('file', 'f_mode')])},
           {'call': 'ioctl', 'reason': set([('fd', 'flags')])},
           {'call': 'pwrite64', 'reason': set([('fd', 'flags')])},
           {'call': 'perf_event_open',
            'reason': set([('fd', 'flags'), ('file', 'f_mode')])},
           {'call': 'shmdt', 'reason': set([('file', 'f_mode')])},
           {'call': 'pwritev64v2', 'reason': set([('fd', 'flags')])},
           {'call': 'futimesat', 'reason': set([('fd', 'flags')])},
           {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
           {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
           {'call': 'acct', 'reason': set([('file', 'f_mode')])},
           {'call': 'open', 'reason': set([('file', 'f_mode')])},
           {'call': 'getsockopt', 'reason': set([('fd', 'flags')])},
           {'call': 'mq_getsetattr', 'reason': set([('fd', 'flags')])},
           {'call': 'dup', 'reason': set([('file', 'f_mode')])},
           {'call': 'fdatasync', 'reason': set([('fd', 'flags')])},
           {'call': 'setns', 'reason': set([('file', 'f_mode')])},
           {'call': 'getdents64', 'reason': set([('fd', 'flags')])},
           {'call': 'listen', 'reason': set([('fd', 'flags')])},
           {'call': 'copy_file_range', 'reason': set([('fd', 'flags')])},
           {'call': 'mq_timedsend', 'reason': set([('fd', 'flags')])},
           {'call': 'fgetxattr', 'reason': set([('fd', 'flags')])},
           {'call': 'shmctl', 'reason': set([('file', 'f_mode')])},
           {'call': 'fcntl64', 'reason': set([('fd', 'flags')])},
           {'call': 'swapon', 'reason': set([('file', 'f_mode')])},
           {'call': 'fallocate', 'reason': set([('fd', 'flags')])},
           {'call': 'epoll_wait', 'reason': set([('fd', 'flags')])},
           {'call': 'llseek', 'reason': set([('fd', 'flags')])},
           {'call': 'mmap_pgoff', 'reason': set([('file', 'f_mode')])},
           {'call': 'preadv64v2', 'reason': set([('fd', 'flags')])},
           {'call': 'readv', 'reason': set([('fd', 'flags')])},
           {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
           {'call': 'fstatfs64', 'reason': set([('fd', 'flags')])},
           {'call': 'write', 'reason': set([('fd', 'flags')])},
           {'call': 'mq_notify', 'reason': set([('fd', 'flags')])},
           {'call': 'sendfile', 'reason': set([('fd', 'flags')])},
           {'call': 'mq_open', 'reason': set([('file', 'f_mode')])},
           {'call': 'open_by_handle_at', 'reason': set([('file', 'f_mode')])},
           {'call': 'bind', 'reason': set([('fd', 'flags')])},
           {'call': 'flistxattr', 'reason': set([('fd', 'flags')])},
           {'call': 'sendfile64', 'reason': set([('fd', 'flags')])}],
 'fcntl64': [{'call': 'syncfs', 'reason': set([('fd', 'flags')])},
             {'call': 'vmsplice', 'reason': set([('fd', 'flags')])},
             {'call': 'eventfd2', 'reason': set([('file', 'f_mode')])},
             {'call': 'pwritev64', 'reason': set([('fd', 'flags')])},
             {'call': 'swapoff', 'reason': set([('file', 'f_mode')])},
             {'call': 'fremovexattr', 'reason': set([('fd', 'flags')])},
             {'call': 'readahead', 'reason': set([('fd', 'flags')])},
             {'call': 'getdents', 'reason': set([('fd', 'flags')])},
             {'call': 'writev', 'reason': set([('fd', 'flags')])},
             {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
             {'call': 'fchmod', 'reason': set([('fd', 'flags')])},
             {'call': 'pread64', 'reason': set([('fd', 'flags')])},
             {'call': 'signalfd4', 'reason': set([('fd', 'flags')])},
             {'call': 'memfd_create', 'reason': set([('file', 'f_mode')])},
             {'call': 'remap_file_pages',
              'reason': set([('file', 'f_mode')])},
             {'call': 'dup3', 'reason': set([('file', 'f_mode')])},
             {'call': 'read', 'reason': set([('fd', 'flags')])},
             {'call': 'fchown', 'reason': set([('fd', 'flags')])},
             {'call': 'mq_timedreceive', 'reason': set([('fd', 'flags')])},
             {'call': 'utime', 'reason': set([('fd', 'flags')])},
             {'call': 'fsync', 'reason': set([('fd', 'flags')])},
             {'call': 'bpf', 'reason': set([('fd', 'flags')])},
             {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
             {'call': 'fsetxattr', 'reason': set([('fd', 'flags')])},
             {'call': 'sendto', 'reason': set([('fd', 'flags')])},
             {'call': 'epoll_create1', 'reason': set([('file', 'f_mode')])},
             {'call': 'tee', 'reason': set([('fd', 'flags')])},
             {'call': 'sync_file_range', 'reason': set([('fd', 'flags')])},
             {'call': 'lseek', 'reason': set([('fd', 'flags')])},
             {'call': 'connect', 'reason': set([('fd', 'flags')])},
             {'call': 'getsockname', 'reason': set([('fd', 'flags')])},
             {'call': 'epoll_ctl',
              'reason': set([('fd', 'flags'), ('file', 'f_mode')])},
             {'call': 'flock',
              'reason': set([('fd', 'flags'), ('file', 'f_mode')])},
             {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
             {'call': 'fchdir', 'reason': set([('fd', 'flags')])},
             {'call': 'openat', 'reason': set([('file', 'f_mode')])},
             {'call': 'uselib', 'reason': set([('file', 'f_mode')])},
             {'call': 'accept4',
              'reason': set([('fd', 'flags'), ('file', 'f_mode')])},
             {'call': 'old_readdir', 'reason': set([('fd', 'flags')])},
             {'call': 'inotify_rm_watch', 'reason': set([('fd', 'flags')])},
             {'call': 'socketpair', 'reason': set([('file', 'f_mode')])},
             {'call': 'utimensat', 'reason': set([('fd', 'flags')])},
             {'call': 'inotify_add_watch', 'reason': set([('fd', 'flags')])},
             {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
             {'call': 'splice', 'reason': set([('fd', 'flags')])},
             {'call': 'ftruncate', 'reason': set([('fd', 'flags')])},
             {'call': 'preadv', 'reason': set([('fd', 'flags')])},
             {'call': 'getpeername', 'reason': set([('fd', 'flags')])},
             {'call': 'shmat', 'reason': set([('file', 'f_mode')])},
             {'call': 'setsockopt', 'reason': set([('fd', 'flags')])},
             {'call': 'socket', 'reason': set([('file', 'f_mode')])},
             {'call': 'pipe2', 'reason': set([('file', 'f_mode')])},
             {'call': 'fcntl',
              'reason': set([('fd', 'flags'),
                             ('flock', 'l_len'),
                             ('flock', 'l_start')])},
             {'call': 'ioctl', 'reason': set([('fd', 'flags')])},
             {'call': 'pwrite64', 'reason': set([('fd', 'flags')])},
             {'call': 'perf_event_open',
              'reason': set([('fd', 'flags'), ('file', 'f_mode')])},
             {'call': 'shmdt', 'reason': set([('file', 'f_mode')])},
             {'call': 'pwritev64v2', 'reason': set([('fd', 'flags')])},
             {'call': 'futimesat', 'reason': set([('fd', 'flags')])},
             {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
             {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
             {'call': 'acct', 'reason': set([('file', 'f_mode')])},
             {'call': 'open', 'reason': set([('file', 'f_mode')])},
             {'call': 'getsockopt', 'reason': set([('fd', 'flags')])},
             {'call': 'mq_getsetattr', 'reason': set([('fd', 'flags')])},
             {'call': 'dup', 'reason': set([('file', 'f_mode')])},
             {'call': 'fdatasync', 'reason': set([('fd', 'flags')])},
             {'call': 'setns', 'reason': set([('file', 'f_mode')])},
             {'call': 'getdents64', 'reason': set([('fd', 'flags')])},
             {'call': 'listen', 'reason': set([('fd', 'flags')])},
             {'call': 'copy_file_range', 'reason': set([('fd', 'flags')])},
             {'call': 'mq_timedsend', 'reason': set([('fd', 'flags')])},
             {'call': 'fgetxattr', 'reason': set([('fd', 'flags')])},
             {'call': 'shmctl', 'reason': set([('file', 'f_mode')])},
             {'call': 'swapon', 'reason': set([('file', 'f_mode')])},
             {'call': 'fallocate', 'reason': set([('fd', 'flags')])},
             {'call': 'epoll_wait', 'reason': set([('fd', 'flags')])},
             {'call': 'llseek', 'reason': set([('fd', 'flags')])},
             {'call': 'mmap_pgoff', 'reason': set([('file', 'f_mode')])},
             {'call': 'preadv64v2', 'reason': set([('fd', 'flags')])},
             {'call': 'readv', 'reason': set([('fd', 'flags')])},
             {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
             {'call': 'fstatfs64', 'reason': set([('fd', 'flags')])},
             {'call': 'write', 'reason': set([('fd', 'flags')])},
             {'call': 'mq_notify', 'reason': set([('fd', 'flags')])},
             {'call': 'sendfile', 'reason': set([('fd', 'flags')])},
             {'call': 'mq_open', 'reason': set([('file', 'f_mode')])},
             {'call': 'open_by_handle_at',
              'reason': set([('file', 'f_mode')])},
             {'call': 'bind', 'reason': set([('fd', 'flags')])},
             {'call': 'flistxattr', 'reason': set([('fd', 'flags')])},
             {'call': 'sendfile64', 'reason': set([('fd', 'flags')])}],
 'fgetxattr': [{'call': 'syncfs', 'reason': set([('fd', 'flags')])},
               {'call': 'vmsplice', 'reason': set([('fd', 'flags')])},
               {'call': 'pwritev64', 'reason': set([('fd', 'flags')])},
               {'call': 'fremovexattr', 'reason': set([('fd', 'flags')])},
               {'call': 'readahead', 'reason': set([('fd', 'flags')])},
               {'call': 'getdents', 'reason': set([('fd', 'flags')])},
               {'call': 'writev', 'reason': set([('fd', 'flags')])},
               {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
               {'call': 'fchmod', 'reason': set([('fd', 'flags')])},
               {'call': 'pread64', 'reason': set([('fd', 'flags')])},
               {'call': 'signalfd4', 'reason': set([('fd', 'flags')])},
               {'call': 'read', 'reason': set([('fd', 'flags')])},
               {'call': 'fchown', 'reason': set([('fd', 'flags')])},
               {'call': 'mq_timedreceive', 'reason': set([('fd', 'flags')])},
               {'call': 'utime', 'reason': set([('fd', 'flags')])},
               {'call': 'fsync', 'reason': set([('fd', 'flags')])},
               {'call': 'bpf', 'reason': set([('fd', 'flags')])},
               {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
               {'call': 'fsetxattr', 'reason': set([('fd', 'flags')])},
               {'call': 'sendto', 'reason': set([('fd', 'flags')])},
               {'call': 'tee', 'reason': set([('fd', 'flags')])},
               {'call': 'sync_file_range', 'reason': set([('fd', 'flags')])},
               {'call': 'lseek', 'reason': set([('fd', 'flags')])},
               {'call': 'connect', 'reason': set([('fd', 'flags')])},
               {'call': 'getsockname', 'reason': set([('fd', 'flags')])},
               {'call': 'epoll_ctl', 'reason': set([('fd', 'flags')])},
               {'call': 'flock', 'reason': set([('fd', 'flags')])},
               {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
               {'call': 'fchdir', 'reason': set([('fd', 'flags')])},
               {'call': 'accept4', 'reason': set([('fd', 'flags')])},
               {'call': 'old_readdir', 'reason': set([('fd', 'flags')])},
               {'call': 'inotify_rm_watch', 'reason': set([('fd', 'flags')])},
               {'call': 'utimensat', 'reason': set([('fd', 'flags')])},
               {'call': 'inotify_add_watch',
                'reason': set([('fd', 'flags')])},
               {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
               {'call': 'splice', 'reason': set([('fd', 'flags')])},
               {'call': 'ftruncate', 'reason': set([('fd', 'flags')])},
               {'call': 'preadv', 'reason': set([('fd', 'flags')])},
               {'call': 'getpeername', 'reason': set([('fd', 'flags')])},
               {'call': 'setsockopt', 'reason': set([('fd', 'flags')])},
               {'call': 'fcntl', 'reason': set([('fd', 'flags')])},
               {'call': 'ioctl', 'reason': set([('fd', 'flags')])},
               {'call': 'pwrite64', 'reason': set([('fd', 'flags')])},
               {'call': 'perf_event_open', 'reason': set([('fd', 'flags')])},
               {'call': 'pwritev64v2', 'reason': set([('fd', 'flags')])},
               {'call': 'futimesat', 'reason': set([('fd', 'flags')])},
               {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
               {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
               {'call': 'getsockopt', 'reason': set([('fd', 'flags')])},
               {'call': 'mq_getsetattr', 'reason': set([('fd', 'flags')])},
               {'call': 'fdatasync', 'reason': set([('fd', 'flags')])},
               {'call': 'getdents64', 'reason': set([('fd', 'flags')])},
               {'call': 'listen', 'reason': set([('fd', 'flags')])},
               {'call': 'copy_file_range', 'reason': set([('fd', 'flags')])},
               {'call': 'mq_timedsend', 'reason': set([('fd', 'flags')])},
               {'call': 'fcntl64', 'reason': set([('fd', 'flags')])},
               {'call': 'fallocate', 'reason': set([('fd', 'flags')])},
               {'call': 'epoll_wait', 'reason': set([('fd', 'flags')])},
               {'call': 'llseek', 'reason': set([('fd', 'flags')])},
               {'call': 'preadv64v2', 'reason': set([('fd', 'flags')])},
               {'call': 'readv', 'reason': set([('fd', 'flags')])},
               {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
               {'call': 'fstatfs64', 'reason': set([('fd', 'flags')])},
               {'call': 'write', 'reason': set([('fd', 'flags')])},
               {'call': 'mq_notify', 'reason': set([('fd', 'flags')])},
               {'call': 'sendfile', 'reason': set([('fd', 'flags')])},
               {'call': 'bind', 'reason': set([('fd', 'flags')])},
               {'call': 'flistxattr', 'reason': set([('fd', 'flags')])},
               {'call': 'sendfile64', 'reason': set([('fd', 'flags')])}],
 'finit_module': [{'call': 'delete_module',
                   'reason': set([('module', 'args'),
                                  ('module', 'kp'),
                                  ('module', 'num_kp'),
                                  ('module_layout', 'base'),
                                  ('module_layout', 'size')])},
                  {'call': 'init_module',
                   'reason': set([('load_info', 'debug'),
                                  ('load_info', 'num_debug'),
                                  ('module', 'args'),
                                  ('module', 'kp'),
                                  ('module', 'num_kp'),
                                  ('module_layout', 'base'),
                                  ('module_layout', 'size')])}],
 'flistxattr': [{'call': 'syncfs', 'reason': set([('fd', 'flags')])},
                {'call': 'vmsplice', 'reason': set([('fd', 'flags')])},
                {'call': 'pwritev64', 'reason': set([('fd', 'flags')])},
                {'call': 'fremovexattr', 'reason': set([('fd', 'flags')])},
                {'call': 'readahead', 'reason': set([('fd', 'flags')])},
                {'call': 'getdents', 'reason': set([('fd', 'flags')])},
                {'call': 'writev', 'reason': set([('fd', 'flags')])},
                {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
                {'call': 'fchmod', 'reason': set([('fd', 'flags')])},
                {'call': 'pread64', 'reason': set([('fd', 'flags')])},
                {'call': 'signalfd4', 'reason': set([('fd', 'flags')])},
                {'call': 'read', 'reason': set([('fd', 'flags')])},
                {'call': 'fchown', 'reason': set([('fd', 'flags')])},
                {'call': 'mq_timedreceive', 'reason': set([('fd', 'flags')])},
                {'call': 'utime', 'reason': set([('fd', 'flags')])},
                {'call': 'fsync', 'reason': set([('fd', 'flags')])},
                {'call': 'bpf', 'reason': set([('fd', 'flags')])},
                {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
                {'call': 'fsetxattr', 'reason': set([('fd', 'flags')])},
                {'call': 'sendto', 'reason': set([('fd', 'flags')])},
                {'call': 'tee', 'reason': set([('fd', 'flags')])},
                {'call': 'sync_file_range', 'reason': set([('fd', 'flags')])},
                {'call': 'lseek', 'reason': set([('fd', 'flags')])},
                {'call': 'connect', 'reason': set([('fd', 'flags')])},
                {'call': 'getsockname', 'reason': set([('fd', 'flags')])},
                {'call': 'epoll_ctl', 'reason': set([('fd', 'flags')])},
                {'call': 'flock', 'reason': set([('fd', 'flags')])},
                {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
                {'call': 'fchdir', 'reason': set([('fd', 'flags')])},
                {'call': 'accept4', 'reason': set([('fd', 'flags')])},
                {'call': 'old_readdir', 'reason': set([('fd', 'flags')])},
                {'call': 'inotify_rm_watch',
                 'reason': set([('fd', 'flags')])},
                {'call': 'utimensat', 'reason': set([('fd', 'flags')])},
                {'call': 'inotify_add_watch',
                 'reason': set([('fd', 'flags')])},
                {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
                {'call': 'splice', 'reason': set([('fd', 'flags')])},
                {'call': 'ftruncate', 'reason': set([('fd', 'flags')])},
                {'call': 'preadv', 'reason': set([('fd', 'flags')])},
                {'call': 'getpeername', 'reason': set([('fd', 'flags')])},
                {'call': 'setsockopt', 'reason': set([('fd', 'flags')])},
                {'call': 'fcntl', 'reason': set([('fd', 'flags')])},
                {'call': 'ioctl', 'reason': set([('fd', 'flags')])},
                {'call': 'pwrite64', 'reason': set([('fd', 'flags')])},
                {'call': 'perf_event_open', 'reason': set([('fd', 'flags')])},
                {'call': 'pwritev64v2', 'reason': set([('fd', 'flags')])},
                {'call': 'futimesat', 'reason': set([('fd', 'flags')])},
                {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
                {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
                {'call': 'getsockopt', 'reason': set([('fd', 'flags')])},
                {'call': 'mq_getsetattr', 'reason': set([('fd', 'flags')])},
                {'call': 'fdatasync', 'reason': set([('fd', 'flags')])},
                {'call': 'getdents64', 'reason': set([('fd', 'flags')])},
                {'call': 'listen', 'reason': set([('fd', 'flags')])},
                {'call': 'copy_file_range', 'reason': set([('fd', 'flags')])},
                {'call': 'mq_timedsend', 'reason': set([('fd', 'flags')])},
                {'call': 'fgetxattr', 'reason': set([('fd', 'flags')])},
                {'call': 'fcntl64', 'reason': set([('fd', 'flags')])},
                {'call': 'fallocate', 'reason': set([('fd', 'flags')])},
                {'call': 'epoll_wait', 'reason': set([('fd', 'flags')])},
                {'call': 'llseek', 'reason': set([('fd', 'flags')])},
                {'call': 'preadv64v2', 'reason': set([('fd', 'flags')])},
                {'call': 'readv', 'reason': set([('fd', 'flags')])},
                {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
                {'call': 'fstatfs64', 'reason': set([('fd', 'flags')])},
                {'call': 'write', 'reason': set([('fd', 'flags')])},
                {'call': 'mq_notify', 'reason': set([('fd', 'flags')])},
                {'call': 'sendfile', 'reason': set([('fd', 'flags')])},
                {'call': 'bind', 'reason': set([('fd', 'flags')])},
                {'call': 'sendfile64', 'reason': set([('fd', 'flags')])}],
 'flock': [{'call': 'syncfs',
            'reason': set([('fd', 'flags'), ('super_block', 's_flags')])},
           {'call': 'vmsplice', 'reason': set([('fd', 'flags')])},
           {'call': 'eventfd2', 'reason': set([('file', 'f_mode')])},
           {'call': 'pwritev64', 'reason': set([('fd', 'flags')])},
           {'call': 'swapoff', 'reason': set([('file', 'f_mode')])},
           {'call': 'fremovexattr', 'reason': set([('fd', 'flags')])},
           {'call': 'readahead', 'reason': set([('fd', 'flags')])},
           {'call': 'getdents', 'reason': set([('fd', 'flags')])},
           {'call': 'writev', 'reason': set([('fd', 'flags')])},
           {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
           {'call': 'fchmod', 'reason': set([('fd', 'flags')])},
           {'call': 'pread64', 'reason': set([('fd', 'flags')])},
           {'call': 'signalfd4', 'reason': set([('fd', 'flags')])},
           {'call': 'memfd_create', 'reason': set([('file', 'f_mode')])},
           {'call': 'remap_file_pages', 'reason': set([('file', 'f_mode')])},
           {'call': 'dup3', 'reason': set([('file', 'f_mode')])},
           {'call': 'read', 'reason': set([('fd', 'flags')])},
           {'call': 'fchown', 'reason': set([('fd', 'flags')])},
           {'call': 'mq_timedreceive', 'reason': set([('fd', 'flags')])},
           {'call': 'utime', 'reason': set([('fd', 'flags')])},
           {'call': 'ustat', 'reason': set([('super_block', 's_flags')])},
           {'call': 'fsync', 'reason': set([('fd', 'flags')])},
           {'call': 'bpf', 'reason': set([('fd', 'flags')])},
           {'call': 'umount', 'reason': set([('super_block', 's_flags')])},
           {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
           {'call': 'fsetxattr', 'reason': set([('fd', 'flags')])},
           {'call': 'sendto', 'reason': set([('fd', 'flags')])},
           {'call': 'epoll_create1', 'reason': set([('file', 'f_mode')])},
           {'call': 'tee', 'reason': set([('fd', 'flags')])},
           {'call': 'sync_file_range', 'reason': set([('fd', 'flags')])},
           {'call': 'lseek', 'reason': set([('fd', 'flags')])},
           {'call': 'connect', 'reason': set([('fd', 'flags')])},
           {'call': 'getsockname', 'reason': set([('fd', 'flags')])},
           {'call': 'epoll_ctl',
            'reason': set([('fd', 'flags'), ('file', 'f_mode')])},
           {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
           {'call': 'fchdir', 'reason': set([('fd', 'flags')])},
           {'call': 'openat', 'reason': set([('file', 'f_mode')])},
           {'call': 'uselib', 'reason': set([('file', 'f_mode')])},
           {'call': 'accept4',
            'reason': set([('fd', 'flags'), ('file', 'f_mode')])},
           {'call': 'old_readdir', 'reason': set([('fd', 'flags')])},
           {'call': 'inotify_rm_watch', 'reason': set([('fd', 'flags')])},
           {'call': 'socketpair', 'reason': set([('file', 'f_mode')])},
           {'call': 'utimensat', 'reason': set([('fd', 'flags')])},
           {'call': 'inotify_add_watch', 'reason': set([('fd', 'flags')])},
           {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
           {'call': 'splice', 'reason': set([('fd', 'flags')])},
           {'call': 'ftruncate', 'reason': set([('fd', 'flags')])},
           {'call': 'preadv', 'reason': set([('fd', 'flags')])},
           {'call': 'getpeername', 'reason': set([('fd', 'flags')])},
           {'call': 'shmat', 'reason': set([('file', 'f_mode')])},
           {'call': 'setsockopt', 'reason': set([('fd', 'flags')])},
           {'call': 'socket', 'reason': set([('file', 'f_mode')])},
           {'call': 'pipe2', 'reason': set([('file', 'f_mode')])},
           {'call': 'fcntl', 'reason': set([('fd', 'flags')])},
           {'call': 'ioctl', 'reason': set([('fd', 'flags')])},
           {'call': 'pwrite64', 'reason': set([('fd', 'flags')])},
           {'call': 'perf_event_open',
            'reason': set([('fd', 'flags'), ('file', 'f_mode')])},
           {'call': 'shmdt', 'reason': set([('file', 'f_mode')])},
           {'call': 'pwritev64v2', 'reason': set([('fd', 'flags')])},
           {'call': 'quotactl', 'reason': set([('super_block', 's_flags')])},
           {'call': 'futimesat', 'reason': set([('fd', 'flags')])},
           {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
           {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
           {'call': 'acct', 'reason': set([('file', 'f_mode')])},
           {'call': 'open', 'reason': set([('file', 'f_mode')])},
           {'call': 'getsockopt', 'reason': set([('fd', 'flags')])},
           {'call': 'mq_getsetattr', 'reason': set([('fd', 'flags')])},
           {'call': 'dup', 'reason': set([('file', 'f_mode')])},
           {'call': 'fdatasync', 'reason': set([('fd', 'flags')])},
           {'call': 'setns', 'reason': set([('file', 'f_mode')])},
           {'call': 'getdents64', 'reason': set([('fd', 'flags')])},
           {'call': 'listen', 'reason': set([('fd', 'flags')])},
           {'call': 'copy_file_range', 'reason': set([('fd', 'flags')])},
           {'call': 'mq_timedsend', 'reason': set([('fd', 'flags')])},
           {'call': 'fgetxattr', 'reason': set([('fd', 'flags')])},
           {'call': 'shmctl', 'reason': set([('file', 'f_mode')])},
           {'call': 'fcntl64', 'reason': set([('fd', 'flags')])},
           {'call': 'swapon',
            'reason': set([('file', 'f_mode'), ('super_block', 's_flags')])},
           {'call': 'fallocate', 'reason': set([('fd', 'flags')])},
           {'call': 'epoll_wait', 'reason': set([('fd', 'flags')])},
           {'call': 'llseek', 'reason': set([('fd', 'flags')])},
           {'call': 'mmap_pgoff', 'reason': set([('file', 'f_mode')])},
           {'call': 'preadv64v2', 'reason': set([('fd', 'flags')])},
           {'call': 'readv', 'reason': set([('fd', 'flags')])},
           {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
           {'call': 'fstatfs64', 'reason': set([('fd', 'flags')])},
           {'call': 'write', 'reason': set([('fd', 'flags')])},
           {'call': 'mq_notify', 'reason': set([('fd', 'flags')])},
           {'call': 'sendfile', 'reason': set([('fd', 'flags')])},
           {'call': 'mq_open', 'reason': set([('file', 'f_mode')])},
           {'call': 'open_by_handle_at', 'reason': set([('file', 'f_mode')])},
           {'call': 'bind', 'reason': set([('fd', 'flags')])},
           {'call': 'flistxattr', 'reason': set([('fd', 'flags')])},
           {'call': 'sendfile64', 'reason': set([('fd', 'flags')])}],
 'fremovexattr': [{'call': 'syncfs', 'reason': set([('fd', 'flags')])},
                  {'call': 'vmsplice', 'reason': set([('fd', 'flags')])},
                  {'call': 'pwritev64', 'reason': set([('fd', 'flags')])},
                  {'call': 'readahead', 'reason': set([('fd', 'flags')])},
                  {'call': 'getdents', 'reason': set([('fd', 'flags')])},
                  {'call': 'writev', 'reason': set([('fd', 'flags')])},
                  {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
                  {'call': 'fchmod', 'reason': set([('fd', 'flags')])},
                  {'call': 'pread64', 'reason': set([('fd', 'flags')])},
                  {'call': 'signalfd4', 'reason': set([('fd', 'flags')])},
                  {'call': 'read', 'reason': set([('fd', 'flags')])},
                  {'call': 'fchown', 'reason': set([('fd', 'flags')])},
                  {'call': 'mq_timedreceive',
                   'reason': set([('fd', 'flags')])},
                  {'call': 'utime', 'reason': set([('fd', 'flags')])},
                  {'call': 'fsync', 'reason': set([('fd', 'flags')])},
                  {'call': 'bpf', 'reason': set([('fd', 'flags')])},
                  {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
                  {'call': 'fsetxattr', 'reason': set([('fd', 'flags')])},
                  {'call': 'sendto', 'reason': set([('fd', 'flags')])},
                  {'call': 'tee', 'reason': set([('fd', 'flags')])},
                  {'call': 'sync_file_range',
                   'reason': set([('fd', 'flags')])},
                  {'call': 'lseek', 'reason': set([('fd', 'flags')])},
                  {'call': 'connect', 'reason': set([('fd', 'flags')])},
                  {'call': 'getsockname', 'reason': set([('fd', 'flags')])},
                  {'call': 'epoll_ctl', 'reason': set([('fd', 'flags')])},
                  {'call': 'flock', 'reason': set([('fd', 'flags')])},
                  {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
                  {'call': 'fchdir', 'reason': set([('fd', 'flags')])},
                  {'call': 'accept4', 'reason': set([('fd', 'flags')])},
                  {'call': 'old_readdir', 'reason': set([('fd', 'flags')])},
                  {'call': 'inotify_rm_watch',
                   'reason': set([('fd', 'flags')])},
                  {'call': 'utimensat', 'reason': set([('fd', 'flags')])},
                  {'call': 'inotify_add_watch',
                   'reason': set([('fd', 'flags')])},
                  {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
                  {'call': 'splice', 'reason': set([('fd', 'flags')])},
                  {'call': 'ftruncate', 'reason': set([('fd', 'flags')])},
                  {'call': 'preadv', 'reason': set([('fd', 'flags')])},
                  {'call': 'getpeername', 'reason': set([('fd', 'flags')])},
                  {'call': 'setsockopt', 'reason': set([('fd', 'flags')])},
                  {'call': 'fcntl', 'reason': set([('fd', 'flags')])},
                  {'call': 'ioctl', 'reason': set([('fd', 'flags')])},
                  {'call': 'pwrite64', 'reason': set([('fd', 'flags')])},
                  {'call': 'perf_event_open',
                   'reason': set([('fd', 'flags')])},
                  {'call': 'pwritev64v2', 'reason': set([('fd', 'flags')])},
                  {'call': 'futimesat', 'reason': set([('fd', 'flags')])},
                  {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
                  {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
                  {'call': 'getsockopt', 'reason': set([('fd', 'flags')])},
                  {'call': 'mq_getsetattr', 'reason': set([('fd', 'flags')])},
                  {'call': 'fdatasync', 'reason': set([('fd', 'flags')])},
                  {'call': 'getdents64', 'reason': set([('fd', 'flags')])},
                  {'call': 'listen', 'reason': set([('fd', 'flags')])},
                  {'call': 'copy_file_range',
                   'reason': set([('fd', 'flags')])},
                  {'call': 'mq_timedsend', 'reason': set([('fd', 'flags')])},
                  {'call': 'fgetxattr', 'reason': set([('fd', 'flags')])},
                  {'call': 'fcntl64', 'reason': set([('fd', 'flags')])},
                  {'call': 'fallocate', 'reason': set([('fd', 'flags')])},
                  {'call': 'epoll_wait', 'reason': set([('fd', 'flags')])},
                  {'call': 'llseek', 'reason': set([('fd', 'flags')])},
                  {'call': 'preadv64v2', 'reason': set([('fd', 'flags')])},
                  {'call': 'readv', 'reason': set([('fd', 'flags')])},
                  {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
                  {'call': 'fstatfs64', 'reason': set([('fd', 'flags')])},
                  {'call': 'write', 'reason': set([('fd', 'flags')])},
                  {'call': 'mq_notify', 'reason': set([('fd', 'flags')])},
                  {'call': 'sendfile', 'reason': set([('fd', 'flags')])},
                  {'call': 'bind', 'reason': set([('fd', 'flags')])},
                  {'call': 'flistxattr', 'reason': set([('fd', 'flags')])},
                  {'call': 'sendfile64', 'reason': set([('fd', 'flags')])}],
 'fsetxattr': [{'call': 'syncfs', 'reason': set([('fd', 'flags')])},
               {'call': 'vmsplice', 'reason': set([('fd', 'flags')])},
               {'call': 'pwritev64', 'reason': set([('fd', 'flags')])},
               {'call': 'fremovexattr', 'reason': set([('fd', 'flags')])},
               {'call': 'readahead', 'reason': set([('fd', 'flags')])},
               {'call': 'getdents', 'reason': set([('fd', 'flags')])},
               {'call': 'writev', 'reason': set([('fd', 'flags')])},
               {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
               {'call': 'fchmod', 'reason': set([('fd', 'flags')])},
               {'call': 'pread64', 'reason': set([('fd', 'flags')])},
               {'call': 'signalfd4', 'reason': set([('fd', 'flags')])},
               {'call': 'read', 'reason': set([('fd', 'flags')])},
               {'call': 'fchown', 'reason': set([('fd', 'flags')])},
               {'call': 'mq_timedreceive', 'reason': set([('fd', 'flags')])},
               {'call': 'utime', 'reason': set([('fd', 'flags')])},
               {'call': 'fsync', 'reason': set([('fd', 'flags')])},
               {'call': 'bpf', 'reason': set([('fd', 'flags')])},
               {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
               {'call': 'sendto', 'reason': set([('fd', 'flags')])},
               {'call': 'tee', 'reason': set([('fd', 'flags')])},
               {'call': 'sync_file_range', 'reason': set([('fd', 'flags')])},
               {'call': 'lseek', 'reason': set([('fd', 'flags')])},
               {'call': 'connect', 'reason': set([('fd', 'flags')])},
               {'call': 'getsockname', 'reason': set([('fd', 'flags')])},
               {'call': 'epoll_ctl', 'reason': set([('fd', 'flags')])},
               {'call': 'flock', 'reason': set([('fd', 'flags')])},
               {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
               {'call': 'fchdir', 'reason': set([('fd', 'flags')])},
               {'call': 'accept4', 'reason': set([('fd', 'flags')])},
               {'call': 'old_readdir', 'reason': set([('fd', 'flags')])},
               {'call': 'inotify_rm_watch', 'reason': set([('fd', 'flags')])},
               {'call': 'utimensat', 'reason': set([('fd', 'flags')])},
               {'call': 'inotify_add_watch',
                'reason': set([('fd', 'flags')])},
               {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
               {'call': 'splice', 'reason': set([('fd', 'flags')])},
               {'call': 'ftruncate', 'reason': set([('fd', 'flags')])},
               {'call': 'preadv', 'reason': set([('fd', 'flags')])},
               {'call': 'getpeername', 'reason': set([('fd', 'flags')])},
               {'call': 'setsockopt', 'reason': set([('fd', 'flags')])},
               {'call': 'fcntl', 'reason': set([('fd', 'flags')])},
               {'call': 'ioctl', 'reason': set([('fd', 'flags')])},
               {'call': 'pwrite64', 'reason': set([('fd', 'flags')])},
               {'call': 'perf_event_open', 'reason': set([('fd', 'flags')])},
               {'call': 'pwritev64v2', 'reason': set([('fd', 'flags')])},
               {'call': 'futimesat', 'reason': set([('fd', 'flags')])},
               {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
               {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
               {'call': 'getsockopt', 'reason': set([('fd', 'flags')])},
               {'call': 'mq_getsetattr', 'reason': set([('fd', 'flags')])},
               {'call': 'fdatasync', 'reason': set([('fd', 'flags')])},
               {'call': 'getdents64', 'reason': set([('fd', 'flags')])},
               {'call': 'listen', 'reason': set([('fd', 'flags')])},
               {'call': 'copy_file_range', 'reason': set([('fd', 'flags')])},
               {'call': 'mq_timedsend', 'reason': set([('fd', 'flags')])},
               {'call': 'fgetxattr', 'reason': set([('fd', 'flags')])},
               {'call': 'fcntl64', 'reason': set([('fd', 'flags')])},
               {'call': 'fallocate', 'reason': set([('fd', 'flags')])},
               {'call': 'epoll_wait', 'reason': set([('fd', 'flags')])},
               {'call': 'llseek', 'reason': set([('fd', 'flags')])},
               {'call': 'preadv64v2', 'reason': set([('fd', 'flags')])},
               {'call': 'readv', 'reason': set([('fd', 'flags')])},
               {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
               {'call': 'fstatfs64', 'reason': set([('fd', 'flags')])},
               {'call': 'write', 'reason': set([('fd', 'flags')])},
               {'call': 'mq_notify', 'reason': set([('fd', 'flags')])},
               {'call': 'sendfile', 'reason': set([('fd', 'flags')])},
               {'call': 'bind', 'reason': set([('fd', 'flags')])},
               {'call': 'flistxattr', 'reason': set([('fd', 'flags')])},
               {'call': 'sendfile64', 'reason': set([('fd', 'flags')])}],
 'fstat': [{'call': 'lstat',
            'reason': set([('__old_kernel_stat', 'st_ino'),
                           ('__old_kernel_stat', 'st_nlink')])},
           {'call': 'stat',
            'reason': set([('__old_kernel_stat', 'st_ino'),
                           ('__old_kernel_stat', 'st_nlink')])},
           {'call': 'newfstat',
            'reason': set([('kstat', 'dev'),
                           ('kstat', 'ino'),
                           ('kstat', 'nlink'),
                           ('kstat', 'rdev')])}],
 'fstatfs': [{'call': 'ustat',
              'reason': set([('kstatfs', 'f_ffree'),
                             ('kstatfs', 'f_files')])},
             {'call': 'statfs',
              'reason': set([('kstatfs', 'f_ffree'),
                             ('kstatfs', 'f_files')])},
             {'call': 'fstatfs64',
              'reason': set([('kstatfs', 'f_ffree'),
                             ('kstatfs', 'f_files')])},
             {'call': 'statfs64',
              'reason': set([('kstatfs', 'f_ffree'),
                             ('kstatfs', 'f_files')])}],
 'fstatfs64': [{'call': 'ustat',
                'reason': set([('kstatfs', 'f_ffree'),
                               ('kstatfs', 'f_files')])},
               {'call': 'fstatfs',
                'reason': set([('kstatfs', 'f_ffree'),
                               ('kstatfs', 'f_files')])},
               {'call': 'statfs',
                'reason': set([('kstatfs', 'f_ffree'),
                               ('kstatfs', 'f_files')])},
               {'call': 'statfs64',
                'reason': set([('kstatfs', 'f_ffree'),
                               ('kstatfs', 'f_files')])}],
 'ftruncate': [{'call': 'eventfd2',
                'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
               {'call': 'mq_unlink',
                'reason': set([('inode', 'i_flags'), ('inode', 'i_sb')])},
               {'call': 'swapoff',
                'reason': set([('file', 'f_flags'),
                               ('file', 'f_mode'),
                               ('inode', 'i_flags'),
                               ('inode', 'i_sb')])},
               {'call': 'fchmod',
                'reason': set([('inode', 'i_flags'), ('inode', 'i_sb')])},
               {'call': 'memfd_create',
                'reason': set([('file', 'f_flags'),
                               ('file', 'f_mode'),
                               ('inode', 'i_flags'),
                               ('inode', 'i_sb')])},
               {'call': 'remap_file_pages',
                'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
               {'call': 'dup3',
                'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
               {'call': 'readlinkat',
                'reason': set([('inode', 'i_flags'), ('inode', 'i_sb')])},
               {'call': 'fchown',
                'reason': set([('inode', 'i_flags'), ('inode', 'i_sb')])},
               {'call': 'mq_timedreceive',
                'reason': set([('inode', 'i_flags'), ('inode', 'i_sb')])},
               {'call': 'epoll_create1',
                'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
               {'call': 'epoll_ctl',
                'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
               {'call': 'flock',
                'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
               {'call': 'openat',
                'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
               {'call': 'uselib',
                'reason': set([('file', 'f_flags'),
                               ('file', 'f_mode'),
                               ('inode', 'i_flags'),
                               ('inode', 'i_sb')])},
               {'call': 'accept4',
                'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
               {'call': 'socketpair',
                'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
               {'call': 'fchmodat',
                'reason': set([('inode', 'i_flags'), ('inode', 'i_sb')])},
               {'call': 'inotify_add_watch',
                'reason': set([('inode', 'i_flags'), ('inode', 'i_sb')])},
               {'call': 'shmat',
                'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
               {'call': 'socket',
                'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
               {'call': 'pipe2',
                'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
               {'call': 'ioctl',
                'reason': set([('inode', 'i_flags'), ('inode', 'i_sb')])},
               {'call': 'perf_event_open',
                'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
               {'call': 'linkat',
                'reason': set([('inode', 'i_flags'), ('inode', 'i_sb')])},
               {'call': 'shmdt',
                'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
               {'call': 'acct',
                'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
               {'call': 'open',
                'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
               {'call': 'unlink',
                'reason': set([('inode', 'i_flags'), ('inode', 'i_sb')])},
               {'call': 'mq_getsetattr',
                'reason': set([('file', 'f_flags'),
                               ('inode', 'i_flags'),
                               ('inode', 'i_sb')])},
               {'call': 'faccessat',
                'reason': set([('inode', 'i_flags'), ('inode', 'i_sb')])},
               {'call': 'dup',
                'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
               {'call': 'setns',
                'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
               {'call': 'mq_timedsend',
                'reason': set([('inode', 'i_flags'), ('inode', 'i_sb')])},
               {'call': 'shmctl',
                'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
               {'call': 'swapon',
                'reason': set([('file', 'f_flags'),
                               ('file', 'f_mode'),
                               ('inode', 'i_flags'),
                               ('inode', 'i_sb')])},
               {'call': 'fchownat',
                'reason': set([('inode', 'i_flags'), ('inode', 'i_sb')])},
               {'call': 'mmap_pgoff',
                'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
               {'call': 'mq_notify',
                'reason': set([('inode', 'i_flags'), ('inode', 'i_sb')])},
               {'call': 'sendfile',
                'reason': set([('inode', 'i_flags'), ('inode', 'i_sb')])},
               {'call': 'mq_open',
                'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
               {'call': 'unlinkat',
                'reason': set([('inode', 'i_flags'), ('inode', 'i_sb')])},
               {'call': 'open_by_handle_at',
                'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
               {'call': 'sendfile64',
                'reason': set([('inode', 'i_flags'), ('inode', 'i_sb')])}],
 'futex': [{'call': 'rt_sigtimedwait',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'mq_unlink',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'swapoff',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'fchmod',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'memfd_create',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'readlinkat',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'io_getevents',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'fchown',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'mq_timedreceive',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'utime',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'semtimedop',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'settimeofday',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'sched_rr_get_interval',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'timerfd_gettime',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'pselect6',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'uselib',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'fchmodat',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'inotify_add_watch',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'timer_settime',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'ftruncate',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'timer_gettime',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'ioctl',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'linkat',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'stime',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'futimesat',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'poll',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'select',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'unlink',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'nanosleep',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'mq_getsetattr',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'faccessat',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'mq_timedsend',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'swapon',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'epoll_wait',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'fchownat',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'fstat',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'timerfd_settime',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'mq_notify',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'sendfile',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'newfstat',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'clock_nanosleep',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'unlinkat',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'recvmmsg',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'sendfile64',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'ppoll',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])}],
 'futimesat': [{'call': 'rt_sigtimedwait',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'mq_unlink',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'swapoff', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'fchmod', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'memfd_create',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'readlinkat',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'io_getevents',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'fchown', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'waitid', 'reason': set([('timeval', 'tv_usec')])},
               {'call': 'mq_timedreceive',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'utime', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'semtimedop',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'settimeofday',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timeval', 'tv_usec')])},
               {'call': 'sched_rr_get_interval',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'timerfd_gettime',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'adjtimex', 'reason': set([('timeval', 'tv_usec')])},
               {'call': 'pselect6', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'uselib', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'getitimer', 'reason': set([('timeval', 'tv_usec')])},
               {'call': 'fchmodat', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'inotify_add_watch',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'timer_settime',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'ftruncate',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'timer_gettime',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'ioctl', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'linkat', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'stime', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'poll', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'select',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timeval', 'tv_usec')])},
               {'call': 'unlink', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'nanosleep',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'mq_getsetattr',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'faccessat',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'mq_timedsend',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'swapon', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'wait4', 'reason': set([('timeval', 'tv_usec')])},
               {'call': 'epoll_wait',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'fchownat', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'getrusage', 'reason': set([('timeval', 'tv_usec')])},
               {'call': 'fstat', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'timerfd_settime',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'setitimer', 'reason': set([('timeval', 'tv_usec')])},
               {'call': 'mq_notify',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'sendfile', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'newfstat', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'clock_nanosleep',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'unlinkat', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'clock_adjtime',
                'reason': set([('timeval', 'tv_usec')])},
               {'call': 'alarm', 'reason': set([('timeval', 'tv_usec')])},
               {'call': 'futex', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'recvmmsg', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'sendfile64',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'ppoll',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timeval', 'tv_usec')])}],
 'get_mempolicy': [{'call': 'keyctl',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'rt_sigtimedwait',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'msgrcv',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'kill',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'sched_getaffinity',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'sched_setparam',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'ioprio_set',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'remap_file_pages',
                    'reason': set([('vm_area_struct', 'vm_ops')])},
                   {'call': 'getppid',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'mq_timedreceive',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'capget',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'sched_setaffinity',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'signal',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'semtimedop',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'umount',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'sched_rr_get_interval',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'rt_sigprocmask',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'setsid',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'sigaltstack',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'sched_setattr',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'migrate_pages',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'getitimer',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'setpgid',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'getsid',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'prlimit64',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'set_mempolicy',
                    'reason': set([('mempolicy', 'mode'),
                                   ('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'perf_event_open',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'shmdt',
                    'reason': set([('vm_area_struct', 'vm_ops')])},
                   {'call': 'rt_sigaction',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'getpgid',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'brk',
                    'reason': set([('vm_area_struct', 'vm_ops')])},
                   {'call': 'getpriority',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'sigaction',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'setns',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'fork',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'get_robust_list',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'mq_timedsend',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'sched_getscheduler',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'ptrace',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'munlockall',
                    'reason': set([('vm_area_struct', 'vm_ops')])},
                   {'call': 'pkey_mprotect',
                    'reason': set([('vm_area_struct', 'vm_ops')])},
                   {'call': 'madvise',
                    'reason': set([('vm_area_struct', 'vm_ops')])},
                   {'call': 'sched_getattr',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'getrusage',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'sched_setscheduler',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'setitimer',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'ioprio_get',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'vfork',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'mprotect',
                    'reason': set([('vm_area_struct', 'vm_ops')])},
                   {'call': 'mremap',
                    'reason': set([('vm_area_struct', 'vm_ops')])},
                   {'call': 'mbind', 'reason': set([('mempolicy', 'mode')])},
                   {'call': 'prctl',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy'),
                                   ('vm_area_struct', 'vm_ops')])},
                   {'call': 'move_pages',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'munlock',
                    'reason': set([('vm_area_struct', 'vm_ops')])},
                   {'call': 'setpriority',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'mincore',
                    'reason': set([('vm_area_struct', 'vm_ops')])},
                   {'call': 'clone',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'sched_getparam',
                    'reason': set([('task_struct', 'il_prev'),
                                   ('task_struct', 'mempolicy')])},
                   {'call': 'mlockall',
                    'reason': set([('vm_area_struct', 'vm_ops')])}],
 'getcwd': [{'call': 'eventfd2',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'mq_unlink',
             'reason': set([('dentry', 'd_parent'),
                            ('vfsmount', 'mnt_root')])},
            {'call': 'swapoff',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'pivot_root',
             'reason': set([('dentry', 'd_parent'),
                            ('path', 'dentry'),
                            ('path', 'mnt'),
                            ('vfsmount', 'mnt_root')])},
            {'call': 'memfd_create',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'remap_file_pages',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'dup3',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'unshare',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'umount', 'reason': set([('vfsmount', 'mnt_root')])},
            {'call': 'mkdirat', 'reason': set([('dentry', 'd_parent')])},
            {'call': 'epoll_create1',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'epoll_ctl',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'flock',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'openat',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'lookup_dcookie',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'uselib',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'renameat2', 'reason': set([('dentry', 'd_parent')])},
            {'call': 'accept4',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'socketpair',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'ftruncate', 'reason': set([('dentry', 'd_parent')])},
            {'call': 'shmat',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'mknodat', 'reason': set([('dentry', 'd_parent')])},
            {'call': 'socket',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'symlinkat', 'reason': set([('dentry', 'd_parent')])},
            {'call': 'pipe2',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'perf_event_open',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'linkat', 'reason': set([('dentry', 'd_parent')])},
            {'call': 'shmdt',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'quotactl',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'acct',
             'reason': set([('path', 'dentry'),
                            ('path', 'mnt'),
                            ('vfsmount', 'mnt_root')])},
            {'call': 'open',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'unlink', 'reason': set([('dentry', 'd_parent')])},
            {'call': 'rmdir', 'reason': set([('dentry', 'd_parent')])},
            {'call': 'dup',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'setns',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'shmctl',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'swapon',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'mmap_pgoff',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'mq_open',
             'reason': set([('dentry', 'd_parent'),
                            ('path', 'dentry'),
                            ('path', 'mnt'),
                            ('vfsmount', 'mnt_root')])},
            {'call': 'unlinkat', 'reason': set([('dentry', 'd_parent')])},
            {'call': 'open_by_handle_at',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])}],
 'getdents': [{'call': 'syncfs', 'reason': set([('fd', 'flags')])},
              {'call': 'keyctl', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'rt_sigtimedwait',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'vmsplice', 'reason': set([('fd', 'flags')])},
              {'call': 'msgrcv', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'pwritev64', 'reason': set([('fd', 'flags')])},
              {'call': 'kill', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'fremovexattr', 'reason': set([('fd', 'flags')])},
              {'call': 'readahead', 'reason': set([('fd', 'flags')])},
              {'call': 'sched_getaffinity',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'writev', 'reason': set([('fd', 'flags')])},
              {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
              {'call': 'sched_setparam',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'fchmod', 'reason': set([('fd', 'flags')])},
              {'call': 'pread64', 'reason': set([('fd', 'flags')])},
              {'call': 'signalfd4', 'reason': set([('fd', 'flags')])},
              {'call': 'ioprio_set',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'read', 'reason': set([('fd', 'flags')])},
              {'call': 'getppid', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'fchown', 'reason': set([('fd', 'flags')])},
              {'call': 'ioperm', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'mq_timedreceive',
               'reason': set([('fd', 'flags'), ('mm_segment_t', 'seg')])},
              {'call': 'capget', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'utime', 'reason': set([('fd', 'flags')])},
              {'call': 'sched_setaffinity',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'fsync', 'reason': set([('fd', 'flags')])},
              {'call': 'bpf', 'reason': set([('fd', 'flags')])},
              {'call': 'signal', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'semtimedop',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'umount', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
              {'call': 'fsetxattr', 'reason': set([('fd', 'flags')])},
              {'call': 'sendto', 'reason': set([('fd', 'flags')])},
              {'call': 'sched_rr_get_interval',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'tee', 'reason': set([('fd', 'flags')])},
              {'call': 'sync_file_range', 'reason': set([('fd', 'flags')])},
              {'call': 'lseek', 'reason': set([('fd', 'flags')])},
              {'call': 'connect', 'reason': set([('fd', 'flags')])},
              {'call': 'getsockname', 'reason': set([('fd', 'flags')])},
              {'call': 'epoll_ctl', 'reason': set([('fd', 'flags')])},
              {'call': 'flock', 'reason': set([('fd', 'flags')])},
              {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
              {'call': 'fchdir', 'reason': set([('fd', 'flags')])},
              {'call': 'rt_sigprocmask',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'accept4', 'reason': set([('fd', 'flags')])},
              {'call': 'setsid', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'sigaltstack',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'sched_setattr',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'old_readdir', 'reason': set([('fd', 'flags')])},
              {'call': 'inotify_rm_watch', 'reason': set([('fd', 'flags')])},
              {'call': 'utimensat', 'reason': set([('fd', 'flags')])},
              {'call': 'migrate_pages',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'getitimer', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'setpgid', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'inotify_add_watch', 'reason': set([('fd', 'flags')])},
              {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
              {'call': 'splice', 'reason': set([('fd', 'flags')])},
              {'call': 'ftruncate', 'reason': set([('fd', 'flags')])},
              {'call': 'preadv', 'reason': set([('fd', 'flags')])},
              {'call': 'getpeername', 'reason': set([('fd', 'flags')])},
              {'call': 'getsid', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'setsockopt', 'reason': set([('fd', 'flags')])},
              {'call': 'fcntl', 'reason': set([('fd', 'flags')])},
              {'call': 'ioctl', 'reason': set([('fd', 'flags')])},
              {'call': 'prlimit64', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'pwrite64', 'reason': set([('fd', 'flags')])},
              {'call': 'perf_event_open',
               'reason': set([('fd', 'flags'), ('mm_segment_t', 'seg')])},
              {'call': 'pwritev64v2', 'reason': set([('fd', 'flags')])},
              {'call': 'rt_sigaction',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'futimesat', 'reason': set([('fd', 'flags')])},
              {'call': 'getpgid', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
              {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
              {'call': 'getsockopt', 'reason': set([('fd', 'flags')])},
              {'call': 'getpriority',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'sigaction', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'mq_getsetattr', 'reason': set([('fd', 'flags')])},
              {'call': 'fdatasync', 'reason': set([('fd', 'flags')])},
              {'call': 'setns', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'getdents64', 'reason': set([('fd', 'flags')])},
              {'call': 'listen', 'reason': set([('fd', 'flags')])},
              {'call': 'fork', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'get_robust_list',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'copy_file_range', 'reason': set([('fd', 'flags')])},
              {'call': 'mq_timedsend',
               'reason': set([('fd', 'flags'), ('mm_segment_t', 'seg')])},
              {'call': 'sched_getscheduler',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'fgetxattr', 'reason': set([('fd', 'flags')])},
              {'call': 'ptrace', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'fcntl64', 'reason': set([('fd', 'flags')])},
              {'call': 'fallocate', 'reason': set([('fd', 'flags')])},
              {'call': 'epoll_wait', 'reason': set([('fd', 'flags')])},
              {'call': 'sched_getattr',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'getrusage', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'sched_setscheduler',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'setitimer', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'ioprio_get',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'vfork', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'llseek', 'reason': set([('fd', 'flags')])},
              {'call': 'preadv64v2', 'reason': set([('fd', 'flags')])},
              {'call': 'readv', 'reason': set([('fd', 'flags')])},
              {'call': 'prctl', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'move_pages',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
              {'call': 'fstatfs64', 'reason': set([('fd', 'flags')])},
              {'call': 'write', 'reason': set([('fd', 'flags')])},
              {'call': 'setpriority',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'mq_notify', 'reason': set([('fd', 'flags')])},
              {'call': 'sendfile', 'reason': set([('fd', 'flags')])},
              {'call': 'clone', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'sched_getparam',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'bind', 'reason': set([('fd', 'flags')])},
              {'call': 'flistxattr', 'reason': set([('fd', 'flags')])},
              {'call': 'sendfile64', 'reason': set([('fd', 'flags')])}],
 'getdents64': [{'call': 'syncfs', 'reason': set([('fd', 'flags')])},
                {'call': 'keyctl', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'rt_sigtimedwait',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'vmsplice', 'reason': set([('fd', 'flags')])},
                {'call': 'msgrcv', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'pwritev64', 'reason': set([('fd', 'flags')])},
                {'call': 'kill', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'fremovexattr', 'reason': set([('fd', 'flags')])},
                {'call': 'readahead', 'reason': set([('fd', 'flags')])},
                {'call': 'getdents', 'reason': set([('fd', 'flags')])},
                {'call': 'sched_getaffinity',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'writev', 'reason': set([('fd', 'flags')])},
                {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
                {'call': 'sched_setparam',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'fchmod', 'reason': set([('fd', 'flags')])},
                {'call': 'pread64', 'reason': set([('fd', 'flags')])},
                {'call': 'signalfd4', 'reason': set([('fd', 'flags')])},
                {'call': 'ioprio_set',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'read', 'reason': set([('fd', 'flags')])},
                {'call': 'getppid', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'fchown', 'reason': set([('fd', 'flags')])},
                {'call': 'ioperm', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'mq_timedreceive',
                 'reason': set([('fd', 'flags'), ('mm_segment_t', 'seg')])},
                {'call': 'capget', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'utime', 'reason': set([('fd', 'flags')])},
                {'call': 'sched_setaffinity',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'fsync', 'reason': set([('fd', 'flags')])},
                {'call': 'bpf', 'reason': set([('fd', 'flags')])},
                {'call': 'signal', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'semtimedop',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'umount', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
                {'call': 'fsetxattr', 'reason': set([('fd', 'flags')])},
                {'call': 'sendto', 'reason': set([('fd', 'flags')])},
                {'call': 'sched_rr_get_interval',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'tee', 'reason': set([('fd', 'flags')])},
                {'call': 'sync_file_range', 'reason': set([('fd', 'flags')])},
                {'call': 'lseek', 'reason': set([('fd', 'flags')])},
                {'call': 'connect', 'reason': set([('fd', 'flags')])},
                {'call': 'getsockname', 'reason': set([('fd', 'flags')])},
                {'call': 'epoll_ctl', 'reason': set([('fd', 'flags')])},
                {'call': 'flock', 'reason': set([('fd', 'flags')])},
                {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
                {'call': 'fchdir', 'reason': set([('fd', 'flags')])},
                {'call': 'rt_sigprocmask',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'accept4', 'reason': set([('fd', 'flags')])},
                {'call': 'setsid', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'sigaltstack',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'sched_setattr',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'old_readdir', 'reason': set([('fd', 'flags')])},
                {'call': 'inotify_rm_watch',
                 'reason': set([('fd', 'flags')])},
                {'call': 'utimensat', 'reason': set([('fd', 'flags')])},
                {'call': 'migrate_pages',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'getitimer',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'setpgid', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'inotify_add_watch',
                 'reason': set([('fd', 'flags')])},
                {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
                {'call': 'splice', 'reason': set([('fd', 'flags')])},
                {'call': 'ftruncate', 'reason': set([('fd', 'flags')])},
                {'call': 'preadv', 'reason': set([('fd', 'flags')])},
                {'call': 'getpeername', 'reason': set([('fd', 'flags')])},
                {'call': 'getsid', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'setsockopt', 'reason': set([('fd', 'flags')])},
                {'call': 'fcntl', 'reason': set([('fd', 'flags')])},
                {'call': 'ioctl', 'reason': set([('fd', 'flags')])},
                {'call': 'prlimit64',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'pwrite64', 'reason': set([('fd', 'flags')])},
                {'call': 'perf_event_open',
                 'reason': set([('fd', 'flags'), ('mm_segment_t', 'seg')])},
                {'call': 'pwritev64v2', 'reason': set([('fd', 'flags')])},
                {'call': 'rt_sigaction',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'futimesat', 'reason': set([('fd', 'flags')])},
                {'call': 'getpgid', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
                {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
                {'call': 'getsockopt', 'reason': set([('fd', 'flags')])},
                {'call': 'getpriority',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'sigaction',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'mq_getsetattr', 'reason': set([('fd', 'flags')])},
                {'call': 'fdatasync', 'reason': set([('fd', 'flags')])},
                {'call': 'setns', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'listen', 'reason': set([('fd', 'flags')])},
                {'call': 'fork', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'get_robust_list',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'copy_file_range', 'reason': set([('fd', 'flags')])},
                {'call': 'mq_timedsend',
                 'reason': set([('fd', 'flags'), ('mm_segment_t', 'seg')])},
                {'call': 'sched_getscheduler',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'fgetxattr', 'reason': set([('fd', 'flags')])},
                {'call': 'ptrace', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'fcntl64', 'reason': set([('fd', 'flags')])},
                {'call': 'fallocate', 'reason': set([('fd', 'flags')])},
                {'call': 'epoll_wait', 'reason': set([('fd', 'flags')])},
                {'call': 'sched_getattr',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'getrusage',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'sched_setscheduler',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'setitimer',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'ioprio_get',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'vfork', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'llseek', 'reason': set([('fd', 'flags')])},
                {'call': 'preadv64v2', 'reason': set([('fd', 'flags')])},
                {'call': 'readv', 'reason': set([('fd', 'flags')])},
                {'call': 'prctl', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'move_pages',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
                {'call': 'fstatfs64', 'reason': set([('fd', 'flags')])},
                {'call': 'write', 'reason': set([('fd', 'flags')])},
                {'call': 'setpriority',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'mq_notify', 'reason': set([('fd', 'flags')])},
                {'call': 'sendfile', 'reason': set([('fd', 'flags')])},
                {'call': 'clone', 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'sched_getparam',
                 'reason': set([('mm_segment_t', 'seg')])},
                {'call': 'bind', 'reason': set([('fd', 'flags')])},
                {'call': 'flistxattr', 'reason': set([('fd', 'flags')])},
                {'call': 'sendfile64', 'reason': set([('fd', 'flags')])}],
 'getegid': [{'call': 'keyctl', 'reason': set([('task_struct', 'cred')])},
             {'call': 'rt_sigtimedwait',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'msgrcv', 'reason': set([('task_struct', 'cred')])},
             {'call': 'kill', 'reason': set([('task_struct', 'cred')])},
             {'call': 'sched_getaffinity',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'sched_setparam',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'ioprio_set', 'reason': set([('task_struct', 'cred')])},
             {'call': 'getppid', 'reason': set([('task_struct', 'cred')])},
             {'call': 'mq_timedreceive',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'capget', 'reason': set([('task_struct', 'cred')])},
             {'call': 'sched_setaffinity',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'signal', 'reason': set([('task_struct', 'cred')])},
             {'call': 'semtimedop', 'reason': set([('task_struct', 'cred')])},
             {'call': 'umount', 'reason': set([('task_struct', 'cred')])},
             {'call': 'sched_rr_get_interval',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'rt_sigprocmask',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'setsid', 'reason': set([('task_struct', 'cred')])},
             {'call': 'sigaltstack',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'sched_setattr',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'migrate_pages',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'getitimer', 'reason': set([('task_struct', 'cred')])},
             {'call': 'setpgid', 'reason': set([('task_struct', 'cred')])},
             {'call': 'getsid', 'reason': set([('task_struct', 'cred')])},
             {'call': 'prlimit64', 'reason': set([('task_struct', 'cred')])},
             {'call': 'perf_event_open',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'rt_sigaction',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'getpgid', 'reason': set([('task_struct', 'cred')])},
             {'call': 'getpriority',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'sigaction', 'reason': set([('task_struct', 'cred')])},
             {'call': 'setns', 'reason': set([('task_struct', 'cred')])},
             {'call': 'fork', 'reason': set([('task_struct', 'cred')])},
             {'call': 'get_robust_list',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'mq_timedsend',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'sched_getscheduler',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'ptrace', 'reason': set([('task_struct', 'cred')])},
             {'call': 'sched_getattr',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'getrusage', 'reason': set([('task_struct', 'cred')])},
             {'call': 'sched_setscheduler',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'setitimer', 'reason': set([('task_struct', 'cred')])},
             {'call': 'ioprio_get', 'reason': set([('task_struct', 'cred')])},
             {'call': 'vfork', 'reason': set([('task_struct', 'cred')])},
             {'call': 'prctl', 'reason': set([('task_struct', 'cred')])},
             {'call': 'move_pages', 'reason': set([('task_struct', 'cred')])},
             {'call': 'setpriority',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'clone', 'reason': set([('task_struct', 'cred')])},
             {'call': 'sched_getparam',
              'reason': set([('task_struct', 'cred')])}],
 'getegid16': [{'call': 'keyctl', 'reason': set([('task_struct', 'cred')])},
               {'call': 'rt_sigtimedwait',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'msgrcv', 'reason': set([('task_struct', 'cred')])},
               {'call': 'kill', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_getaffinity',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_setparam',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'ioprio_set',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'getppid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'mq_timedreceive',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'capget', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_setaffinity',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'signal', 'reason': set([('task_struct', 'cred')])},
               {'call': 'semtimedop',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'umount', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_rr_get_interval',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'rt_sigprocmask',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setsid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sigaltstack',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_setattr',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'migrate_pages',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'getitimer',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setpgid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'getsid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'prlimit64',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'perf_event_open',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'rt_sigaction',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'getpgid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'getpriority',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sigaction',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setns', 'reason': set([('task_struct', 'cred')])},
               {'call': 'fork', 'reason': set([('task_struct', 'cred')])},
               {'call': 'get_robust_list',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'mq_timedsend',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_getscheduler',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'ptrace', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_getattr',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'getrusage',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_setscheduler',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setitimer',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'ioprio_get',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'vfork', 'reason': set([('task_struct', 'cred')])},
               {'call': 'prctl', 'reason': set([('task_struct', 'cred')])},
               {'call': 'move_pages',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setpriority',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'clone', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_getparam',
                'reason': set([('task_struct', 'cred')])}],
 'geteuid': [{'call': 'keyctl', 'reason': set([('task_struct', 'cred')])},
             {'call': 'rt_sigtimedwait',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'msgrcv', 'reason': set([('task_struct', 'cred')])},
             {'call': 'kill', 'reason': set([('task_struct', 'cred')])},
             {'call': 'sched_getaffinity',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'sched_setparam',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'ioprio_set', 'reason': set([('task_struct', 'cred')])},
             {'call': 'getppid', 'reason': set([('task_struct', 'cred')])},
             {'call': 'mq_timedreceive',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'capget', 'reason': set([('task_struct', 'cred')])},
             {'call': 'sched_setaffinity',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'signal', 'reason': set([('task_struct', 'cred')])},
             {'call': 'semtimedop', 'reason': set([('task_struct', 'cred')])},
             {'call': 'umount', 'reason': set([('task_struct', 'cred')])},
             {'call': 'sched_rr_get_interval',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'rt_sigprocmask',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'setsid', 'reason': set([('task_struct', 'cred')])},
             {'call': 'sigaltstack',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'sched_setattr',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'migrate_pages',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'getitimer', 'reason': set([('task_struct', 'cred')])},
             {'call': 'setpgid', 'reason': set([('task_struct', 'cred')])},
             {'call': 'getsid', 'reason': set([('task_struct', 'cred')])},
             {'call': 'prlimit64', 'reason': set([('task_struct', 'cred')])},
             {'call': 'perf_event_open',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'rt_sigaction',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'getpgid', 'reason': set([('task_struct', 'cred')])},
             {'call': 'getpriority',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'sigaction', 'reason': set([('task_struct', 'cred')])},
             {'call': 'setns', 'reason': set([('task_struct', 'cred')])},
             {'call': 'fork', 'reason': set([('task_struct', 'cred')])},
             {'call': 'get_robust_list',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'mq_timedsend',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'sched_getscheduler',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'ptrace', 'reason': set([('task_struct', 'cred')])},
             {'call': 'sched_getattr',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'getrusage', 'reason': set([('task_struct', 'cred')])},
             {'call': 'sched_setscheduler',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'setitimer', 'reason': set([('task_struct', 'cred')])},
             {'call': 'ioprio_get', 'reason': set([('task_struct', 'cred')])},
             {'call': 'vfork', 'reason': set([('task_struct', 'cred')])},
             {'call': 'prctl', 'reason': set([('task_struct', 'cred')])},
             {'call': 'move_pages', 'reason': set([('task_struct', 'cred')])},
             {'call': 'setpriority',
              'reason': set([('task_struct', 'cred')])},
             {'call': 'clone', 'reason': set([('task_struct', 'cred')])},
             {'call': 'sched_getparam',
              'reason': set([('task_struct', 'cred')])}],
 'geteuid16': [{'call': 'keyctl', 'reason': set([('task_struct', 'cred')])},
               {'call': 'rt_sigtimedwait',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'msgrcv', 'reason': set([('task_struct', 'cred')])},
               {'call': 'kill', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_getaffinity',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_setparam',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'ioprio_set',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'getppid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'mq_timedreceive',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'capget', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_setaffinity',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'signal', 'reason': set([('task_struct', 'cred')])},
               {'call': 'semtimedop',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'umount', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_rr_get_interval',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'rt_sigprocmask',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setsid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sigaltstack',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_setattr',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'migrate_pages',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'getitimer',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setpgid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'getsid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'prlimit64',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'perf_event_open',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'rt_sigaction',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'getpgid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'getpriority',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sigaction',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setns', 'reason': set([('task_struct', 'cred')])},
               {'call': 'fork', 'reason': set([('task_struct', 'cred')])},
               {'call': 'get_robust_list',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'mq_timedsend',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_getscheduler',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'ptrace', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_getattr',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'getrusage',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_setscheduler',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setitimer',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'ioprio_get',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'vfork', 'reason': set([('task_struct', 'cred')])},
               {'call': 'prctl', 'reason': set([('task_struct', 'cred')])},
               {'call': 'move_pages',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setpriority',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'clone', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_getparam',
                'reason': set([('task_struct', 'cred')])}],
 'getgid': [{'call': 'keyctl', 'reason': set([('task_struct', 'cred')])},
            {'call': 'rt_sigtimedwait',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'msgrcv', 'reason': set([('task_struct', 'cred')])},
            {'call': 'kill', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_getaffinity',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_setparam',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'ioprio_set', 'reason': set([('task_struct', 'cred')])},
            {'call': 'getppid', 'reason': set([('task_struct', 'cred')])},
            {'call': 'mq_timedreceive',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'capget', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_setaffinity',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'signal', 'reason': set([('task_struct', 'cred')])},
            {'call': 'semtimedop', 'reason': set([('task_struct', 'cred')])},
            {'call': 'umount', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_rr_get_interval',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'rt_sigprocmask',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'setsid', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sigaltstack', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_setattr',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'migrate_pages',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'getitimer', 'reason': set([('task_struct', 'cred')])},
            {'call': 'setpgid', 'reason': set([('task_struct', 'cred')])},
            {'call': 'getsid', 'reason': set([('task_struct', 'cred')])},
            {'call': 'prlimit64', 'reason': set([('task_struct', 'cred')])},
            {'call': 'perf_event_open',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'rt_sigaction',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'getpgid', 'reason': set([('task_struct', 'cred')])},
            {'call': 'getpriority', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sigaction', 'reason': set([('task_struct', 'cred')])},
            {'call': 'setns', 'reason': set([('task_struct', 'cred')])},
            {'call': 'fork', 'reason': set([('task_struct', 'cred')])},
            {'call': 'get_robust_list',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'mq_timedsend',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_getscheduler',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'ptrace', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_getattr',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'getrusage', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_setscheduler',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'setitimer', 'reason': set([('task_struct', 'cred')])},
            {'call': 'ioprio_get', 'reason': set([('task_struct', 'cred')])},
            {'call': 'vfork', 'reason': set([('task_struct', 'cred')])},
            {'call': 'prctl', 'reason': set([('task_struct', 'cred')])},
            {'call': 'move_pages', 'reason': set([('task_struct', 'cred')])},
            {'call': 'setpriority', 'reason': set([('task_struct', 'cred')])},
            {'call': 'clone', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_getparam',
             'reason': set([('task_struct', 'cred')])}],
 'getgid16': [{'call': 'keyctl', 'reason': set([('task_struct', 'cred')])},
              {'call': 'rt_sigtimedwait',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'msgrcv', 'reason': set([('task_struct', 'cred')])},
              {'call': 'kill', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_getaffinity',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_setparam',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'ioprio_set',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'getppid', 'reason': set([('task_struct', 'cred')])},
              {'call': 'mq_timedreceive',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'capget', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_setaffinity',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'signal', 'reason': set([('task_struct', 'cred')])},
              {'call': 'semtimedop',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'umount', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_rr_get_interval',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'rt_sigprocmask',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'setsid', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sigaltstack',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_setattr',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'migrate_pages',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'getitimer', 'reason': set([('task_struct', 'cred')])},
              {'call': 'setpgid', 'reason': set([('task_struct', 'cred')])},
              {'call': 'getsid', 'reason': set([('task_struct', 'cred')])},
              {'call': 'prlimit64', 'reason': set([('task_struct', 'cred')])},
              {'call': 'perf_event_open',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'rt_sigaction',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'getpgid', 'reason': set([('task_struct', 'cred')])},
              {'call': 'getpriority',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'sigaction', 'reason': set([('task_struct', 'cred')])},
              {'call': 'setns', 'reason': set([('task_struct', 'cred')])},
              {'call': 'fork', 'reason': set([('task_struct', 'cred')])},
              {'call': 'get_robust_list',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'mq_timedsend',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_getscheduler',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'ptrace', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_getattr',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'getrusage', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_setscheduler',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'setitimer', 'reason': set([('task_struct', 'cred')])},
              {'call': 'ioprio_get',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'vfork', 'reason': set([('task_struct', 'cred')])},
              {'call': 'prctl', 'reason': set([('task_struct', 'cred')])},
              {'call': 'move_pages',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'setpriority',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'clone', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_getparam',
               'reason': set([('task_struct', 'cred')])}],
 'getgroups': [{'call': 'keyctl',
                'reason': set([('cred', 'group_info'),
                               ('task_struct', 'cred')])},
               {'call': 'rt_sigtimedwait',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setfsuid', 'reason': set([('cred', 'group_info')])},
               {'call': 'msgrcv', 'reason': set([('task_struct', 'cred')])},
               {'call': 'kill', 'reason': set([('task_struct', 'cred')])},
               {'call': 'getresuid16',
                'reason': set([('cred', 'group_info')])},
               {'call': 'getresgid', 'reason': set([('cred', 'group_info')])},
               {'call': 'sched_getaffinity',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_setparam',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setgid', 'reason': set([('cred', 'group_info')])},
               {'call': 'ioprio_set',
                'reason': set([('cred', 'group_info'),
                               ('task_struct', 'cred')])},
               {'call': 'capset', 'reason': set([('cred', 'group_info')])},
               {'call': 'getppid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'mq_timedreceive',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'getresgid16',
                'reason': set([('cred', 'group_info')])},
               {'call': 'capget', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_setaffinity',
                'reason': set([('cred', 'group_info'),
                               ('task_struct', 'cred')])},
               {'call': 'setfsgid', 'reason': set([('cred', 'group_info')])},
               {'call': 'unshare', 'reason': set([('cred', 'group_info')])},
               {'call': 'signal', 'reason': set([('task_struct', 'cred')])},
               {'call': 'setreuid', 'reason': set([('cred', 'group_info')])},
               {'call': 'semtimedop',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'umount', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_rr_get_interval',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'epoll_create1',
                'reason': set([('cred', 'group_info')])},
               {'call': 'getresuid', 'reason': set([('cred', 'group_info')])},
               {'call': 'rt_sigprocmask',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setsid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sigaltstack',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_setattr',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'migrate_pages',
                'reason': set([('cred', 'group_info'),
                               ('task_struct', 'cred')])},
               {'call': 'getitimer',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setpgid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'setresgid', 'reason': set([('cred', 'group_info')])},
               {'call': 'setregid', 'reason': set([('cred', 'group_info')])},
               {'call': 'getsid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'prlimit64',
                'reason': set([('cred', 'group_info'),
                               ('task_struct', 'cred')])},
               {'call': 'perf_event_open',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'getgroups16',
                'reason': set([('cred', 'group_info')])},
               {'call': 'rt_sigaction',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'getpgid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'getpriority',
                'reason': set([('cred', 'group_info'),
                               ('task_struct', 'cred')])},
               {'call': 'sigaction',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'faccessat', 'reason': set([('cred', 'group_info')])},
               {'call': 'setns', 'reason': set([('task_struct', 'cred')])},
               {'call': 'fork', 'reason': set([('task_struct', 'cred')])},
               {'call': 'get_robust_list',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'mq_timedsend',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_getscheduler',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'ptrace', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_getattr',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'getrusage',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_setscheduler',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setresuid', 'reason': set([('cred', 'group_info')])},
               {'call': 'setitimer',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'ioprio_get',
                'reason': set([('cred', 'group_info'),
                               ('task_struct', 'cred')])},
               {'call': 'vfork', 'reason': set([('task_struct', 'cred')])},
               {'call': 'setuid', 'reason': set([('cred', 'group_info')])},
               {'call': 'prctl', 'reason': set([('task_struct', 'cred')])},
               {'call': 'move_pages',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setpriority',
                'reason': set([('cred', 'group_info'),
                               ('task_struct', 'cred')])},
               {'call': 'clone', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_getparam',
                'reason': set([('task_struct', 'cred')])}],
 'getgroups16': [{'call': 'keyctl',
                  'reason': set([('cred', 'group_info'),
                                 ('task_struct', 'cred')])},
                 {'call': 'rt_sigtimedwait',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'setfsuid',
                  'reason': set([('cred', 'group_info')])},
                 {'call': 'msgrcv', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'kill', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'getresuid16',
                  'reason': set([('cred', 'group_info')])},
                 {'call': 'getresgid',
                  'reason': set([('cred', 'group_info')])},
                 {'call': 'sched_getaffinity',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'sched_setparam',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'setgid', 'reason': set([('cred', 'group_info')])},
                 {'call': 'ioprio_set',
                  'reason': set([('cred', 'group_info'),
                                 ('task_struct', 'cred')])},
                 {'call': 'capset', 'reason': set([('cred', 'group_info')])},
                 {'call': 'getppid',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'mq_timedreceive',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'getresgid16',
                  'reason': set([('cred', 'group_info')])},
                 {'call': 'capget', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'sched_setaffinity',
                  'reason': set([('cred', 'group_info'),
                                 ('task_struct', 'cred')])},
                 {'call': 'setfsgid',
                  'reason': set([('cred', 'group_info')])},
                 {'call': 'unshare', 'reason': set([('cred', 'group_info')])},
                 {'call': 'signal', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'setreuid',
                  'reason': set([('cred', 'group_info')])},
                 {'call': 'semtimedop',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'umount', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'sched_rr_get_interval',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'epoll_create1',
                  'reason': set([('cred', 'group_info')])},
                 {'call': 'getresuid',
                  'reason': set([('cred', 'group_info')])},
                 {'call': 'rt_sigprocmask',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'setsid', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'sigaltstack',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'sched_setattr',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'migrate_pages',
                  'reason': set([('cred', 'group_info'),
                                 ('task_struct', 'cred')])},
                 {'call': 'getitimer',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'setpgid',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'setresgid',
                  'reason': set([('cred', 'group_info')])},
                 {'call': 'setregid',
                  'reason': set([('cred', 'group_info')])},
                 {'call': 'getsid', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'prlimit64',
                  'reason': set([('cred', 'group_info'),
                                 ('task_struct', 'cred')])},
                 {'call': 'perf_event_open',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'rt_sigaction',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'getpgid',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'getpriority',
                  'reason': set([('cred', 'group_info'),
                                 ('task_struct', 'cred')])},
                 {'call': 'sigaction',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'faccessat',
                  'reason': set([('cred', 'group_info')])},
                 {'call': 'setgroups16',
                  'reason': set([('group_info', 'ngroups')])},
                 {'call': 'setns', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'fork', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'get_robust_list',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'mq_timedsend',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'sched_getscheduler',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'ptrace', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'sched_getattr',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'getrusage',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'sched_setscheduler',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'setresuid',
                  'reason': set([('cred', 'group_info')])},
                 {'call': 'setitimer',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'ioprio_get',
                  'reason': set([('cred', 'group_info'),
                                 ('task_struct', 'cred')])},
                 {'call': 'vfork', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'setuid', 'reason': set([('cred', 'group_info')])},
                 {'call': 'prctl', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'move_pages',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'getgroups',
                  'reason': set([('cred', 'group_info')])},
                 {'call': 'setpriority',
                  'reason': set([('cred', 'group_info'),
                                 ('task_struct', 'cred')])},
                 {'call': 'clone', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'setgroups',
                  'reason': set([('group_info', 'ngroups')])},
                 {'call': 'sched_getparam',
                  'reason': set([('task_struct', 'cred')])}],
 'getitimer': [{'call': 'timer_create',
                'reason': set([('signal_struct', 'it_real_incr')])},
               {'call': 'exit_group',
                'reason': set([('signal_struct', 'it_real_incr')])},
               {'call': 'setitimer',
                'reason': set([('signal_struct', 'it_real_incr')])}],
 'getppid': [{'call': 'keyctl',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'rt_sigtimedwait',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'msgrcv',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'kill',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'sched_getaffinity',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'sched_setparam',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'ioprio_set',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'mq_timedreceive',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'capget',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'sched_setaffinity',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'signal',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'semtimedop',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'umount',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'sched_rr_get_interval',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'rt_sigprocmask',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'setsid',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'sigaltstack',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'sched_setattr',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'migrate_pages',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'getitimer',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'setpgid',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'getsid',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'prlimit64',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'perf_event_open',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'rt_sigaction',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'getpgid',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'getpriority',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'sigaction',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'setns',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'fork',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'get_robust_list',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'mq_timedsend',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'sched_getscheduler',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'ptrace',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'sched_getattr',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'getrusage',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'sched_setscheduler',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'setitimer',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'ioprio_get',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'vfork',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'prctl',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'move_pages',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'setpriority',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'clone',
              'reason': set([('task_struct', 'real_parent')])},
             {'call': 'sched_getparam',
              'reason': set([('task_struct', 'real_parent')])}],
 'getpriority': [{'call': 'keyctl',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'rt_sigtimedwait',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'msgrcv',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'kill',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'sched_getaffinity',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'sched_setparam',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'ioprio_set',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'getppid',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'mq_timedreceive',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'capget',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'sched_setaffinity',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'signal',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'setreuid', 'reason': set([('cred', 'uid')])},
                 {'call': 'semtimedop',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'umount',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'sched_rr_get_interval',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'rt_sigprocmask',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'setsid',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'sigaltstack',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'sched_setattr',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'migrate_pages',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'getitimer',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'setpgid',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'getsid',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'prlimit64',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'perf_event_open',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'rt_sigaction',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'getpgid',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'sigaction',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'setns',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'fork',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'get_robust_list',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'mq_timedsend',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'sched_getscheduler',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'ptrace',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'sched_getattr',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'getrusage',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'sched_setscheduler',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'setresuid', 'reason': set([('cred', 'uid')])},
                 {'call': 'setitimer',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'ioprio_get',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'vfork',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'setuid', 'reason': set([('cred', 'uid')])},
                 {'call': 'prctl',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'move_pages',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'setpriority',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'clone',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'sched_getparam',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])}],
 'getresgid': [{'call': 'keyctl', 'reason': set([('task_struct', 'cred')])},
               {'call': 'rt_sigtimedwait',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'msgrcv', 'reason': set([('task_struct', 'cred')])},
               {'call': 'kill', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_getaffinity',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_setparam',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'ioprio_set',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'getppid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'mq_timedreceive',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'capget', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_setaffinity',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'signal', 'reason': set([('task_struct', 'cred')])},
               {'call': 'semtimedop',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'umount', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_rr_get_interval',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'rt_sigprocmask',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setsid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sigaltstack',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_setattr',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'migrate_pages',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'getitimer',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setpgid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'getsid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'prlimit64',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'perf_event_open',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'rt_sigaction',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'getpgid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'getpriority',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sigaction',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setns', 'reason': set([('task_struct', 'cred')])},
               {'call': 'fork', 'reason': set([('task_struct', 'cred')])},
               {'call': 'get_robust_list',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'mq_timedsend',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_getscheduler',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'ptrace', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_getattr',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'getrusage',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_setscheduler',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setitimer',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'ioprio_get',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'vfork', 'reason': set([('task_struct', 'cred')])},
               {'call': 'prctl', 'reason': set([('task_struct', 'cred')])},
               {'call': 'move_pages',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setpriority',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'clone', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_getparam',
                'reason': set([('task_struct', 'cred')])}],
 'getresgid16': [{'call': 'keyctl', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'rt_sigtimedwait',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'msgrcv', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'kill', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'sched_getaffinity',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'sched_setparam',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'ioprio_set',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'getppid',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'mq_timedreceive',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'capget', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'sched_setaffinity',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'signal', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'semtimedop',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'umount', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'sched_rr_get_interval',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'rt_sigprocmask',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'setsid', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'sigaltstack',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'sched_setattr',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'migrate_pages',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'getitimer',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'setpgid',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'getsid', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'prlimit64',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'perf_event_open',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'rt_sigaction',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'getpgid',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'getpriority',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'sigaction',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'setns', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'fork', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'get_robust_list',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'mq_timedsend',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'sched_getscheduler',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'ptrace', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'sched_getattr',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'getrusage',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'sched_setscheduler',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'setitimer',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'ioprio_get',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'vfork', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'prctl', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'move_pages',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'setpriority',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'clone', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'sched_getparam',
                  'reason': set([('task_struct', 'cred')])}],
 'getresuid': [{'call': 'keyctl', 'reason': set([('task_struct', 'cred')])},
               {'call': 'rt_sigtimedwait',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'msgrcv', 'reason': set([('task_struct', 'cred')])},
               {'call': 'kill', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_getaffinity',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_setparam',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'ioprio_set',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'getppid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'mq_timedreceive',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'capget', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_setaffinity',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'signal', 'reason': set([('task_struct', 'cred')])},
               {'call': 'semtimedop',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'umount', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_rr_get_interval',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'rt_sigprocmask',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setsid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sigaltstack',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_setattr',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'migrate_pages',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'getitimer',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setpgid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'getsid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'prlimit64',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'perf_event_open',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'rt_sigaction',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'getpgid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'getpriority',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sigaction',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setns', 'reason': set([('task_struct', 'cred')])},
               {'call': 'fork', 'reason': set([('task_struct', 'cred')])},
               {'call': 'get_robust_list',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'mq_timedsend',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_getscheduler',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'ptrace', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_getattr',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'getrusage',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_setscheduler',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setitimer',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'ioprio_get',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'vfork', 'reason': set([('task_struct', 'cred')])},
               {'call': 'prctl', 'reason': set([('task_struct', 'cred')])},
               {'call': 'move_pages',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setpriority',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'clone', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_getparam',
                'reason': set([('task_struct', 'cred')])}],
 'getresuid16': [{'call': 'keyctl', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'rt_sigtimedwait',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'msgrcv', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'kill', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'sched_getaffinity',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'sched_setparam',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'ioprio_set',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'getppid',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'mq_timedreceive',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'capget', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'sched_setaffinity',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'signal', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'semtimedop',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'umount', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'sched_rr_get_interval',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'rt_sigprocmask',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'setsid', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'sigaltstack',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'sched_setattr',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'migrate_pages',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'getitimer',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'setpgid',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'getsid', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'prlimit64',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'perf_event_open',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'rt_sigaction',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'getpgid',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'getpriority',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'sigaction',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'setns', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'fork', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'get_robust_list',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'mq_timedsend',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'sched_getscheduler',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'ptrace', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'sched_getattr',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'getrusage',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'sched_setscheduler',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'setitimer',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'ioprio_get',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'vfork', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'prctl', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'move_pages',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'setpriority',
                  'reason': set([('task_struct', 'cred')])},
                 {'call': 'clone', 'reason': set([('task_struct', 'cred')])},
                 {'call': 'sched_getparam',
                  'reason': set([('task_struct', 'cred')])}],
 'getrlimit': [{'call': 'setrlimit',
                'reason': set([('rlimit', 'rlim_cur'),
                               ('rlimit', 'rlim_max')])},
               {'call': 'old_getrlimit',
                'reason': set([('rlimit', 'rlim_cur'),
                               ('rlimit', 'rlim_max')])},
               {'call': 'prlimit64',
                'reason': set([('rlimit', 'rlim_cur'),
                               ('rlimit', 'rlim_max')])}],
 'getrusage': [{'call': 'timer_create',
                'reason': set([('signal_struct', 'maxrss')])},
               {'call': 'exit_group',
                'reason': set([('signal_struct', 'maxrss')])}],
 'getsockopt': [{'call': 'accept4',
                 'reason': set([('proto_ops', 'compat_getsockopt')])}],
 'getuid': [{'call': 'keyctl', 'reason': set([('task_struct', 'cred')])},
            {'call': 'rt_sigtimedwait',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'msgrcv', 'reason': set([('task_struct', 'cred')])},
            {'call': 'kill', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_getaffinity',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_setparam',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'ioprio_set', 'reason': set([('task_struct', 'cred')])},
            {'call': 'getppid', 'reason': set([('task_struct', 'cred')])},
            {'call': 'mq_timedreceive',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'capget', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_setaffinity',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'signal', 'reason': set([('task_struct', 'cred')])},
            {'call': 'semtimedop', 'reason': set([('task_struct', 'cred')])},
            {'call': 'umount', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_rr_get_interval',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'rt_sigprocmask',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'setsid', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sigaltstack', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_setattr',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'migrate_pages',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'getitimer', 'reason': set([('task_struct', 'cred')])},
            {'call': 'setpgid', 'reason': set([('task_struct', 'cred')])},
            {'call': 'getsid', 'reason': set([('task_struct', 'cred')])},
            {'call': 'prlimit64', 'reason': set([('task_struct', 'cred')])},
            {'call': 'perf_event_open',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'rt_sigaction',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'getpgid', 'reason': set([('task_struct', 'cred')])},
            {'call': 'getpriority', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sigaction', 'reason': set([('task_struct', 'cred')])},
            {'call': 'setns', 'reason': set([('task_struct', 'cred')])},
            {'call': 'fork', 'reason': set([('task_struct', 'cred')])},
            {'call': 'get_robust_list',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'mq_timedsend',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_getscheduler',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'ptrace', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_getattr',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'getrusage', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_setscheduler',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'setitimer', 'reason': set([('task_struct', 'cred')])},
            {'call': 'ioprio_get', 'reason': set([('task_struct', 'cred')])},
            {'call': 'vfork', 'reason': set([('task_struct', 'cred')])},
            {'call': 'prctl', 'reason': set([('task_struct', 'cred')])},
            {'call': 'move_pages', 'reason': set([('task_struct', 'cred')])},
            {'call': 'setpriority', 'reason': set([('task_struct', 'cred')])},
            {'call': 'clone', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_getparam',
             'reason': set([('task_struct', 'cred')])}],
 'getuid16': [{'call': 'keyctl', 'reason': set([('task_struct', 'cred')])},
              {'call': 'rt_sigtimedwait',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'msgrcv', 'reason': set([('task_struct', 'cred')])},
              {'call': 'kill', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_getaffinity',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_setparam',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'ioprio_set',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'getppid', 'reason': set([('task_struct', 'cred')])},
              {'call': 'mq_timedreceive',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'capget', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_setaffinity',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'signal', 'reason': set([('task_struct', 'cred')])},
              {'call': 'semtimedop',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'umount', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_rr_get_interval',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'rt_sigprocmask',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'setsid', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sigaltstack',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_setattr',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'migrate_pages',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'getitimer', 'reason': set([('task_struct', 'cred')])},
              {'call': 'setpgid', 'reason': set([('task_struct', 'cred')])},
              {'call': 'getsid', 'reason': set([('task_struct', 'cred')])},
              {'call': 'prlimit64', 'reason': set([('task_struct', 'cred')])},
              {'call': 'perf_event_open',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'rt_sigaction',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'getpgid', 'reason': set([('task_struct', 'cred')])},
              {'call': 'getpriority',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'sigaction', 'reason': set([('task_struct', 'cred')])},
              {'call': 'setns', 'reason': set([('task_struct', 'cred')])},
              {'call': 'fork', 'reason': set([('task_struct', 'cred')])},
              {'call': 'get_robust_list',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'mq_timedsend',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_getscheduler',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'ptrace', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_getattr',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'getrusage', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_setscheduler',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'setitimer', 'reason': set([('task_struct', 'cred')])},
              {'call': 'ioprio_get',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'vfork', 'reason': set([('task_struct', 'cred')])},
              {'call': 'prctl', 'reason': set([('task_struct', 'cred')])},
              {'call': 'move_pages',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'setpriority',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'clone', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_getparam',
               'reason': set([('task_struct', 'cred')])}],
 'getxattr': [{'call': 'eventfd2', 'reason': set([('path', 'dentry')])},
              {'call': 'swapoff', 'reason': set([('path', 'dentry')])},
              {'call': 'pivot_root', 'reason': set([('path', 'dentry')])},
              {'call': 'memfd_create', 'reason': set([('path', 'dentry')])},
              {'call': 'remap_file_pages',
               'reason': set([('path', 'dentry')])},
              {'call': 'dup3', 'reason': set([('path', 'dentry')])},
              {'call': 'unshare', 'reason': set([('path', 'dentry')])},
              {'call': 'epoll_create1', 'reason': set([('path', 'dentry')])},
              {'call': 'epoll_ctl', 'reason': set([('path', 'dentry')])},
              {'call': 'flock', 'reason': set([('path', 'dentry')])},
              {'call': 'openat', 'reason': set([('path', 'dentry')])},
              {'call': 'lookup_dcookie', 'reason': set([('path', 'dentry')])},
              {'call': 'uselib', 'reason': set([('path', 'dentry')])},
              {'call': 'accept4', 'reason': set([('path', 'dentry')])},
              {'call': 'socketpair', 'reason': set([('path', 'dentry')])},
              {'call': 'getcwd', 'reason': set([('path', 'dentry')])},
              {'call': 'shmat', 'reason': set([('path', 'dentry')])},
              {'call': 'socket', 'reason': set([('path', 'dentry')])},
              {'call': 'pipe2', 'reason': set([('path', 'dentry')])},
              {'call': 'perf_event_open',
               'reason': set([('path', 'dentry')])},
              {'call': 'shmdt', 'reason': set([('path', 'dentry')])},
              {'call': 'quotactl', 'reason': set([('path', 'dentry')])},
              {'call': 'acct', 'reason': set([('path', 'dentry')])},
              {'call': 'open', 'reason': set([('path', 'dentry')])},
              {'call': 'dup', 'reason': set([('path', 'dentry')])},
              {'call': 'setns', 'reason': set([('path', 'dentry')])},
              {'call': 'shmctl', 'reason': set([('path', 'dentry')])},
              {'call': 'swapon', 'reason': set([('path', 'dentry')])},
              {'call': 'mmap_pgoff', 'reason': set([('path', 'dentry')])},
              {'call': 'mq_open', 'reason': set([('path', 'dentry')])},
              {'call': 'open_by_handle_at',
               'reason': set([('path', 'dentry')])}],
 'init_module': [{'call': 'delete_module',
                  'reason': set([('module', 'args'),
                                 ('module', 'kp'),
                                 ('module', 'num_kp'),
                                 ('module_layout', 'base'),
                                 ('module_layout', 'size')])},
                 {'call': 'finit_module',
                  'reason': set([('load_info', 'debug'),
                                 ('load_info', 'hdr'),
                                 ('load_info', 'len'),
                                 ('load_info', 'num_debug'),
                                 ('module', 'args'),
                                 ('module', 'kp'),
                                 ('module', 'num_kp'),
                                 ('module_layout', 'base'),
                                 ('module_layout', 'size')])}],
 'inotify_add_watch': [{'call': 'syncfs', 'reason': set([('fd', 'flags')])},
                       {'call': 'vmsplice', 'reason': set([('fd', 'flags')])},
                       {'call': 'eventfd2',
                        'reason': set([('file', 'f_op')])},
                       {'call': 'mq_unlink',
                        'reason': set([('dentry', 'd_inode')])},
                       {'call': 'pwritev64',
                        'reason': set([('fd', 'flags')])},
                       {'call': 'swapoff', 'reason': set([('file', 'f_op')])},
                       {'call': 'fremovexattr',
                        'reason': set([('fd', 'flags')])},
                       {'call': 'readahead',
                        'reason': set([('fd', 'flags')])},
                       {'call': 'getdents', 'reason': set([('fd', 'flags')])},
                       {'call': 'writev', 'reason': set([('fd', 'flags')])},
                       {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
                       {'call': 'fchmod', 'reason': set([('fd', 'flags')])},
                       {'call': 'pread64', 'reason': set([('fd', 'flags')])},
                       {'call': 'pivot_root',
                        'reason': set([('dentry', 'd_inode')])},
                       {'call': 'signalfd4',
                        'reason': set([('fd', 'flags')])},
                       {'call': 'memfd_create',
                        'reason': set([('file', 'f_op')])},
                       {'call': 'remap_file_pages',
                        'reason': set([('file', 'f_op')])},
                       {'call': 'dup3', 'reason': set([('file', 'f_op')])},
                       {'call': 'read', 'reason': set([('fd', 'flags')])},
                       {'call': 'fchown', 'reason': set([('fd', 'flags')])},
                       {'call': 'mq_timedreceive',
                        'reason': set([('fd', 'flags')])},
                       {'call': 'utime', 'reason': set([('fd', 'flags')])},
                       {'call': 'fsync', 'reason': set([('fd', 'flags')])},
                       {'call': 'bpf', 'reason': set([('fd', 'flags')])},
                       {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
                       {'call': 'fsetxattr',
                        'reason': set([('fd', 'flags')])},
                       {'call': 'sendto', 'reason': set([('fd', 'flags')])},
                       {'call': 'mkdirat',
                        'reason': set([('dentry', 'd_inode')])},
                       {'call': 'epoll_create1',
                        'reason': set([('file', 'f_op')])},
                       {'call': 'tee', 'reason': set([('fd', 'flags')])},
                       {'call': 'sync_file_range',
                        'reason': set([('fd', 'flags')])},
                       {'call': 'lseek', 'reason': set([('fd', 'flags')])},
                       {'call': 'connect', 'reason': set([('fd', 'flags')])},
                       {'call': 'getsockname',
                        'reason': set([('fd', 'flags')])},
                       {'call': 'epoll_ctl',
                        'reason': set([('fd', 'flags'), ('file', 'f_op')])},
                       {'call': 'flock',
                        'reason': set([('fd', 'flags'), ('file', 'f_op')])},
                       {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
                       {'call': 'fchdir', 'reason': set([('fd', 'flags')])},
                       {'call': 'openat', 'reason': set([('file', 'f_op')])},
                       {'call': 'uselib', 'reason': set([('file', 'f_op')])},
                       {'call': 'renameat2',
                        'reason': set([('dentry', 'd_inode')])},
                       {'call': 'accept4',
                        'reason': set([('fd', 'flags'), ('file', 'f_op')])},
                       {'call': 'old_readdir',
                        'reason': set([('fd', 'flags')])},
                       {'call': 'inotify_rm_watch',
                        'reason': set([('fd', 'flags')])},
                       {'call': 'socketpair',
                        'reason': set([('file', 'f_op')])},
                       {'call': 'utimensat',
                        'reason': set([('fd', 'flags')])},
                       {'call': 'getcwd',
                        'reason': set([('dentry', 'd_inode')])},
                       {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
                       {'call': 'splice', 'reason': set([('fd', 'flags')])},
                       {'call': 'ftruncate',
                        'reason': set([('dentry', 'd_inode'),
                                       ('fd', 'flags')])},
                       {'call': 'preadv', 'reason': set([('fd', 'flags')])},
                       {'call': 'getpeername',
                        'reason': set([('fd', 'flags')])},
                       {'call': 'shmat', 'reason': set([('file', 'f_op')])},
                       {'call': 'setsockopt',
                        'reason': set([('fd', 'flags')])},
                       {'call': 'mknodat',
                        'reason': set([('dentry', 'd_inode')])},
                       {'call': 'socket', 'reason': set([('file', 'f_op')])},
                       {'call': 'symlinkat',
                        'reason': set([('dentry', 'd_inode')])},
                       {'call': 'pipe2', 'reason': set([('file', 'f_op')])},
                       {'call': 'fcntl', 'reason': set([('fd', 'flags')])},
                       {'call': 'ioctl', 'reason': set([('fd', 'flags')])},
                       {'call': 'pwrite64', 'reason': set([('fd', 'flags')])},
                       {'call': 'perf_event_open',
                        'reason': set([('fd', 'flags'), ('file', 'f_op')])},
                       {'call': 'linkat',
                        'reason': set([('dentry', 'd_inode')])},
                       {'call': 'shmdt', 'reason': set([('file', 'f_op')])},
                       {'call': 'pwritev64v2',
                        'reason': set([('fd', 'flags')])},
                       {'call': 'futimesat',
                        'reason': set([('fd', 'flags')])},
                       {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
                       {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
                       {'call': 'acct', 'reason': set([('file', 'f_op')])},
                       {'call': 'open', 'reason': set([('file', 'f_op')])},
                       {'call': 'unlink',
                        'reason': set([('dentry', 'd_inode')])},
                       {'call': 'getsockopt',
                        'reason': set([('fd', 'flags')])},
                       {'call': 'mq_getsetattr',
                        'reason': set([('fd', 'flags')])},
                       {'call': 'rmdir',
                        'reason': set([('dentry', 'd_inode')])},
                       {'call': 'dup', 'reason': set([('file', 'f_op')])},
                       {'call': 'fdatasync',
                        'reason': set([('fd', 'flags')])},
                       {'call': 'setns', 'reason': set([('file', 'f_op')])},
                       {'call': 'getdents64',
                        'reason': set([('fd', 'flags')])},
                       {'call': 'listen', 'reason': set([('fd', 'flags')])},
                       {'call': 'copy_file_range',
                        'reason': set([('fd', 'flags')])},
                       {'call': 'mq_timedsend',
                        'reason': set([('fd', 'flags')])},
                       {'call': 'fgetxattr',
                        'reason': set([('fd', 'flags')])},
                       {'call': 'shmctl', 'reason': set([('file', 'f_op')])},
                       {'call': 'fcntl64', 'reason': set([('fd', 'flags')])},
                       {'call': 'swapon', 'reason': set([('file', 'f_op')])},
                       {'call': 'fallocate',
                        'reason': set([('fd', 'flags')])},
                       {'call': 'epoll_wait',
                        'reason': set([('fd', 'flags')])},
                       {'call': 'llseek', 'reason': set([('fd', 'flags')])},
                       {'call': 'mmap_pgoff',
                        'reason': set([('file', 'f_op')])},
                       {'call': 'preadv64v2',
                        'reason': set([('fd', 'flags')])},
                       {'call': 'readv', 'reason': set([('fd', 'flags')])},
                       {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
                       {'call': 'fstatfs64',
                        'reason': set([('fd', 'flags')])},
                       {'call': 'write', 'reason': set([('fd', 'flags')])},
                       {'call': 'mq_notify',
                        'reason': set([('fd', 'flags')])},
                       {'call': 'sendfile', 'reason': set([('fd', 'flags')])},
                       {'call': 'mq_open',
                        'reason': set([('dentry', 'd_inode'),
                                       ('file', 'f_op')])},
                       {'call': 'unlinkat',
                        'reason': set([('dentry', 'd_inode')])},
                       {'call': 'open_by_handle_at',
                        'reason': set([('file', 'f_op')])},
                       {'call': 'bind', 'reason': set([('fd', 'flags')])},
                       {'call': 'flistxattr',
                        'reason': set([('fd', 'flags')])},
                       {'call': 'sendfile64',
                        'reason': set([('fd', 'flags')])}],
 'inotify_init1': [{'call': 'keyctl',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'rt_sigtimedwait',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'msgrcv',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'kill', 'reason': set([('task_struct', 'cred')])},
                   {'call': 'sched_getaffinity',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'sched_setparam',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'ioprio_set',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'getppid',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'mq_timedreceive',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'capget',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'sched_setaffinity',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'signal',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'semtimedop',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'umount',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'sched_rr_get_interval',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'rt_sigprocmask',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'setsid',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'sigaltstack',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'sched_setattr',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'inotify_rm_watch',
                    'reason': set([('fsnotify_group', 'overflow_event'),
                                   ('inotify_group_private_data',
                                    'ucounts')])},
                   {'call': 'migrate_pages',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'getitimer',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'setpgid',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'inotify_add_watch',
                    'reason': set([('fsnotify_group', 'overflow_event'),
                                   ('inotify_group_private_data',
                                    'ucounts')])},
                   {'call': 'getsid',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'prlimit64',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'perf_event_open',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'rt_sigaction',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'getpgid',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'getpriority',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'sigaction',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'setns',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'fork', 'reason': set([('task_struct', 'cred')])},
                   {'call': 'get_robust_list',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'mq_timedsend',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'sched_getscheduler',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'ptrace',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'sched_getattr',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'getrusage',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'sched_setscheduler',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'setitimer',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'ioprio_get',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'vfork',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'prctl',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'move_pages',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'setpriority',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'clone',
                    'reason': set([('task_struct', 'cred')])},
                   {'call': 'sched_getparam',
                    'reason': set([('task_struct', 'cred')])}],
 'inotify_rm_watch': [{'call': 'syncfs', 'reason': set([('fd', 'flags')])},
                      {'call': 'vmsplice', 'reason': set([('fd', 'flags')])},
                      {'call': 'eventfd2', 'reason': set([('file', 'f_op')])},
                      {'call': 'pwritev64', 'reason': set([('fd', 'flags')])},
                      {'call': 'swapoff', 'reason': set([('file', 'f_op')])},
                      {'call': 'fremovexattr',
                       'reason': set([('fd', 'flags')])},
                      {'call': 'readahead', 'reason': set([('fd', 'flags')])},
                      {'call': 'getdents', 'reason': set([('fd', 'flags')])},
                      {'call': 'writev', 'reason': set([('fd', 'flags')])},
                      {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
                      {'call': 'fchmod', 'reason': set([('fd', 'flags')])},
                      {'call': 'pread64', 'reason': set([('fd', 'flags')])},
                      {'call': 'signalfd4', 'reason': set([('fd', 'flags')])},
                      {'call': 'memfd_create',
                       'reason': set([('file', 'f_op')])},
                      {'call': 'remap_file_pages',
                       'reason': set([('file', 'f_op')])},
                      {'call': 'dup3', 'reason': set([('file', 'f_op')])},
                      {'call': 'read', 'reason': set([('fd', 'flags')])},
                      {'call': 'fchown', 'reason': set([('fd', 'flags')])},
                      {'call': 'mq_timedreceive',
                       'reason': set([('fd', 'flags')])},
                      {'call': 'utime', 'reason': set([('fd', 'flags')])},
                      {'call': 'fsync', 'reason': set([('fd', 'flags')])},
                      {'call': 'bpf', 'reason': set([('fd', 'flags')])},
                      {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
                      {'call': 'fsetxattr', 'reason': set([('fd', 'flags')])},
                      {'call': 'sendto', 'reason': set([('fd', 'flags')])},
                      {'call': 'epoll_create1',
                       'reason': set([('file', 'f_op')])},
                      {'call': 'tee', 'reason': set([('fd', 'flags')])},
                      {'call': 'sync_file_range',
                       'reason': set([('fd', 'flags')])},
                      {'call': 'lseek', 'reason': set([('fd', 'flags')])},
                      {'call': 'connect', 'reason': set([('fd', 'flags')])},
                      {'call': 'getsockname',
                       'reason': set([('fd', 'flags')])},
                      {'call': 'epoll_ctl',
                       'reason': set([('fd', 'flags'), ('file', 'f_op')])},
                      {'call': 'flock',
                       'reason': set([('fd', 'flags'), ('file', 'f_op')])},
                      {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
                      {'call': 'fchdir', 'reason': set([('fd', 'flags')])},
                      {'call': 'openat', 'reason': set([('file', 'f_op')])},
                      {'call': 'uselib', 'reason': set([('file', 'f_op')])},
                      {'call': 'accept4',
                       'reason': set([('fd', 'flags'), ('file', 'f_op')])},
                      {'call': 'old_readdir',
                       'reason': set([('fd', 'flags')])},
                      {'call': 'socketpair',
                       'reason': set([('file', 'f_op')])},
                      {'call': 'utimensat', 'reason': set([('fd', 'flags')])},
                      {'call': 'inotify_add_watch',
                       'reason': set([('fd', 'flags')])},
                      {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
                      {'call': 'splice', 'reason': set([('fd', 'flags')])},
                      {'call': 'ftruncate', 'reason': set([('fd', 'flags')])},
                      {'call': 'preadv', 'reason': set([('fd', 'flags')])},
                      {'call': 'getpeername',
                       'reason': set([('fd', 'flags')])},
                      {'call': 'shmat', 'reason': set([('file', 'f_op')])},
                      {'call': 'setsockopt',
                       'reason': set([('fd', 'flags')])},
                      {'call': 'socket', 'reason': set([('file', 'f_op')])},
                      {'call': 'pipe2', 'reason': set([('file', 'f_op')])},
                      {'call': 'fcntl', 'reason': set([('fd', 'flags')])},
                      {'call': 'ioctl', 'reason': set([('fd', 'flags')])},
                      {'call': 'pwrite64', 'reason': set([('fd', 'flags')])},
                      {'call': 'perf_event_open',
                       'reason': set([('fd', 'flags'), ('file', 'f_op')])},
                      {'call': 'shmdt', 'reason': set([('file', 'f_op')])},
                      {'call': 'pwritev64v2',
                       'reason': set([('fd', 'flags')])},
                      {'call': 'futimesat', 'reason': set([('fd', 'flags')])},
                      {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
                      {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
                      {'call': 'acct', 'reason': set([('file', 'f_op')])},
                      {'call': 'open', 'reason': set([('file', 'f_op')])},
                      {'call': 'getsockopt',
                       'reason': set([('fd', 'flags')])},
                      {'call': 'mq_getsetattr',
                       'reason': set([('fd', 'flags')])},
                      {'call': 'dup', 'reason': set([('file', 'f_op')])},
                      {'call': 'fdatasync', 'reason': set([('fd', 'flags')])},
                      {'call': 'setns', 'reason': set([('file', 'f_op')])},
                      {'call': 'getdents64',
                       'reason': set([('fd', 'flags')])},
                      {'call': 'listen', 'reason': set([('fd', 'flags')])},
                      {'call': 'copy_file_range',
                       'reason': set([('fd', 'flags')])},
                      {'call': 'mq_timedsend',
                       'reason': set([('fd', 'flags')])},
                      {'call': 'fgetxattr', 'reason': set([('fd', 'flags')])},
                      {'call': 'shmctl', 'reason': set([('file', 'f_op')])},
                      {'call': 'fcntl64', 'reason': set([('fd', 'flags')])},
                      {'call': 'swapon', 'reason': set([('file', 'f_op')])},
                      {'call': 'fallocate', 'reason': set([('fd', 'flags')])},
                      {'call': 'epoll_wait',
                       'reason': set([('fd', 'flags')])},
                      {'call': 'llseek', 'reason': set([('fd', 'flags')])},
                      {'call': 'mmap_pgoff',
                       'reason': set([('file', 'f_op')])},
                      {'call': 'preadv64v2',
                       'reason': set([('fd', 'flags')])},
                      {'call': 'readv', 'reason': set([('fd', 'flags')])},
                      {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
                      {'call': 'fstatfs64', 'reason': set([('fd', 'flags')])},
                      {'call': 'write', 'reason': set([('fd', 'flags')])},
                      {'call': 'mq_notify', 'reason': set([('fd', 'flags')])},
                      {'call': 'sendfile', 'reason': set([('fd', 'flags')])},
                      {'call': 'mq_open', 'reason': set([('file', 'f_op')])},
                      {'call': 'open_by_handle_at',
                       'reason': set([('file', 'f_op')])},
                      {'call': 'bind', 'reason': set([('fd', 'flags')])},
                      {'call': 'flistxattr',
                       'reason': set([('fd', 'flags')])},
                      {'call': 'sendfile64',
                       'reason': set([('fd', 'flags')])}],
 'io_cancel': [{'call': 'swapoff',
                'reason': set([('mm_struct', 'ioctx_table')])},
               {'call': 'remap_file_pages',
                'reason': set([('mm_struct', 'ioctx_table')])},
               {'call': 'io_getevents',
                'reason': set([('kioctx', 'user_id'),
                               ('kioctx_table', 'nr'),
                               ('mm_struct', 'ioctx_table')])},
               {'call': 'migrate_pages',
                'reason': set([('mm_struct', 'ioctx_table')])},
               {'call': 'shmdt',
                'reason': set([('mm_struct', 'ioctx_table')])},
               {'call': 'brk', 'reason': set([('mm_struct', 'ioctx_table')])},
               {'call': 'get_mempolicy',
                'reason': set([('mm_struct', 'ioctx_table')])},
               {'call': 'io_submit', 'reason': set([('kioctx', 'user_id')])},
               {'call': 'getrusage',
                'reason': set([('mm_struct', 'ioctx_table')])},
               {'call': 'io_setup',
                'reason': set([('kioctx', 'user_id'),
                               ('kioctx_table', 'nr'),
                               ('mm_struct', 'ioctx_table')])},
               {'call': 'mremap',
                'reason': set([('mm_struct', 'ioctx_table')])},
               {'call': 'io_destroy',
                'reason': set([('kioctx', 'user_id'),
                               ('kioctx_table', 'nr'),
                               ('mm_struct', 'ioctx_table')])},
               {'call': 'mbind',
                'reason': set([('mm_struct', 'ioctx_table')])},
               {'call': 'prctl',
                'reason': set([('mm_struct', 'ioctx_table')])},
               {'call': 'move_pages',
                'reason': set([('mm_struct', 'ioctx_table')])},
               {'call': 'modify_ldt',
                'reason': set([('mm_struct', 'ioctx_table')])},
               {'call': 'mincore',
                'reason': set([('mm_struct', 'ioctx_table')])}],
 'io_destroy': [{'call': 'swapoff',
                 'reason': set([('mm_struct', 'ioctx_table')])},
                {'call': 'remap_file_pages',
                 'reason': set([('mm_struct', 'ioctx_table')])},
                {'call': 'io_getevents',
                 'reason': set([('kioctx', 'max_reqs'),
                                ('kioctx', 'mmap_base'),
                                ('kioctx', 'mmap_size'),
                                ('kioctx', 'user_id'),
                                ('kioctx_table', 'nr'),
                                ('mm_struct', 'ioctx_table')])},
                {'call': 'migrate_pages',
                 'reason': set([('mm_struct', 'ioctx_table')])},
                {'call': 'shmdt',
                 'reason': set([('mm_struct', 'ioctx_table')])},
                {'call': 'brk',
                 'reason': set([('mm_struct', 'ioctx_table')])},
                {'call': 'get_mempolicy',
                 'reason': set([('mm_struct', 'ioctx_table')])},
                {'call': 'io_submit',
                 'reason': set([('kioctx', 'max_reqs'),
                                ('kioctx', 'mmap_base'),
                                ('kioctx', 'mmap_size'),
                                ('kioctx', 'user_id')])},
                {'call': 'getrusage',
                 'reason': set([('mm_struct', 'ioctx_table')])},
                {'call': 'io_setup',
                 'reason': set([('kioctx', 'max_reqs'),
                                ('kioctx', 'mmap_base'),
                                ('kioctx', 'mmap_size'),
                                ('kioctx', 'user_id'),
                                ('kioctx_table', 'nr'),
                                ('mm_struct', 'ioctx_table')])},
                {'call': 'mremap',
                 'reason': set([('mm_struct', 'ioctx_table')])},
                {'call': 'mbind',
                 'reason': set([('mm_struct', 'ioctx_table')])},
                {'call': 'prctl',
                 'reason': set([('mm_struct', 'ioctx_table')])},
                {'call': 'move_pages',
                 'reason': set([('mm_struct', 'ioctx_table')])},
                {'call': 'modify_ldt',
                 'reason': set([('mm_struct', 'ioctx_table')])},
                {'call': 'mincore',
                 'reason': set([('mm_struct', 'ioctx_table')])},
                {'call': 'io_cancel',
                 'reason': set([('kioctx', 'max_reqs'),
                                ('kioctx', 'mmap_base'),
                                ('kioctx', 'mmap_size'),
                                ('kioctx', 'user_id'),
                                ('kioctx_table', 'nr'),
                                ('mm_struct', 'ioctx_table')])}],
 'io_getevents': [{'call': 'keyctl',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'rt_sigtimedwait',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'msgrcv',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'kill',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'swapoff',
                   'reason': set([('mm_struct', 'ioctx_table')])},
                  {'call': 'sched_getaffinity',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'sched_setparam',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'ioprio_set',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'remap_file_pages',
                   'reason': set([('mm_struct', 'ioctx_table')])},
                  {'call': 'getppid',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'mq_timedreceive',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'capget',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'sched_setaffinity',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'signal',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'semtimedop',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'umount',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'sched_rr_get_interval',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'rt_sigprocmask',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'setsid',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'sigaltstack',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'sched_setattr',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'migrate_pages',
                   'reason': set([('mm_struct', 'ioctx_table'),
                                  ('task_struct', 'timer_slack_ns')])},
                  {'call': 'getitimer',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'setpgid',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'getsid',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'prlimit64',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'perf_event_open',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'shmdt',
                   'reason': set([('mm_struct', 'ioctx_table')])},
                  {'call': 'rt_sigaction',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'getpgid',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'brk',
                   'reason': set([('mm_struct', 'ioctx_table')])},
                  {'call': 'getpriority',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'sigaction',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'setns',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'fork',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'get_mempolicy',
                   'reason': set([('mm_struct', 'ioctx_table')])},
                  {'call': 'io_submit',
                   'reason': set([('kioctx', 'user_id')])},
                  {'call': 'get_robust_list',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'mq_timedsend',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'sched_getscheduler',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'ptrace',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'sched_getattr',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'getrusage',
                   'reason': set([('mm_struct', 'ioctx_table'),
                                  ('task_struct', 'timer_slack_ns')])},
                  {'call': 'sched_setscheduler',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'setitimer',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'ioprio_get',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'vfork',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'io_setup',
                   'reason': set([('kioctx', 'user_id'),
                                  ('kioctx_table', 'nr'),
                                  ('mm_struct', 'ioctx_table')])},
                  {'call': 'mremap',
                   'reason': set([('mm_struct', 'ioctx_table')])},
                  {'call': 'io_destroy',
                   'reason': set([('kioctx', 'user_id'),
                                  ('kioctx_table', 'nr'),
                                  ('mm_struct', 'ioctx_table')])},
                  {'call': 'mbind',
                   'reason': set([('mm_struct', 'ioctx_table')])},
                  {'call': 'prctl',
                   'reason': set([('mm_struct', 'ioctx_table'),
                                  ('task_struct', 'timer_slack_ns')])},
                  {'call': 'move_pages',
                   'reason': set([('mm_struct', 'ioctx_table'),
                                  ('task_struct', 'timer_slack_ns')])},
                  {'call': 'modify_ldt',
                   'reason': set([('mm_struct', 'ioctx_table')])},
                  {'call': 'setpriority',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'mincore',
                   'reason': set([('mm_struct', 'ioctx_table')])},
                  {'call': 'clone',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'sched_getparam',
                   'reason': set([('task_struct', 'timer_slack_ns')])},
                  {'call': 'io_cancel',
                   'reason': set([('kioctx', 'user_id'),
                                  ('kioctx_table', 'nr'),
                                  ('mm_struct', 'ioctx_table')])}],
 'io_setup': [{'call': 'io_getevents',
               'reason': set([('kioctx', 'cpu'),
                              ('kioctx', 'max_reqs'),
                              ('kioctx', 'mmap_base'),
                              ('kioctx', 'mmap_size'),
                              ('kioctx', 'req_batch')])},
              {'call': 'io_submit',
               'reason': set([('kioctx', 'cpu'),
                              ('kioctx', 'max_reqs'),
                              ('kioctx', 'mmap_base'),
                              ('kioctx', 'mmap_size'),
                              ('kioctx', 'req_batch')])},
              {'call': 'io_destroy',
               'reason': set([('kioctx', 'cpu'),
                              ('kioctx', 'max_reqs'),
                              ('kioctx', 'mmap_base'),
                              ('kioctx', 'mmap_size'),
                              ('kioctx', 'req_batch')])},
              {'call': 'io_cancel',
               'reason': set([('kioctx', 'cpu'),
                              ('kioctx', 'max_reqs'),
                              ('kioctx', 'mmap_base'),
                              ('kioctx', 'mmap_size'),
                              ('kioctx', 'req_batch')])}],
 'io_submit': [{'call': 'keyctl', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'rt_sigtimedwait',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'msgrcv', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'kill', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'sched_getaffinity',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'sched_setparam',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'ioprio_set',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'getppid', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'ioperm', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'mq_timedreceive',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'capget', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'sched_setaffinity',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'signal', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'semtimedop',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'umount', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'sched_rr_get_interval',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'rt_sigprocmask',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'setsid', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'sigaltstack',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'sched_setattr',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'migrate_pages',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'getitimer',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'setpgid', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'getsid', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'prlimit64',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'perf_event_open',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'rt_sigaction',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'getpgid', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'getpriority',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'sigaction',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'setns', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'fork', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'get_robust_list',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'mq_timedsend',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'sched_getscheduler',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'ptrace', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'sched_getattr',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'getrusage',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'sched_setscheduler',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'setitimer',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'ioprio_get',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'vfork', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'prctl', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'move_pages',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'setpriority',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'clone', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'sched_getparam',
                'reason': set([('mm_segment_t', 'seg')])}],
 'ioctl': [{'call': 'syncfs', 'reason': set([('fd', 'flags')])},
           {'call': 'vmsplice', 'reason': set([('fd', 'flags')])},
           {'call': 'pwritev64', 'reason': set([('fd', 'flags')])},
           {'call': 'fremovexattr', 'reason': set([('fd', 'flags')])},
           {'call': 'readahead', 'reason': set([('fd', 'flags')])},
           {'call': 'getdents', 'reason': set([('fd', 'flags')])},
           {'call': 'writev', 'reason': set([('fd', 'flags')])},
           {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
           {'call': 'fchmod', 'reason': set([('fd', 'flags')])},
           {'call': 'pread64', 'reason': set([('fd', 'flags')])},
           {'call': 'signalfd4', 'reason': set([('fd', 'flags')])},
           {'call': 'read', 'reason': set([('fd', 'flags')])},
           {'call': 'fchown', 'reason': set([('fd', 'flags')])},
           {'call': 'mq_timedreceive', 'reason': set([('fd', 'flags')])},
           {'call': 'utime', 'reason': set([('fd', 'flags')])},
           {'call': 'fsync', 'reason': set([('fd', 'flags')])},
           {'call': 'bpf', 'reason': set([('fd', 'flags')])},
           {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
           {'call': 'fsetxattr', 'reason': set([('fd', 'flags')])},
           {'call': 'sendto', 'reason': set([('fd', 'flags')])},
           {'call': 'tee', 'reason': set([('fd', 'flags')])},
           {'call': 'sync_file_range', 'reason': set([('fd', 'flags')])},
           {'call': 'lseek', 'reason': set([('fd', 'flags')])},
           {'call': 'connect', 'reason': set([('fd', 'flags')])},
           {'call': 'getsockname', 'reason': set([('fd', 'flags')])},
           {'call': 'epoll_ctl', 'reason': set([('fd', 'flags')])},
           {'call': 'flock', 'reason': set([('fd', 'flags')])},
           {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
           {'call': 'fchdir', 'reason': set([('fd', 'flags')])},
           {'call': 'accept4', 'reason': set([('fd', 'flags')])},
           {'call': 'old_readdir', 'reason': set([('fd', 'flags')])},
           {'call': 'inotify_rm_watch', 'reason': set([('fd', 'flags')])},
           {'call': 'utimensat', 'reason': set([('fd', 'flags')])},
           {'call': 'inotify_add_watch', 'reason': set([('fd', 'flags')])},
           {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
           {'call': 'splice', 'reason': set([('fd', 'flags')])},
           {'call': 'ftruncate', 'reason': set([('fd', 'flags')])},
           {'call': 'preadv', 'reason': set([('fd', 'flags')])},
           {'call': 'getpeername', 'reason': set([('fd', 'flags')])},
           {'call': 'setsockopt', 'reason': set([('fd', 'flags')])},
           {'call': 'fcntl', 'reason': set([('fd', 'flags')])},
           {'call': 'pwrite64', 'reason': set([('fd', 'flags')])},
           {'call': 'perf_event_open', 'reason': set([('fd', 'flags')])},
           {'call': 'pwritev64v2', 'reason': set([('fd', 'flags')])},
           {'call': 'futimesat', 'reason': set([('fd', 'flags')])},
           {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
           {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
           {'call': 'getsockopt', 'reason': set([('fd', 'flags')])},
           {'call': 'mq_getsetattr', 'reason': set([('fd', 'flags')])},
           {'call': 'fdatasync', 'reason': set([('fd', 'flags')])},
           {'call': 'getdents64', 'reason': set([('fd', 'flags')])},
           {'call': 'listen', 'reason': set([('fd', 'flags')])},
           {'call': 'copy_file_range', 'reason': set([('fd', 'flags')])},
           {'call': 'mq_timedsend', 'reason': set([('fd', 'flags')])},
           {'call': 'fgetxattr', 'reason': set([('fd', 'flags')])},
           {'call': 'fcntl64', 'reason': set([('fd', 'flags')])},
           {'call': 'fallocate', 'reason': set([('fd', 'flags')])},
           {'call': 'epoll_wait', 'reason': set([('fd', 'flags')])},
           {'call': 'llseek', 'reason': set([('fd', 'flags')])},
           {'call': 'preadv64v2', 'reason': set([('fd', 'flags')])},
           {'call': 'readv', 'reason': set([('fd', 'flags')])},
           {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
           {'call': 'fstatfs64', 'reason': set([('fd', 'flags')])},
           {'call': 'write', 'reason': set([('fd', 'flags')])},
           {'call': 'mq_notify', 'reason': set([('fd', 'flags')])},
           {'call': 'sendfile', 'reason': set([('fd', 'flags')])},
           {'call': 'bind', 'reason': set([('fd', 'flags')])},
           {'call': 'flistxattr', 'reason': set([('fd', 'flags')])},
           {'call': 'sendfile64', 'reason': set([('fd', 'flags')])}],
 'ioperm': [{'call': 'keyctl',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'rt_sigtimedwait',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'msgrcv',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'kill',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'sched_getaffinity',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'sched_setparam',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'ioprio_set',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'getppid',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'mq_timedreceive',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'capget',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'sched_setaffinity',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'signal',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'semtimedop',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'umount',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'sched_rr_get_interval',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'rt_sigprocmask',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'setsid',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'sigaltstack',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'sched_setattr',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'migrate_pages',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'getitimer',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'setpgid',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'getsid',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'prlimit64',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'perf_event_open',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'rt_sigaction',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'getpgid',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'getpriority',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'sigaction',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'setns',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'fork',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'get_robust_list',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'mq_timedsend',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'sched_getscheduler',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'ptrace',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'sched_getattr',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'getrusage',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'sched_setscheduler',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'setitimer',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'ioprio_get',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'vfork',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'prctl',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'move_pages',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'setpriority',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'clone',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])},
            {'call': 'sched_getparam',
             'reason': set([('thread_struct', 'io_bitmap_ptr')])}],
 'ioprio_get': [{'call': 'keyctl',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'rt_sigtimedwait',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'msgrcv',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'kill',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'sched_getaffinity',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'sched_setparam',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'ioprio_set',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'getppid',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'mq_timedreceive',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'capget',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'sched_setaffinity',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'signal',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'semtimedop',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'umount',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'sched_rr_get_interval',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'rt_sigprocmask',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'setsid',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'sigaltstack',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'sched_setattr',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'migrate_pages',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'getitimer',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'setpgid',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'getsid',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'prlimit64',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'perf_event_open',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'rt_sigaction',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'getpgid',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'getpriority',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'sigaction',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'setns',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'fork',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'get_robust_list',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'mq_timedsend',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'sched_getscheduler',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'ptrace',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'sched_getattr',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'getrusage',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'sched_setscheduler',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'setitimer',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'vfork',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'prctl',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'move_pages',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'setpriority',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'clone',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])},
                {'call': 'sched_getparam',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'io_context'),
                                ('task_struct', 'real_cred')])}],
 'ioprio_set': [{'call': 'keyctl',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'rt_sigtimedwait',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'msgrcv',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'kill',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'sched_getaffinity',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'sched_setparam',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'getppid',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'mq_timedreceive',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'capget',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'sched_setaffinity',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'signal',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'semtimedop',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'umount',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'sched_rr_get_interval',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'rt_sigprocmask',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'setsid',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'sigaltstack',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'sched_setattr',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'migrate_pages',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'getitimer',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'setpgid',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'getsid',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'prlimit64',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'perf_event_open',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'rt_sigaction',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'getpgid',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'getpriority',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'sigaction',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'setns',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'fork',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'get_robust_list',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'mq_timedsend',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'sched_getscheduler',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'ptrace',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'sched_getattr',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'getrusage',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'sched_setscheduler',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'setitimer',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'ioprio_get',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'vfork',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'prctl',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'move_pages',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'setpriority',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'clone',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])},
                {'call': 'sched_getparam',
                 'reason': set([('task_struct', 'cred'),
                                ('task_struct', 'real_cred')])}],
 'keyctl': [{'call': 'rt_sigtimedwait',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'setfsuid',
             'reason': set([('cred', 'session_keyring')])},
            {'call': 'msgrcv',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'kill',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'getresuid16',
             'reason': set([('cred', 'session_keyring')])},
            {'call': 'getresgid',
             'reason': set([('cred', 'session_keyring')])},
            {'call': 'sched_getaffinity',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'sched_setparam',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'setgid',
             'reason': set([('cred', 'egid'),
                            ('cred', 'gid'),
                            ('cred', 'session_keyring'),
                            ('cred', 'sgid')])},
            {'call': 'ioprio_set',
             'reason': set([('cred', 'session_keyring'),
                            ('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'capset', 'reason': set([('cred', 'session_keyring')])},
            {'call': 'getppid',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'mq_timedreceive',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'getresgid16',
             'reason': set([('cred', 'session_keyring')])},
            {'call': 'capget',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'sched_setaffinity',
             'reason': set([('cred', 'session_keyring'),
                            ('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'setfsgid',
             'reason': set([('cred', 'session_keyring')])},
            {'call': 'unshare', 'reason': set([('cred', 'session_keyring')])},
            {'call': 'signal',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'setreuid',
             'reason': set([('cred', 'euid'),
                            ('cred', 'session_keyring'),
                            ('cred', 'suid'),
                            ('cred', 'uid')])},
            {'call': 'semtimedop',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'umount',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'sched_rr_get_interval',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'epoll_create1',
             'reason': set([('cred', 'session_keyring')])},
            {'call': 'getresuid',
             'reason': set([('cred', 'session_keyring')])},
            {'call': 'rt_sigprocmask',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'setsid',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'sigaltstack',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'sched_setattr',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'migrate_pages',
             'reason': set([('cred', 'session_keyring'),
                            ('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'getitimer',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'setpgid',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'setresgid',
             'reason': set([('cred', 'egid'),
                            ('cred', 'gid'),
                            ('cred', 'session_keyring'),
                            ('cred', 'sgid')])},
            {'call': 'setregid',
             'reason': set([('cred', 'egid'),
                            ('cred', 'gid'),
                            ('cred', 'session_keyring'),
                            ('cred', 'sgid')])},
            {'call': 'getsid',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'prlimit64',
             'reason': set([('cred', 'session_keyring'),
                            ('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'perf_event_open',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'getgroups16',
             'reason': set([('cred', 'session_keyring')])},
            {'call': 'rt_sigaction',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'request_key',
             'reason': set([('key', 'description'),
                            ('key', 'perm'),
                            ('key', 'quotalen'),
                            ('key', 'serial'),
                            ('key_type', 'name'),
                            ('key_type', 'read')])},
            {'call': 'getpgid',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'getpriority',
             'reason': set([('cred', 'session_keyring'),
                            ('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'sigaction',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'faccessat',
             'reason': set([('cred', 'session_keyring')])},
            {'call': 'setns',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'fork',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'get_robust_list',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'mq_timedsend',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'sched_getscheduler',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'ptrace',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'sched_getattr',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'getrusage',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'sched_setscheduler',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'setresuid',
             'reason': set([('cred', 'euid'),
                            ('cred', 'session_keyring'),
                            ('cred', 'suid'),
                            ('cred', 'uid')])},
            {'call': 'setitimer',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'ioprio_get',
             'reason': set([('cred', 'session_keyring'),
                            ('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'vfork',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'setuid',
             'reason': set([('cred', 'euid'),
                            ('cred', 'session_keyring'),
                            ('cred', 'suid'),
                            ('cred', 'uid')])},
            {'call': 'prctl',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'move_pages',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'getgroups',
             'reason': set([('cred', 'session_keyring')])},
            {'call': 'setpriority',
             'reason': set([('cred', 'session_keyring'),
                            ('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'clone',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])},
            {'call': 'sched_getparam',
             'reason': set([('task_struct', 'cred'),
                            ('task_struct', 'mm'),
                            ('task_struct', 'pid'),
                            ('task_struct', 'real_cred')])}],
 'kill': [{'call': 'keyctl', 'reason': set([('task_struct', 'cred')])},
          {'call': 'rt_sigtimedwait',
           'reason': set([('task_struct', 'cred')])},
          {'call': 'msgrcv', 'reason': set([('task_struct', 'cred')])},
          {'call': 'sched_getaffinity',
           'reason': set([('task_struct', 'cred')])},
          {'call': 'sched_setparam',
           'reason': set([('task_struct', 'cred')])},
          {'call': 'ioprio_set', 'reason': set([('task_struct', 'cred')])},
          {'call': 'getppid', 'reason': set([('task_struct', 'cred')])},
          {'call': 'mq_timedreceive',
           'reason': set([('task_struct', 'cred')])},
          {'call': 'capget', 'reason': set([('task_struct', 'cred')])},
          {'call': 'sched_setaffinity',
           'reason': set([('task_struct', 'cred')])},
          {'call': 'signal', 'reason': set([('task_struct', 'cred')])},
          {'call': 'semtimedop', 'reason': set([('task_struct', 'cred')])},
          {'call': 'umount', 'reason': set([('task_struct', 'cred')])},
          {'call': 'sched_rr_get_interval',
           'reason': set([('task_struct', 'cred')])},
          {'call': 'rt_sigprocmask',
           'reason': set([('task_struct', 'cred')])},
          {'call': 'setsid', 'reason': set([('task_struct', 'cred')])},
          {'call': 'sigaltstack', 'reason': set([('task_struct', 'cred')])},
          {'call': 'sched_setattr', 'reason': set([('task_struct', 'cred')])},
          {'call': 'migrate_pages', 'reason': set([('task_struct', 'cred')])},
          {'call': 'getitimer', 'reason': set([('task_struct', 'cred')])},
          {'call': 'setpgid', 'reason': set([('task_struct', 'cred')])},
          {'call': 'getsid', 'reason': set([('task_struct', 'cred')])},
          {'call': 'prlimit64', 'reason': set([('task_struct', 'cred')])},
          {'call': 'perf_event_open',
           'reason': set([('task_struct', 'cred')])},
          {'call': 'rt_sigaction', 'reason': set([('task_struct', 'cred')])},
          {'call': 'getpgid', 'reason': set([('task_struct', 'cred')])},
          {'call': 'getpriority', 'reason': set([('task_struct', 'cred')])},
          {'call': 'sigaction', 'reason': set([('task_struct', 'cred')])},
          {'call': 'setns', 'reason': set([('task_struct', 'cred')])},
          {'call': 'fork', 'reason': set([('task_struct', 'cred')])},
          {'call': 'get_robust_list',
           'reason': set([('task_struct', 'cred')])},
          {'call': 'mq_timedsend', 'reason': set([('task_struct', 'cred')])},
          {'call': 'sched_getscheduler',
           'reason': set([('task_struct', 'cred')])},
          {'call': 'ptrace', 'reason': set([('task_struct', 'cred')])},
          {'call': 'sched_getattr', 'reason': set([('task_struct', 'cred')])},
          {'call': 'getrusage', 'reason': set([('task_struct', 'cred')])},
          {'call': 'sched_setscheduler',
           'reason': set([('task_struct', 'cred')])},
          {'call': 'setitimer', 'reason': set([('task_struct', 'cred')])},
          {'call': 'ioprio_get', 'reason': set([('task_struct', 'cred')])},
          {'call': 'vfork', 'reason': set([('task_struct', 'cred')])},
          {'call': 'prctl', 'reason': set([('task_struct', 'cred')])},
          {'call': 'move_pages', 'reason': set([('task_struct', 'cred')])},
          {'call': 'setpriority', 'reason': set([('task_struct', 'cred')])},
          {'call': 'clone', 'reason': set([('task_struct', 'cred')])},
          {'call': 'sched_getparam',
           'reason': set([('task_struct', 'cred')])}],
 'lgetxattr': [{'call': 'eventfd2', 'reason': set([('path', 'dentry')])},
               {'call': 'swapoff', 'reason': set([('path', 'dentry')])},
               {'call': 'pivot_root', 'reason': set([('path', 'dentry')])},
               {'call': 'memfd_create', 'reason': set([('path', 'dentry')])},
               {'call': 'remap_file_pages',
                'reason': set([('path', 'dentry')])},
               {'call': 'dup3', 'reason': set([('path', 'dentry')])},
               {'call': 'unshare', 'reason': set([('path', 'dentry')])},
               {'call': 'epoll_create1', 'reason': set([('path', 'dentry')])},
               {'call': 'epoll_ctl', 'reason': set([('path', 'dentry')])},
               {'call': 'flock', 'reason': set([('path', 'dentry')])},
               {'call': 'openat', 'reason': set([('path', 'dentry')])},
               {'call': 'lookup_dcookie',
                'reason': set([('path', 'dentry')])},
               {'call': 'uselib', 'reason': set([('path', 'dentry')])},
               {'call': 'accept4', 'reason': set([('path', 'dentry')])},
               {'call': 'socketpair', 'reason': set([('path', 'dentry')])},
               {'call': 'getcwd', 'reason': set([('path', 'dentry')])},
               {'call': 'shmat', 'reason': set([('path', 'dentry')])},
               {'call': 'socket', 'reason': set([('path', 'dentry')])},
               {'call': 'pipe2', 'reason': set([('path', 'dentry')])},
               {'call': 'perf_event_open',
                'reason': set([('path', 'dentry')])},
               {'call': 'shmdt', 'reason': set([('path', 'dentry')])},
               {'call': 'quotactl', 'reason': set([('path', 'dentry')])},
               {'call': 'acct', 'reason': set([('path', 'dentry')])},
               {'call': 'open', 'reason': set([('path', 'dentry')])},
               {'call': 'dup', 'reason': set([('path', 'dentry')])},
               {'call': 'setns', 'reason': set([('path', 'dentry')])},
               {'call': 'shmctl', 'reason': set([('path', 'dentry')])},
               {'call': 'swapon', 'reason': set([('path', 'dentry')])},
               {'call': 'mmap_pgoff', 'reason': set([('path', 'dentry')])},
               {'call': 'mq_open', 'reason': set([('path', 'dentry')])},
               {'call': 'open_by_handle_at',
                'reason': set([('path', 'dentry')])}],
 'linkat': [{'call': 'eventfd2', 'reason': set([('path', 'mnt')])},
            {'call': 'swapoff', 'reason': set([('path', 'mnt')])},
            {'call': 'pivot_root', 'reason': set([('path', 'mnt')])},
            {'call': 'memfd_create', 'reason': set([('path', 'mnt')])},
            {'call': 'remap_file_pages', 'reason': set([('path', 'mnt')])},
            {'call': 'dup3', 'reason': set([('path', 'mnt')])},
            {'call': 'unshare', 'reason': set([('path', 'mnt')])},
            {'call': 'epoll_create1', 'reason': set([('path', 'mnt')])},
            {'call': 'epoll_ctl', 'reason': set([('path', 'mnt')])},
            {'call': 'flock', 'reason': set([('path', 'mnt')])},
            {'call': 'openat', 'reason': set([('path', 'mnt')])},
            {'call': 'lookup_dcookie', 'reason': set([('path', 'mnt')])},
            {'call': 'uselib', 'reason': set([('path', 'mnt')])},
            {'call': 'accept4', 'reason': set([('path', 'mnt')])},
            {'call': 'socketpair', 'reason': set([('path', 'mnt')])},
            {'call': 'getcwd', 'reason': set([('path', 'mnt')])},
            {'call': 'shmat', 'reason': set([('path', 'mnt')])},
            {'call': 'socket', 'reason': set([('path', 'mnt')])},
            {'call': 'pipe2', 'reason': set([('path', 'mnt')])},
            {'call': 'perf_event_open', 'reason': set([('path', 'mnt')])},
            {'call': 'shmdt', 'reason': set([('path', 'mnt')])},
            {'call': 'quotactl', 'reason': set([('path', 'mnt')])},
            {'call': 'acct', 'reason': set([('path', 'mnt')])},
            {'call': 'open', 'reason': set([('path', 'mnt')])},
            {'call': 'dup', 'reason': set([('path', 'mnt')])},
            {'call': 'setns', 'reason': set([('path', 'mnt')])},
            {'call': 'shmctl', 'reason': set([('path', 'mnt')])},
            {'call': 'swapon', 'reason': set([('path', 'mnt')])},
            {'call': 'mmap_pgoff', 'reason': set([('path', 'mnt')])},
            {'call': 'mq_open', 'reason': set([('path', 'mnt')])},
            {'call': 'open_by_handle_at', 'reason': set([('path', 'mnt')])}],
 'listxattr': [{'call': 'eventfd2', 'reason': set([('path', 'dentry')])},
               {'call': 'swapoff', 'reason': set([('path', 'dentry')])},
               {'call': 'pivot_root', 'reason': set([('path', 'dentry')])},
               {'call': 'memfd_create', 'reason': set([('path', 'dentry')])},
               {'call': 'remap_file_pages',
                'reason': set([('path', 'dentry')])},
               {'call': 'dup3', 'reason': set([('path', 'dentry')])},
               {'call': 'unshare', 'reason': set([('path', 'dentry')])},
               {'call': 'epoll_create1', 'reason': set([('path', 'dentry')])},
               {'call': 'epoll_ctl', 'reason': set([('path', 'dentry')])},
               {'call': 'flock', 'reason': set([('path', 'dentry')])},
               {'call': 'openat', 'reason': set([('path', 'dentry')])},
               {'call': 'lookup_dcookie',
                'reason': set([('path', 'dentry')])},
               {'call': 'uselib', 'reason': set([('path', 'dentry')])},
               {'call': 'accept4', 'reason': set([('path', 'dentry')])},
               {'call': 'socketpair', 'reason': set([('path', 'dentry')])},
               {'call': 'getcwd', 'reason': set([('path', 'dentry')])},
               {'call': 'shmat', 'reason': set([('path', 'dentry')])},
               {'call': 'socket', 'reason': set([('path', 'dentry')])},
               {'call': 'pipe2', 'reason': set([('path', 'dentry')])},
               {'call': 'perf_event_open',
                'reason': set([('path', 'dentry')])},
               {'call': 'shmdt', 'reason': set([('path', 'dentry')])},
               {'call': 'quotactl', 'reason': set([('path', 'dentry')])},
               {'call': 'acct', 'reason': set([('path', 'dentry')])},
               {'call': 'open', 'reason': set([('path', 'dentry')])},
               {'call': 'dup', 'reason': set([('path', 'dentry')])},
               {'call': 'setns', 'reason': set([('path', 'dentry')])},
               {'call': 'shmctl', 'reason': set([('path', 'dentry')])},
               {'call': 'swapon', 'reason': set([('path', 'dentry')])},
               {'call': 'mmap_pgoff', 'reason': set([('path', 'dentry')])},
               {'call': 'mq_open', 'reason': set([('path', 'dentry')])},
               {'call': 'open_by_handle_at',
                'reason': set([('path', 'dentry')])}],
 'llistxattr': [{'call': 'eventfd2', 'reason': set([('path', 'dentry')])},
                {'call': 'swapoff', 'reason': set([('path', 'dentry')])},
                {'call': 'pivot_root', 'reason': set([('path', 'dentry')])},
                {'call': 'memfd_create', 'reason': set([('path', 'dentry')])},
                {'call': 'remap_file_pages',
                 'reason': set([('path', 'dentry')])},
                {'call': 'dup3', 'reason': set([('path', 'dentry')])},
                {'call': 'unshare', 'reason': set([('path', 'dentry')])},
                {'call': 'epoll_create1',
                 'reason': set([('path', 'dentry')])},
                {'call': 'epoll_ctl', 'reason': set([('path', 'dentry')])},
                {'call': 'flock', 'reason': set([('path', 'dentry')])},
                {'call': 'openat', 'reason': set([('path', 'dentry')])},
                {'call': 'lookup_dcookie',
                 'reason': set([('path', 'dentry')])},
                {'call': 'uselib', 'reason': set([('path', 'dentry')])},
                {'call': 'accept4', 'reason': set([('path', 'dentry')])},
                {'call': 'socketpair', 'reason': set([('path', 'dentry')])},
                {'call': 'getcwd', 'reason': set([('path', 'dentry')])},
                {'call': 'shmat', 'reason': set([('path', 'dentry')])},
                {'call': 'socket', 'reason': set([('path', 'dentry')])},
                {'call': 'pipe2', 'reason': set([('path', 'dentry')])},
                {'call': 'perf_event_open',
                 'reason': set([('path', 'dentry')])},
                {'call': 'shmdt', 'reason': set([('path', 'dentry')])},
                {'call': 'quotactl', 'reason': set([('path', 'dentry')])},
                {'call': 'acct', 'reason': set([('path', 'dentry')])},
                {'call': 'open', 'reason': set([('path', 'dentry')])},
                {'call': 'dup', 'reason': set([('path', 'dentry')])},
                {'call': 'setns', 'reason': set([('path', 'dentry')])},
                {'call': 'shmctl', 'reason': set([('path', 'dentry')])},
                {'call': 'swapon', 'reason': set([('path', 'dentry')])},
                {'call': 'mmap_pgoff', 'reason': set([('path', 'dentry')])},
                {'call': 'mq_open', 'reason': set([('path', 'dentry')])},
                {'call': 'open_by_handle_at',
                 'reason': set([('path', 'dentry')])}],
 'llseek': [{'call': 'syncfs', 'reason': set([('fd', 'flags')])},
            {'call': 'vmsplice', 'reason': set([('fd', 'flags')])},
            {'call': 'pwritev64', 'reason': set([('fd', 'flags')])},
            {'call': 'fremovexattr', 'reason': set([('fd', 'flags')])},
            {'call': 'readahead', 'reason': set([('fd', 'flags')])},
            {'call': 'getdents', 'reason': set([('fd', 'flags')])},
            {'call': 'writev', 'reason': set([('fd', 'flags')])},
            {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
            {'call': 'fchmod', 'reason': set([('fd', 'flags')])},
            {'call': 'pread64', 'reason': set([('fd', 'flags')])},
            {'call': 'signalfd4', 'reason': set([('fd', 'flags')])},
            {'call': 'read', 'reason': set([('fd', 'flags')])},
            {'call': 'fchown', 'reason': set([('fd', 'flags')])},
            {'call': 'mq_timedreceive', 'reason': set([('fd', 'flags')])},
            {'call': 'utime', 'reason': set([('fd', 'flags')])},
            {'call': 'fsync', 'reason': set([('fd', 'flags')])},
            {'call': 'bpf', 'reason': set([('fd', 'flags')])},
            {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
            {'call': 'fsetxattr', 'reason': set([('fd', 'flags')])},
            {'call': 'sendto', 'reason': set([('fd', 'flags')])},
            {'call': 'tee', 'reason': set([('fd', 'flags')])},
            {'call': 'sync_file_range', 'reason': set([('fd', 'flags')])},
            {'call': 'lseek', 'reason': set([('fd', 'flags')])},
            {'call': 'connect', 'reason': set([('fd', 'flags')])},
            {'call': 'getsockname', 'reason': set([('fd', 'flags')])},
            {'call': 'epoll_ctl', 'reason': set([('fd', 'flags')])},
            {'call': 'flock', 'reason': set([('fd', 'flags')])},
            {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
            {'call': 'fchdir', 'reason': set([('fd', 'flags')])},
            {'call': 'accept4', 'reason': set([('fd', 'flags')])},
            {'call': 'old_readdir', 'reason': set([('fd', 'flags')])},
            {'call': 'inotify_rm_watch', 'reason': set([('fd', 'flags')])},
            {'call': 'utimensat', 'reason': set([('fd', 'flags')])},
            {'call': 'inotify_add_watch', 'reason': set([('fd', 'flags')])},
            {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
            {'call': 'splice', 'reason': set([('fd', 'flags')])},
            {'call': 'ftruncate', 'reason': set([('fd', 'flags')])},
            {'call': 'preadv', 'reason': set([('fd', 'flags')])},
            {'call': 'getpeername', 'reason': set([('fd', 'flags')])},
            {'call': 'setsockopt', 'reason': set([('fd', 'flags')])},
            {'call': 'fcntl', 'reason': set([('fd', 'flags')])},
            {'call': 'ioctl', 'reason': set([('fd', 'flags')])},
            {'call': 'pwrite64', 'reason': set([('fd', 'flags')])},
            {'call': 'perf_event_open', 'reason': set([('fd', 'flags')])},
            {'call': 'pwritev64v2', 'reason': set([('fd', 'flags')])},
            {'call': 'futimesat', 'reason': set([('fd', 'flags')])},
            {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
            {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
            {'call': 'getsockopt', 'reason': set([('fd', 'flags')])},
            {'call': 'mq_getsetattr', 'reason': set([('fd', 'flags')])},
            {'call': 'fdatasync', 'reason': set([('fd', 'flags')])},
            {'call': 'getdents64', 'reason': set([('fd', 'flags')])},
            {'call': 'listen', 'reason': set([('fd', 'flags')])},
            {'call': 'copy_file_range', 'reason': set([('fd', 'flags')])},
            {'call': 'mq_timedsend', 'reason': set([('fd', 'flags')])},
            {'call': 'fgetxattr', 'reason': set([('fd', 'flags')])},
            {'call': 'fcntl64', 'reason': set([('fd', 'flags')])},
            {'call': 'fallocate', 'reason': set([('fd', 'flags')])},
            {'call': 'epoll_wait', 'reason': set([('fd', 'flags')])},
            {'call': 'preadv64v2', 'reason': set([('fd', 'flags')])},
            {'call': 'readv', 'reason': set([('fd', 'flags')])},
            {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
            {'call': 'fstatfs64', 'reason': set([('fd', 'flags')])},
            {'call': 'write', 'reason': set([('fd', 'flags')])},
            {'call': 'mq_notify', 'reason': set([('fd', 'flags')])},
            {'call': 'sendfile', 'reason': set([('fd', 'flags')])},
            {'call': 'bind', 'reason': set([('fd', 'flags')])},
            {'call': 'flistxattr', 'reason': set([('fd', 'flags')])},
            {'call': 'sendfile64', 'reason': set([('fd', 'flags')])}],
 'lremovexattr': [{'call': 'eventfd2',
                   'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                  {'call': 'swapoff',
                   'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                  {'call': 'pivot_root',
                   'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                  {'call': 'memfd_create',
                   'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                  {'call': 'remap_file_pages',
                   'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                  {'call': 'dup3',
                   'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                  {'call': 'unshare',
                   'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                  {'call': 'epoll_create1',
                   'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                  {'call': 'epoll_ctl',
                   'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                  {'call': 'flock',
                   'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                  {'call': 'openat',
                   'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                  {'call': 'lookup_dcookie',
                   'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                  {'call': 'uselib',
                   'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                  {'call': 'accept4',
                   'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                  {'call': 'socketpair',
                   'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                  {'call': 'getcwd',
                   'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                  {'call': 'shmat',
                   'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                  {'call': 'socket',
                   'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                  {'call': 'pipe2',
                   'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                  {'call': 'perf_event_open',
                   'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                  {'call': 'shmdt',
                   'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                  {'call': 'quotactl',
                   'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                  {'call': 'acct',
                   'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                  {'call': 'open',
                   'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                  {'call': 'dup',
                   'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                  {'call': 'setns',
                   'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                  {'call': 'shmctl',
                   'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                  {'call': 'swapon',
                   'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                  {'call': 'mmap_pgoff',
                   'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                  {'call': 'mq_open',
                   'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                  {'call': 'open_by_handle_at',
                   'reason': set([('path', 'dentry'), ('path', 'mnt')])}],
 'lseek': [{'call': 'syncfs', 'reason': set([('fd', 'flags')])},
           {'call': 'vmsplice', 'reason': set([('fd', 'flags')])},
           {'call': 'pwritev64', 'reason': set([('fd', 'flags')])},
           {'call': 'fremovexattr', 'reason': set([('fd', 'flags')])},
           {'call': 'readahead', 'reason': set([('fd', 'flags')])},
           {'call': 'getdents', 'reason': set([('fd', 'flags')])},
           {'call': 'writev', 'reason': set([('fd', 'flags')])},
           {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
           {'call': 'fchmod', 'reason': set([('fd', 'flags')])},
           {'call': 'pread64', 'reason': set([('fd', 'flags')])},
           {'call': 'signalfd4', 'reason': set([('fd', 'flags')])},
           {'call': 'read', 'reason': set([('fd', 'flags')])},
           {'call': 'fchown', 'reason': set([('fd', 'flags')])},
           {'call': 'mq_timedreceive', 'reason': set([('fd', 'flags')])},
           {'call': 'utime', 'reason': set([('fd', 'flags')])},
           {'call': 'fsync', 'reason': set([('fd', 'flags')])},
           {'call': 'bpf', 'reason': set([('fd', 'flags')])},
           {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
           {'call': 'fsetxattr', 'reason': set([('fd', 'flags')])},
           {'call': 'sendto', 'reason': set([('fd', 'flags')])},
           {'call': 'tee', 'reason': set([('fd', 'flags')])},
           {'call': 'sync_file_range', 'reason': set([('fd', 'flags')])},
           {'call': 'connect', 'reason': set([('fd', 'flags')])},
           {'call': 'getsockname', 'reason': set([('fd', 'flags')])},
           {'call': 'epoll_ctl', 'reason': set([('fd', 'flags')])},
           {'call': 'flock', 'reason': set([('fd', 'flags')])},
           {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
           {'call': 'fchdir', 'reason': set([('fd', 'flags')])},
           {'call': 'accept4', 'reason': set([('fd', 'flags')])},
           {'call': 'old_readdir', 'reason': set([('fd', 'flags')])},
           {'call': 'inotify_rm_watch', 'reason': set([('fd', 'flags')])},
           {'call': 'utimensat', 'reason': set([('fd', 'flags')])},
           {'call': 'inotify_add_watch', 'reason': set([('fd', 'flags')])},
           {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
           {'call': 'splice', 'reason': set([('fd', 'flags')])},
           {'call': 'ftruncate', 'reason': set([('fd', 'flags')])},
           {'call': 'preadv', 'reason': set([('fd', 'flags')])},
           {'call': 'getpeername', 'reason': set([('fd', 'flags')])},
           {'call': 'setsockopt', 'reason': set([('fd', 'flags')])},
           {'call': 'fcntl', 'reason': set([('fd', 'flags')])},
           {'call': 'ioctl', 'reason': set([('fd', 'flags')])},
           {'call': 'pwrite64', 'reason': set([('fd', 'flags')])},
           {'call': 'perf_event_open', 'reason': set([('fd', 'flags')])},
           {'call': 'pwritev64v2', 'reason': set([('fd', 'flags')])},
           {'call': 'futimesat', 'reason': set([('fd', 'flags')])},
           {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
           {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
           {'call': 'getsockopt', 'reason': set([('fd', 'flags')])},
           {'call': 'mq_getsetattr', 'reason': set([('fd', 'flags')])},
           {'call': 'fdatasync', 'reason': set([('fd', 'flags')])},
           {'call': 'getdents64', 'reason': set([('fd', 'flags')])},
           {'call': 'listen', 'reason': set([('fd', 'flags')])},
           {'call': 'copy_file_range', 'reason': set([('fd', 'flags')])},
           {'call': 'mq_timedsend', 'reason': set([('fd', 'flags')])},
           {'call': 'fgetxattr', 'reason': set([('fd', 'flags')])},
           {'call': 'fcntl64', 'reason': set([('fd', 'flags')])},
           {'call': 'fallocate', 'reason': set([('fd', 'flags')])},
           {'call': 'epoll_wait', 'reason': set([('fd', 'flags')])},
           {'call': 'llseek', 'reason': set([('fd', 'flags')])},
           {'call': 'preadv64v2', 'reason': set([('fd', 'flags')])},
           {'call': 'readv', 'reason': set([('fd', 'flags')])},
           {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
           {'call': 'fstatfs64', 'reason': set([('fd', 'flags')])},
           {'call': 'write', 'reason': set([('fd', 'flags')])},
           {'call': 'mq_notify', 'reason': set([('fd', 'flags')])},
           {'call': 'sendfile', 'reason': set([('fd', 'flags')])},
           {'call': 'bind', 'reason': set([('fd', 'flags')])},
           {'call': 'flistxattr', 'reason': set([('fd', 'flags')])},
           {'call': 'sendfile64', 'reason': set([('fd', 'flags')])}],
 'lsetxattr': [{'call': 'eventfd2',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'swapoff',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'pivot_root',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'memfd_create',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'remap_file_pages',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'dup3',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'unshare',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'epoll_create1',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'epoll_ctl',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'flock',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'openat',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'lookup_dcookie',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'uselib',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'accept4',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'socketpair',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'getcwd',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'shmat',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'socket',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'pipe2',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'perf_event_open',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'shmdt',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'quotactl',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'acct',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'open',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'dup',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'setns',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'shmctl',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'swapon',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'mmap_pgoff',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'mq_open',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'open_by_handle_at',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])}],
 'lstat': [{'call': 'stat',
            'reason': set([('__old_kernel_stat', 'st_ino'),
                           ('__old_kernel_stat', 'st_nlink')])},
           {'call': 'fstat',
            'reason': set([('__old_kernel_stat', 'st_ino'),
                           ('__old_kernel_stat', 'st_nlink'),
                           ('kstat', 'dev'),
                           ('kstat', 'ino'),
                           ('kstat', 'nlink'),
                           ('kstat', 'rdev')])},
           {'call': 'newfstat',
            'reason': set([('kstat', 'dev'),
                           ('kstat', 'ino'),
                           ('kstat', 'nlink'),
                           ('kstat', 'rdev')])}],
 'madvise': [{'call': 'remap_file_pages',
              'reason': set([('vm_area_struct', 'vm_end'),
                             ('vm_area_struct', 'vm_start')])},
             {'call': 'shmdt',
              'reason': set([('vm_area_struct', 'vm_end'),
                             ('vm_area_struct', 'vm_start')])},
             {'call': 'brk',
              'reason': set([('vm_area_struct', 'vm_end'),
                             ('vm_area_struct', 'vm_start')])},
             {'call': 'get_mempolicy',
              'reason': set([('vm_area_struct', 'vm_end'),
                             ('vm_area_struct', 'vm_start')])},
             {'call': 'munlockall',
              'reason': set([('vm_area_struct', 'vm_end'),
                             ('vm_area_struct', 'vm_start')])},
             {'call': 'pkey_mprotect',
              'reason': set([('vm_area_struct', 'vm_end'),
                             ('vm_area_struct', 'vm_start')])},
             {'call': 'mprotect',
              'reason': set([('vm_area_struct', 'vm_end'),
                             ('vm_area_struct', 'vm_start')])},
             {'call': 'mremap',
              'reason': set([('vm_area_struct', 'vm_end'),
                             ('vm_area_struct', 'vm_start')])},
             {'call': 'prctl',
              'reason': set([('vm_area_struct', 'vm_end'),
                             ('vm_area_struct', 'vm_start')])},
             {'call': 'munlock',
              'reason': set([('vm_area_struct', 'vm_end'),
                             ('vm_area_struct', 'vm_start')])},
             {'call': 'mincore',
              'reason': set([('vm_area_struct', 'vm_end'),
                             ('vm_area_struct', 'vm_start')])},
             {'call': 'mlockall',
              'reason': set([('vm_area_struct', 'vm_end'),
                             ('vm_area_struct', 'vm_start')])}],
 'migrate_pages': [{'call': 'keyctl',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'rt_sigtimedwait',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'msgrcv',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'kill',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'sched_getaffinity',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'sched_setparam',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'ioprio_set',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'getppid',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'ioperm',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'mq_timedreceive',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'capget',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'sched_setaffinity',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'signal',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'setreuid',
                    'reason': set([('cred', 'euid'),
                                   ('cred', 'suid'),
                                   ('cred', 'uid')])},
                   {'call': 'semtimedop',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'umount',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'sched_rr_get_interval',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'rt_sigprocmask',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'setsid',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'sigaltstack',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'sched_setattr',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'getitimer',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'setpgid',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'getsid',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'prlimit64',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'perf_event_open',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'rt_sigaction',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'getpgid',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'getpriority',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'sigaction',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'setns',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'fork',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'get_robust_list',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'mq_timedsend',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'sched_getscheduler',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'ptrace',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'sched_getattr',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'getrusage',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'sched_setscheduler',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'setresuid',
                    'reason': set([('cred', 'euid'),
                                   ('cred', 'suid'),
                                   ('cred', 'uid')])},
                   {'call': 'setitimer',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'ioprio_get',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'vfork',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'setuid',
                    'reason': set([('cred', 'euid'),
                                   ('cred', 'suid'),
                                   ('cred', 'uid')])},
                   {'call': 'prctl',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'move_pages',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'setpriority',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'clone',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])},
                   {'call': 'sched_getparam',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'cred'),
                                   ('task_struct', 'real_cred')])}],
 'mincore': [{'call': 'keyctl',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'rt_sigtimedwait',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'msgrcv',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'kill',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'sched_getaffinity',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'sched_setparam',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'ioprio_set',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'remap_file_pages',
              'reason': set([('vm_area_struct', 'vm_start')])},
             {'call': 'getppid',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'ioperm', 'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'mq_timedreceive',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'capget',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'sched_setaffinity',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'signal',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'semtimedop',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'umount',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'sched_rr_get_interval',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'rt_sigprocmask',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'setsid',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'sigaltstack',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'sched_setattr',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'migrate_pages',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'getitimer',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'setpgid',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'getsid',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'prlimit64',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'perf_event_open',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'shmdt',
              'reason': set([('vm_area_struct', 'vm_start')])},
             {'call': 'rt_sigaction',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'getpgid',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'brk', 'reason': set([('vm_area_struct', 'vm_start')])},
             {'call': 'getpriority',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'sigaction',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'setns',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'fork',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'get_mempolicy',
              'reason': set([('vm_area_struct', 'vm_start')])},
             {'call': 'get_robust_list',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'mq_timedsend',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'sched_getscheduler',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'ptrace',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'munlockall',
              'reason': set([('vm_area_struct', 'vm_start')])},
             {'call': 'pkey_mprotect',
              'reason': set([('vm_area_struct', 'vm_start')])},
             {'call': 'madvise',
              'reason': set([('vm_area_struct', 'vm_start')])},
             {'call': 'sched_getattr',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'getrusage',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'sched_setscheduler',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'setitimer',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'ioprio_get',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'vfork',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'mprotect',
              'reason': set([('vm_area_struct', 'vm_start')])},
             {'call': 'mremap',
              'reason': set([('vm_area_struct', 'vm_start')])},
             {'call': 'prctl',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm'),
                             ('vm_area_struct', 'vm_start')])},
             {'call': 'move_pages',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'munlock',
              'reason': set([('vm_area_struct', 'vm_start')])},
             {'call': 'setpriority',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'clone',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'sched_getparam',
              'reason': set([('mm_segment_t', 'seg'),
                             ('task_struct', 'mm')])},
             {'call': 'mlockall',
              'reason': set([('vm_area_struct', 'vm_start')])}],
 'mkdirat': [{'call': 'syncfs', 'reason': set([('super_block', 's_flags')])},
             {'call': 'ustat', 'reason': set([('super_block', 's_flags')])},
             {'call': 'umount', 'reason': set([('super_block', 's_flags')])},
             {'call': 'quotactl',
              'reason': set([('super_block', 's_flags')])},
             {'call': 'swapon', 'reason': set([('super_block', 's_flags')])}],
 'mknodat': [{'call': 'syncfs', 'reason': set([('super_block', 's_flags')])},
             {'call': 'ustat', 'reason': set([('super_block', 's_flags')])},
             {'call': 'umount', 'reason': set([('super_block', 's_flags')])},
             {'call': 'quotactl',
              'reason': set([('super_block', 's_flags')])},
             {'call': 'swapon', 'reason': set([('super_block', 's_flags')])}],
 'mlock': [{'call': 'keyctl', 'reason': set([('task_struct', 'mm')])},
           {'call': 'rt_sigtimedwait',
            'reason': set([('task_struct', 'mm')])},
           {'call': 'msgrcv', 'reason': set([('task_struct', 'mm')])},
           {'call': 'kill', 'reason': set([('task_struct', 'mm')])},
           {'call': 'sched_getaffinity',
            'reason': set([('task_struct', 'mm')])},
           {'call': 'sched_setparam', 'reason': set([('task_struct', 'mm')])},
           {'call': 'ioprio_set', 'reason': set([('task_struct', 'mm')])},
           {'call': 'getppid', 'reason': set([('task_struct', 'mm')])},
           {'call': 'mq_timedreceive',
            'reason': set([('task_struct', 'mm')])},
           {'call': 'capget', 'reason': set([('task_struct', 'mm')])},
           {'call': 'sched_setaffinity',
            'reason': set([('task_struct', 'mm')])},
           {'call': 'signal', 'reason': set([('task_struct', 'mm')])},
           {'call': 'semtimedop', 'reason': set([('task_struct', 'mm')])},
           {'call': 'umount', 'reason': set([('task_struct', 'mm')])},
           {'call': 'sched_rr_get_interval',
            'reason': set([('task_struct', 'mm')])},
           {'call': 'rt_sigprocmask', 'reason': set([('task_struct', 'mm')])},
           {'call': 'setsid', 'reason': set([('task_struct', 'mm')])},
           {'call': 'sigaltstack', 'reason': set([('task_struct', 'mm')])},
           {'call': 'sched_setattr', 'reason': set([('task_struct', 'mm')])},
           {'call': 'migrate_pages', 'reason': set([('task_struct', 'mm')])},
           {'call': 'getitimer', 'reason': set([('task_struct', 'mm')])},
           {'call': 'setpgid', 'reason': set([('task_struct', 'mm')])},
           {'call': 'getsid', 'reason': set([('task_struct', 'mm')])},
           {'call': 'prlimit64', 'reason': set([('task_struct', 'mm')])},
           {'call': 'perf_event_open',
            'reason': set([('task_struct', 'mm')])},
           {'call': 'rt_sigaction', 'reason': set([('task_struct', 'mm')])},
           {'call': 'getpgid', 'reason': set([('task_struct', 'mm')])},
           {'call': 'getpriority', 'reason': set([('task_struct', 'mm')])},
           {'call': 'sigaction', 'reason': set([('task_struct', 'mm')])},
           {'call': 'setns', 'reason': set([('task_struct', 'mm')])},
           {'call': 'fork', 'reason': set([('task_struct', 'mm')])},
           {'call': 'get_robust_list',
            'reason': set([('task_struct', 'mm')])},
           {'call': 'mq_timedsend', 'reason': set([('task_struct', 'mm')])},
           {'call': 'sched_getscheduler',
            'reason': set([('task_struct', 'mm')])},
           {'call': 'ptrace', 'reason': set([('task_struct', 'mm')])},
           {'call': 'sched_getattr', 'reason': set([('task_struct', 'mm')])},
           {'call': 'getrusage', 'reason': set([('task_struct', 'mm')])},
           {'call': 'sched_setscheduler',
            'reason': set([('task_struct', 'mm')])},
           {'call': 'setitimer', 'reason': set([('task_struct', 'mm')])},
           {'call': 'ioprio_get', 'reason': set([('task_struct', 'mm')])},
           {'call': 'vfork', 'reason': set([('task_struct', 'mm')])},
           {'call': 'prctl', 'reason': set([('task_struct', 'mm')])},
           {'call': 'move_pages', 'reason': set([('task_struct', 'mm')])},
           {'call': 'setpriority', 'reason': set([('task_struct', 'mm')])},
           {'call': 'clone', 'reason': set([('task_struct', 'mm')])},
           {'call': 'sched_getparam', 'reason': set([('task_struct', 'mm')])}],
 'mlock2': [{'call': 'keyctl', 'reason': set([('task_struct', 'mm')])},
            {'call': 'rt_sigtimedwait',
             'reason': set([('task_struct', 'mm')])},
            {'call': 'msgrcv', 'reason': set([('task_struct', 'mm')])},
            {'call': 'kill', 'reason': set([('task_struct', 'mm')])},
            {'call': 'sched_getaffinity',
             'reason': set([('task_struct', 'mm')])},
            {'call': 'sched_setparam',
             'reason': set([('task_struct', 'mm')])},
            {'call': 'ioprio_set', 'reason': set([('task_struct', 'mm')])},
            {'call': 'getppid', 'reason': set([('task_struct', 'mm')])},
            {'call': 'mq_timedreceive',
             'reason': set([('task_struct', 'mm')])},
            {'call': 'capget', 'reason': set([('task_struct', 'mm')])},
            {'call': 'sched_setaffinity',
             'reason': set([('task_struct', 'mm')])},
            {'call': 'signal', 'reason': set([('task_struct', 'mm')])},
            {'call': 'semtimedop', 'reason': set([('task_struct', 'mm')])},
            {'call': 'umount', 'reason': set([('task_struct', 'mm')])},
            {'call': 'sched_rr_get_interval',
             'reason': set([('task_struct', 'mm')])},
            {'call': 'rt_sigprocmask',
             'reason': set([('task_struct', 'mm')])},
            {'call': 'setsid', 'reason': set([('task_struct', 'mm')])},
            {'call': 'sigaltstack', 'reason': set([('task_struct', 'mm')])},
            {'call': 'sched_setattr', 'reason': set([('task_struct', 'mm')])},
            {'call': 'migrate_pages', 'reason': set([('task_struct', 'mm')])},
            {'call': 'getitimer', 'reason': set([('task_struct', 'mm')])},
            {'call': 'setpgid', 'reason': set([('task_struct', 'mm')])},
            {'call': 'getsid', 'reason': set([('task_struct', 'mm')])},
            {'call': 'prlimit64', 'reason': set([('task_struct', 'mm')])},
            {'call': 'perf_event_open',
             'reason': set([('task_struct', 'mm')])},
            {'call': 'rt_sigaction', 'reason': set([('task_struct', 'mm')])},
            {'call': 'getpgid', 'reason': set([('task_struct', 'mm')])},
            {'call': 'getpriority', 'reason': set([('task_struct', 'mm')])},
            {'call': 'sigaction', 'reason': set([('task_struct', 'mm')])},
            {'call': 'setns', 'reason': set([('task_struct', 'mm')])},
            {'call': 'fork', 'reason': set([('task_struct', 'mm')])},
            {'call': 'get_robust_list',
             'reason': set([('task_struct', 'mm')])},
            {'call': 'mq_timedsend', 'reason': set([('task_struct', 'mm')])},
            {'call': 'sched_getscheduler',
             'reason': set([('task_struct', 'mm')])},
            {'call': 'ptrace', 'reason': set([('task_struct', 'mm')])},
            {'call': 'sched_getattr', 'reason': set([('task_struct', 'mm')])},
            {'call': 'getrusage', 'reason': set([('task_struct', 'mm')])},
            {'call': 'sched_setscheduler',
             'reason': set([('task_struct', 'mm')])},
            {'call': 'setitimer', 'reason': set([('task_struct', 'mm')])},
            {'call': 'ioprio_get', 'reason': set([('task_struct', 'mm')])},
            {'call': 'vfork', 'reason': set([('task_struct', 'mm')])},
            {'call': 'prctl', 'reason': set([('task_struct', 'mm')])},
            {'call': 'move_pages', 'reason': set([('task_struct', 'mm')])},
            {'call': 'setpriority', 'reason': set([('task_struct', 'mm')])},
            {'call': 'clone', 'reason': set([('task_struct', 'mm')])},
            {'call': 'sched_getparam',
             'reason': set([('task_struct', 'mm')])}],
 'mlockall': [{'call': 'keyctl',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'rt_sigtimedwait',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'msgrcv',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'kill',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'swapoff', 'reason': set([('mm_struct', 'total_vm')])},
              {'call': 'sched_getaffinity',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'sched_setparam',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'ioprio_set',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'personality',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'remap_file_pages',
               'reason': set([('mm_struct', 'total_vm'),
                              ('vm_area_struct', 'vm_end'),
                              ('vm_area_struct', 'vm_start')])},
              {'call': 'io_getevents',
               'reason': set([('mm_struct', 'total_vm')])},
              {'call': 'getppid',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'mq_timedreceive',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'capget',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'sched_setaffinity',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'signal',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'semtimedop',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'umount',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'sched_rr_get_interval',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'rt_sigprocmask',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'setsid',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'sigaltstack',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'sched_setattr',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'migrate_pages',
               'reason': set([('mm_struct', 'total_vm'),
                              ('task_struct', 'personality')])},
              {'call': 'getitimer',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'setpgid',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'getsid',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'prlimit64',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'perf_event_open',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'shmdt',
               'reason': set([('mm_struct', 'total_vm'),
                              ('vm_area_struct', 'vm_end'),
                              ('vm_area_struct', 'vm_start')])},
              {'call': 'rt_sigaction',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'getpgid',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'brk',
               'reason': set([('mm_struct', 'total_vm'),
                              ('vm_area_struct', 'vm_end'),
                              ('vm_area_struct', 'vm_start')])},
              {'call': 'getpriority',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'sigaction',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'setns',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'fork',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'get_mempolicy',
               'reason': set([('mm_struct', 'total_vm'),
                              ('vm_area_struct', 'vm_end'),
                              ('vm_area_struct', 'vm_start')])},
              {'call': 'get_robust_list',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'mq_timedsend',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'sched_getscheduler',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'ptrace',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'munlockall',
               'reason': set([('vm_area_struct', 'vm_end'),
                              ('vm_area_struct', 'vm_start')])},
              {'call': 'pkey_mprotect',
               'reason': set([('vm_area_struct', 'vm_end'),
                              ('vm_area_struct', 'vm_start')])},
              {'call': 'madvise',
               'reason': set([('vm_area_struct', 'vm_end'),
                              ('vm_area_struct', 'vm_start')])},
              {'call': 'sched_getattr',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'getrusage',
               'reason': set([('mm_struct', 'total_vm'),
                              ('task_struct', 'personality')])},
              {'call': 'sched_setscheduler',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'setitimer',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'ioprio_get',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'vfork',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'io_setup',
               'reason': set([('mm_struct', 'total_vm')])},
              {'call': 'mprotect',
               'reason': set([('vm_area_struct', 'vm_end'),
                              ('vm_area_struct', 'vm_start')])},
              {'call': 'mremap',
               'reason': set([('mm_struct', 'total_vm'),
                              ('vm_area_struct', 'vm_end'),
                              ('vm_area_struct', 'vm_start')])},
              {'call': 'io_destroy',
               'reason': set([('mm_struct', 'total_vm')])},
              {'call': 'mbind', 'reason': set([('mm_struct', 'total_vm')])},
              {'call': 'prctl',
               'reason': set([('mm_struct', 'total_vm'),
                              ('task_struct', 'personality'),
                              ('vm_area_struct', 'vm_end'),
                              ('vm_area_struct', 'vm_start')])},
              {'call': 'move_pages',
               'reason': set([('mm_struct', 'total_vm'),
                              ('task_struct', 'personality')])},
              {'call': 'modify_ldt',
               'reason': set([('mm_struct', 'total_vm')])},
              {'call': 'munlock',
               'reason': set([('vm_area_struct', 'vm_end'),
                              ('vm_area_struct', 'vm_start')])},
              {'call': 'setpriority',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'mincore',
               'reason': set([('mm_struct', 'total_vm'),
                              ('vm_area_struct', 'vm_end'),
                              ('vm_area_struct', 'vm_start')])},
              {'call': 'clone',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'sched_getparam',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'io_cancel',
               'reason': set([('mm_struct', 'total_vm')])}],
 'mmap_pgoff': [{'call': 'eventfd2', 'reason': set([('file', 'f_op')])},
                {'call': 'swapoff', 'reason': set([('file', 'f_op')])},
                {'call': 'memfd_create', 'reason': set([('file', 'f_op')])},
                {'call': 'remap_file_pages',
                 'reason': set([('file', 'f_op')])},
                {'call': 'dup3', 'reason': set([('file', 'f_op')])},
                {'call': 'epoll_create1', 'reason': set([('file', 'f_op')])},
                {'call': 'epoll_ctl', 'reason': set([('file', 'f_op')])},
                {'call': 'flock', 'reason': set([('file', 'f_op')])},
                {'call': 'openat', 'reason': set([('file', 'f_op')])},
                {'call': 'uselib', 'reason': set([('file', 'f_op')])},
                {'call': 'accept4', 'reason': set([('file', 'f_op')])},
                {'call': 'socketpair', 'reason': set([('file', 'f_op')])},
                {'call': 'shmat', 'reason': set([('file', 'f_op')])},
                {'call': 'socket', 'reason': set([('file', 'f_op')])},
                {'call': 'pipe2', 'reason': set([('file', 'f_op')])},
                {'call': 'perf_event_open',
                 'reason': set([('file', 'f_op')])},
                {'call': 'shmdt', 'reason': set([('file', 'f_op')])},
                {'call': 'acct', 'reason': set([('file', 'f_op')])},
                {'call': 'open', 'reason': set([('file', 'f_op')])},
                {'call': 'dup', 'reason': set([('file', 'f_op')])},
                {'call': 'setns', 'reason': set([('file', 'f_op')])},
                {'call': 'shmctl', 'reason': set([('file', 'f_op')])},
                {'call': 'swapon', 'reason': set([('file', 'f_op')])},
                {'call': 'mq_open', 'reason': set([('file', 'f_op')])},
                {'call': 'open_by_handle_at',
                 'reason': set([('file', 'f_op')])}],
 'modify_ldt': [{'call': 'swapoff', 'reason': set([('mm_context_t', 'ldt')])},
                {'call': 'remap_file_pages',
                 'reason': set([('mm_context_t', 'ldt')])},
                {'call': 'io_getevents',
                 'reason': set([('mm_context_t', 'ldt')])},
                {'call': 'get_thread_area',
                 'reason': set([('user_desc', 'base_addr'),
                                ('user_desc', 'contents'),
                                ('user_desc', 'entry_number'),
                                ('user_desc', 'limit'),
                                ('user_desc', 'limit_in_pages'),
                                ('user_desc', 'read_exec_only'),
                                ('user_desc', 'seg_32bit'),
                                ('user_desc', 'seg_not_present'),
                                ('user_desc', 'useable')])},
                {'call': 'migrate_pages',
                 'reason': set([('mm_context_t', 'ldt')])},
                {'call': 'shmdt', 'reason': set([('mm_context_t', 'ldt')])},
                {'call': 'brk', 'reason': set([('mm_context_t', 'ldt')])},
                {'call': 'get_mempolicy',
                 'reason': set([('mm_context_t', 'ldt')])},
                {'call': 'getrusage',
                 'reason': set([('mm_context_t', 'ldt')])},
                {'call': 'io_setup',
                 'reason': set([('mm_context_t', 'ldt')])},
                {'call': 'mremap', 'reason': set([('mm_context_t', 'ldt')])},
                {'call': 'io_destroy',
                 'reason': set([('mm_context_t', 'ldt')])},
                {'call': 'mbind', 'reason': set([('mm_context_t', 'ldt')])},
                {'call': 'prctl', 'reason': set([('mm_context_t', 'ldt')])},
                {'call': 'move_pages',
                 'reason': set([('mm_context_t', 'ldt')])},
                {'call': 'mincore', 'reason': set([('mm_context_t', 'ldt')])},
                {'call': 'set_thread_area',
                 'reason': set([('user_desc', 'base_addr'),
                                ('user_desc', 'contents'),
                                ('user_desc', 'entry_number'),
                                ('user_desc', 'limit'),
                                ('user_desc', 'limit_in_pages'),
                                ('user_desc', 'read_exec_only'),
                                ('user_desc', 'seg_32bit'),
                                ('user_desc', 'seg_not_present'),
                                ('user_desc', 'useable')])},
                {'call': 'io_cancel',
                 'reason': set([('mm_context_t', 'ldt')])}],
 'mount': [{'call': 'keyctl',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'rt_sigtimedwait',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'msgrcv',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'kill', 'reason': set([('task_struct', 'personality')])},
           {'call': 'sched_getaffinity',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'sched_setparam',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'ioprio_set',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'personality',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'getppid',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'mq_timedreceive',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'capget',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'sched_setaffinity',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'signal',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'semtimedop',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'umount',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'sched_rr_get_interval',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'rt_sigprocmask',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'setsid',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'sigaltstack',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'sched_setattr',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'migrate_pages',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'getitimer',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'setpgid',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'getsid',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'prlimit64',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'perf_event_open',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'rt_sigaction',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'getpgid',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'getpriority',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'sigaction',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'setns', 'reason': set([('task_struct', 'personality')])},
           {'call': 'fork', 'reason': set([('task_struct', 'personality')])},
           {'call': 'get_robust_list',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'mq_timedsend',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'sched_getscheduler',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'ptrace',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'sched_getattr',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'getrusage',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'sched_setscheduler',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'setitimer',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'ioprio_get',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'vfork', 'reason': set([('task_struct', 'personality')])},
           {'call': 'prctl', 'reason': set([('task_struct', 'personality')])},
           {'call': 'move_pages',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'setpriority',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'clone', 'reason': set([('task_struct', 'personality')])},
           {'call': 'sched_getparam',
            'reason': set([('task_struct', 'personality')])}],
 'mprotect': [{'call': 'keyctl',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'rt_sigtimedwait',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'msgrcv',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'kill',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'sched_getaffinity',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'sched_setparam',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'ioprio_set',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'personality',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'remap_file_pages',
               'reason': set([('vm_area_struct', 'vm_end'),
                              ('vm_area_struct', 'vm_flags'),
                              ('vm_area_struct', 'vm_start')])},
              {'call': 'getppid',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'mq_timedreceive',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'capget',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'sched_setaffinity',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'signal',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'semtimedop',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'umount',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'sched_rr_get_interval',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'rt_sigprocmask',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'setsid',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'sigaltstack',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'sched_setattr',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'migrate_pages',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'getitimer',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'setpgid',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'getsid',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'prlimit64',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'perf_event_open',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'shmdt',
               'reason': set([('vm_area_struct', 'vm_end'),
                              ('vm_area_struct', 'vm_flags'),
                              ('vm_area_struct', 'vm_start')])},
              {'call': 'rt_sigaction',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'getpgid',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'brk',
               'reason': set([('vm_area_struct', 'vm_end'),
                              ('vm_area_struct', 'vm_flags'),
                              ('vm_area_struct', 'vm_start')])},
              {'call': 'getpriority',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'sigaction',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'setns',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'fork',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'get_mempolicy',
               'reason': set([('vm_area_struct', 'vm_end'),
                              ('vm_area_struct', 'vm_flags'),
                              ('vm_area_struct', 'vm_start')])},
              {'call': 'get_robust_list',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'mq_timedsend',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'sched_getscheduler',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'ptrace',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'munlockall',
               'reason': set([('vm_area_struct', 'vm_end'),
                              ('vm_area_struct', 'vm_flags'),
                              ('vm_area_struct', 'vm_start')])},
              {'call': 'pkey_mprotect',
               'reason': set([('vm_area_struct', 'vm_end'),
                              ('vm_area_struct', 'vm_flags'),
                              ('vm_area_struct', 'vm_start')])},
              {'call': 'madvise',
               'reason': set([('vm_area_struct', 'vm_end'),
                              ('vm_area_struct', 'vm_flags'),
                              ('vm_area_struct', 'vm_start')])},
              {'call': 'sched_getattr',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'getrusage',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'sched_setscheduler',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'setitimer',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'ioprio_get',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'vfork',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'mremap',
               'reason': set([('vm_area_struct', 'vm_end'),
                              ('vm_area_struct', 'vm_flags'),
                              ('vm_area_struct', 'vm_start')])},
              {'call': 'prctl',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality'),
                              ('vm_area_struct', 'vm_end'),
                              ('vm_area_struct', 'vm_flags'),
                              ('vm_area_struct', 'vm_start')])},
              {'call': 'move_pages',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'munlock',
               'reason': set([('vm_area_struct', 'vm_end'),
                              ('vm_area_struct', 'vm_flags'),
                              ('vm_area_struct', 'vm_start')])},
              {'call': 'setpriority',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'mincore',
               'reason': set([('vm_area_struct', 'vm_end'),
                              ('vm_area_struct', 'vm_flags'),
                              ('vm_area_struct', 'vm_start')])},
              {'call': 'clone',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'sched_getparam',
               'reason': set([('task_struct', 'mm'),
                              ('task_struct', 'personality')])},
              {'call': 'mlockall',
               'reason': set([('vm_area_struct', 'vm_end'),
                              ('vm_area_struct', 'vm_flags'),
                              ('vm_area_struct', 'vm_start')])}],
 'mq_getsetattr': [{'call': 'eventfd2', 'reason': set([('file', 'f_op')])},
                   {'call': 'swapoff', 'reason': set([('file', 'f_op')])},
                   {'call': 'memfd_create',
                    'reason': set([('file', 'f_op')])},
                   {'call': 'remap_file_pages',
                    'reason': set([('file', 'f_op')])},
                   {'call': 'dup3', 'reason': set([('file', 'f_op')])},
                   {'call': 'mq_timedreceive',
                    'reason': set([('mq_attr', 'mq_flags')])},
                   {'call': 'epoll_create1',
                    'reason': set([('file', 'f_op')])},
                   {'call': 'epoll_ctl', 'reason': set([('file', 'f_op')])},
                   {'call': 'flock', 'reason': set([('file', 'f_op')])},
                   {'call': 'openat', 'reason': set([('file', 'f_op')])},
                   {'call': 'uselib', 'reason': set([('file', 'f_op')])},
                   {'call': 'accept4', 'reason': set([('file', 'f_op')])},
                   {'call': 'socketpair', 'reason': set([('file', 'f_op')])},
                   {'call': 'shmat', 'reason': set([('file', 'f_op')])},
                   {'call': 'socket', 'reason': set([('file', 'f_op')])},
                   {'call': 'pipe2', 'reason': set([('file', 'f_op')])},
                   {'call': 'perf_event_open',
                    'reason': set([('file', 'f_op')])},
                   {'call': 'shmdt', 'reason': set([('file', 'f_op')])},
                   {'call': 'acct', 'reason': set([('file', 'f_op')])},
                   {'call': 'open', 'reason': set([('file', 'f_op')])},
                   {'call': 'dup', 'reason': set([('file', 'f_op')])},
                   {'call': 'setns', 'reason': set([('file', 'f_op')])},
                   {'call': 'mq_timedsend',
                    'reason': set([('mq_attr', 'mq_flags')])},
                   {'call': 'shmctl', 'reason': set([('file', 'f_op')])},
                   {'call': 'swapon', 'reason': set([('file', 'f_op')])},
                   {'call': 'mmap_pgoff', 'reason': set([('file', 'f_op')])},
                   {'call': 'mq_notify',
                    'reason': set([('mq_attr', 'mq_flags')])},
                   {'call': 'mq_open',
                    'reason': set([('file', 'f_op'),
                                   ('mq_attr', 'mq_flags')])},
                   {'call': 'open_by_handle_at',
                    'reason': set([('file', 'f_op')])}],
 'mq_notify': [{'call': 'rt_sigtimedwait',
                'reason': set([('sigval', 'sival_ptr')])},
               {'call': 'eventfd2', 'reason': set([('file', 'f_op')])},
               {'call': 'swapoff', 'reason': set([('file', 'f_op')])},
               {'call': 'memfd_create', 'reason': set([('file', 'f_op')])},
               {'call': 'remap_file_pages',
                'reason': set([('file', 'f_op')])},
               {'call': 'dup3', 'reason': set([('file', 'f_op')])},
               {'call': 'mq_timedreceive',
                'reason': set([('mqueue_inode_info', 'notify_owner'),
                               ('sigevent', 'sigev_notify'),
                               ('sigevent', 'sigev_signo'),
                               ('sigval', 'sival_ptr')])},
               {'call': 'timer_create',
                'reason': set([('sigevent', 'sigev_notify'),
                               ('sigevent', 'sigev_signo'),
                               ('sigval', 'sival_ptr')])},
               {'call': 'epoll_create1', 'reason': set([('file', 'f_op')])},
               {'call': 'rt_sigqueueinfo',
                'reason': set([('sigval', 'sival_ptr')])},
               {'call': 'epoll_ctl', 'reason': set([('file', 'f_op')])},
               {'call': 'flock', 'reason': set([('file', 'f_op')])},
               {'call': 'tgkill', 'reason': set([('sigval', 'sival_ptr')])},
               {'call': 'openat', 'reason': set([('file', 'f_op')])},
               {'call': 'uselib', 'reason': set([('file', 'f_op')])},
               {'call': 'accept4', 'reason': set([('file', 'f_op')])},
               {'call': 'socketpair', 'reason': set([('file', 'f_op')])},
               {'call': 'shmat', 'reason': set([('file', 'f_op')])},
               {'call': 'socket', 'reason': set([('file', 'f_op')])},
               {'call': 'pipe2', 'reason': set([('file', 'f_op')])},
               {'call': 'perf_event_open', 'reason': set([('file', 'f_op')])},
               {'call': 'shmdt', 'reason': set([('file', 'f_op')])},
               {'call': 'acct', 'reason': set([('file', 'f_op')])},
               {'call': 'open', 'reason': set([('file', 'f_op')])},
               {'call': 'rt_tgsigqueueinfo',
                'reason': set([('sigval', 'sival_ptr')])},
               {'call': 'mq_getsetattr',
                'reason': set([('mqueue_inode_info', 'notify_owner'),
                               ('sigevent', 'sigev_notify'),
                               ('sigevent', 'sigev_signo'),
                               ('sigval', 'sival_ptr')])},
               {'call': 'dup', 'reason': set([('file', 'f_op')])},
               {'call': 'setns', 'reason': set([('file', 'f_op')])},
               {'call': 'mq_timedsend',
                'reason': set([('mqueue_inode_info', 'notify_owner'),
                               ('sigevent', 'sigev_notify'),
                               ('sigevent', 'sigev_signo'),
                               ('sigval', 'sival_ptr')])},
               {'call': 'shmctl', 'reason': set([('file', 'f_op')])},
               {'call': 'swapon', 'reason': set([('file', 'f_op')])},
               {'call': 'mmap_pgoff', 'reason': set([('file', 'f_op')])},
               {'call': 'rt_sigreturn',
                'reason': set([('sigval', 'sival_ptr')])},
               {'call': 'tkill', 'reason': set([('sigval', 'sival_ptr')])},
               {'call': 'mq_open', 'reason': set([('file', 'f_op')])},
               {'call': 'open_by_handle_at',
                'reason': set([('file', 'f_op')])}],
 'mq_open': [{'call': 'sysfs', 'reason': set([('filename', 'name')])},
             {'call': 'eventfd2', 'reason': set([('path', 'dentry')])},
             {'call': 'mq_unlink', 'reason': set([('filename', 'name')])},
             {'call': 'swapoff',
              'reason': set([('filename', 'name'), ('path', 'dentry')])},
             {'call': 'pivot_root', 'reason': set([('path', 'dentry')])},
             {'call': 'memfd_create', 'reason': set([('path', 'dentry')])},
             {'call': 'remap_file_pages',
              'reason': set([('path', 'dentry')])},
             {'call': 'dup3', 'reason': set([('path', 'dentry')])},
             {'call': 'unshare', 'reason': set([('path', 'dentry')])},
             {'call': 'epoll_create1', 'reason': set([('path', 'dentry')])},
             {'call': 'epoll_ctl', 'reason': set([('path', 'dentry')])},
             {'call': 'flock', 'reason': set([('path', 'dentry')])},
             {'call': 'openat',
              'reason': set([('filename', 'name'), ('path', 'dentry')])},
             {'call': 'lookup_dcookie', 'reason': set([('path', 'dentry')])},
             {'call': 'uselib',
              'reason': set([('filename', 'name'), ('path', 'dentry')])},
             {'call': 'renameat2', 'reason': set([('filename', 'name')])},
             {'call': 'accept4', 'reason': set([('path', 'dentry')])},
             {'call': 'socketpair', 'reason': set([('path', 'dentry')])},
             {'call': 'getcwd', 'reason': set([('path', 'dentry')])},
             {'call': 'shmat', 'reason': set([('path', 'dentry')])},
             {'call': 'socket', 'reason': set([('path', 'dentry')])},
             {'call': 'symlinkat', 'reason': set([('filename', 'name')])},
             {'call': 'pipe2', 'reason': set([('path', 'dentry')])},
             {'call': 'perf_event_open', 'reason': set([('path', 'dentry')])},
             {'call': 'shmdt', 'reason': set([('path', 'dentry')])},
             {'call': 'quotactl',
              'reason': set([('filename', 'name'), ('path', 'dentry')])},
             {'call': 'acct',
              'reason': set([('filename', 'name'), ('path', 'dentry')])},
             {'call': 'open',
              'reason': set([('filename', 'name'), ('path', 'dentry')])},
             {'call': 'unlink', 'reason': set([('filename', 'name')])},
             {'call': 'rmdir', 'reason': set([('filename', 'name')])},
             {'call': 'dup', 'reason': set([('path', 'dentry')])},
             {'call': 'setns', 'reason': set([('path', 'dentry')])},
             {'call': 'shmctl', 'reason': set([('path', 'dentry')])},
             {'call': 'swapon',
              'reason': set([('filename', 'name'), ('path', 'dentry')])},
             {'call': 'mmap_pgoff', 'reason': set([('path', 'dentry')])},
             {'call': 'unlinkat', 'reason': set([('filename', 'name')])},
             {'call': 'open_by_handle_at',
              'reason': set([('path', 'dentry')])}],
 'mq_timedreceive': [{'call': 'msgrcv', 'reason': set([('msg_msg', 'm_ts')])},
                     {'call': 'eventfd2',
                      'reason': set([('file', 'f_flags'),
                                     ('file', 'f_mode'),
                                     ('file', 'f_op')])},
                     {'call': 'swapoff',
                      'reason': set([('file', 'f_flags'),
                                     ('file', 'f_mode'),
                                     ('file', 'f_op')])},
                     {'call': 'memfd_create',
                      'reason': set([('file', 'f_flags'),
                                     ('file', 'f_mode'),
                                     ('file', 'f_op')])},
                     {'call': 'remap_file_pages',
                      'reason': set([('file', 'f_flags'),
                                     ('file', 'f_mode'),
                                     ('file', 'f_op')])},
                     {'call': 'dup3',
                      'reason': set([('file', 'f_flags'),
                                     ('file', 'f_mode'),
                                     ('file', 'f_op')])},
                     {'call': 'epoll_create1',
                      'reason': set([('file', 'f_flags'),
                                     ('file', 'f_mode'),
                                     ('file', 'f_op')])},
                     {'call': 'epoll_ctl',
                      'reason': set([('file', 'f_flags'),
                                     ('file', 'f_mode'),
                                     ('file', 'f_op')])},
                     {'call': 'flock',
                      'reason': set([('file', 'f_flags'),
                                     ('file', 'f_mode'),
                                     ('file', 'f_op')])},
                     {'call': 'openat',
                      'reason': set([('file', 'f_flags'),
                                     ('file', 'f_mode'),
                                     ('file', 'f_op')])},
                     {'call': 'uselib',
                      'reason': set([('file', 'f_flags'),
                                     ('file', 'f_mode'),
                                     ('file', 'f_op')])},
                     {'call': 'accept4',
                      'reason': set([('file', 'f_flags'),
                                     ('file', 'f_mode'),
                                     ('file', 'f_op')])},
                     {'call': 'socketpair',
                      'reason': set([('file', 'f_flags'),
                                     ('file', 'f_mode'),
                                     ('file', 'f_op')])},
                     {'call': 'shmat',
                      'reason': set([('file', 'f_flags'),
                                     ('file', 'f_mode'),
                                     ('file', 'f_op')])},
                     {'call': 'socket',
                      'reason': set([('file', 'f_flags'),
                                     ('file', 'f_mode'),
                                     ('file', 'f_op')])},
                     {'call': 'pipe2',
                      'reason': set([('file', 'f_flags'),
                                     ('file', 'f_mode'),
                                     ('file', 'f_op')])},
                     {'call': 'perf_event_open',
                      'reason': set([('file', 'f_flags'),
                                     ('file', 'f_mode'),
                                     ('file', 'f_op')])},
                     {'call': 'shmdt',
                      'reason': set([('file', 'f_flags'),
                                     ('file', 'f_mode'),
                                     ('file', 'f_op')])},
                     {'call': 'acct',
                      'reason': set([('file', 'f_flags'),
                                     ('file', 'f_mode'),
                                     ('file', 'f_op')])},
                     {'call': 'open',
                      'reason': set([('file', 'f_flags'),
                                     ('file', 'f_mode'),
                                     ('file', 'f_op')])},
                     {'call': 'mq_getsetattr',
                      'reason': set([('file', 'f_flags'),
                                     ('mq_attr', 'mq_curmsgs'),
                                     ('mq_attr', 'mq_msgsize'),
                                     ('mqueue_inode_info', 'node_cache')])},
                     {'call': 'dup',
                      'reason': set([('file', 'f_flags'),
                                     ('file', 'f_mode'),
                                     ('file', 'f_op')])},
                     {'call': 'setns',
                      'reason': set([('file', 'f_flags'),
                                     ('file', 'f_mode'),
                                     ('file', 'f_op')])},
                     {'call': 'mq_timedsend',
                      'reason': set([('mq_attr', 'mq_curmsgs'),
                                     ('mq_attr', 'mq_msgsize'),
                                     ('mqueue_inode_info', 'node_cache'),
                                     ('msg_msg', 'm_ts')])},
                     {'call': 'shmctl',
                      'reason': set([('file', 'f_flags'),
                                     ('file', 'f_mode'),
                                     ('file', 'f_op')])},
                     {'call': 'swapon',
                      'reason': set([('file', 'f_flags'),
                                     ('file', 'f_mode'),
                                     ('file', 'f_op')])},
                     {'call': 'mmap_pgoff',
                      'reason': set([('file', 'f_flags'),
                                     ('file', 'f_mode'),
                                     ('file', 'f_op')])},
                     {'call': 'msgsnd', 'reason': set([('msg_msg', 'm_ts')])},
                     {'call': 'mq_notify',
                      'reason': set([('mq_attr', 'mq_curmsgs'),
                                     ('mq_attr', 'mq_msgsize'),
                                     ('mqueue_inode_info', 'node_cache')])},
                     {'call': 'mq_open',
                      'reason': set([('file', 'f_flags'),
                                     ('file', 'f_mode'),
                                     ('file', 'f_op'),
                                     ('mq_attr', 'mq_curmsgs'),
                                     ('mq_attr', 'mq_msgsize')])},
                     {'call': 'open_by_handle_at',
                      'reason': set([('file', 'f_flags'),
                                     ('file', 'f_mode'),
                                     ('file', 'f_op')])}],
 'mq_timedsend': [{'call': 'eventfd2',
                   'reason': set([('file', 'f_flags'),
                                  ('file', 'f_mode'),
                                  ('file', 'f_op')])},
                  {'call': 'swapoff',
                   'reason': set([('file', 'f_flags'),
                                  ('file', 'f_mode'),
                                  ('file', 'f_op')])},
                  {'call': 'memfd_create',
                   'reason': set([('file', 'f_flags'),
                                  ('file', 'f_mode'),
                                  ('file', 'f_op')])},
                  {'call': 'remap_file_pages',
                   'reason': set([('file', 'f_flags'),
                                  ('file', 'f_mode'),
                                  ('file', 'f_op')])},
                  {'call': 'dup3',
                   'reason': set([('file', 'f_flags'),
                                  ('file', 'f_mode'),
                                  ('file', 'f_op')])},
                  {'call': 'mq_timedreceive',
                   'reason': set([('mq_attr', 'mq_curmsgs'),
                                  ('mq_attr', 'mq_maxmsg'),
                                  ('mq_attr', 'mq_msgsize'),
                                  ('mqueue_inode_info', 'node_cache')])},
                  {'call': 'epoll_create1',
                   'reason': set([('file', 'f_flags'),
                                  ('file', 'f_mode'),
                                  ('file', 'f_op')])},
                  {'call': 'epoll_ctl',
                   'reason': set([('file', 'f_flags'),
                                  ('file', 'f_mode'),
                                  ('file', 'f_op')])},
                  {'call': 'flock',
                   'reason': set([('file', 'f_flags'),
                                  ('file', 'f_mode'),
                                  ('file', 'f_op')])},
                  {'call': 'openat',
                   'reason': set([('file', 'f_flags'),
                                  ('file', 'f_mode'),
                                  ('file', 'f_op')])},
                  {'call': 'uselib',
                   'reason': set([('file', 'f_flags'),
                                  ('file', 'f_mode'),
                                  ('file', 'f_op')])},
                  {'call': 'accept4',
                   'reason': set([('file', 'f_flags'),
                                  ('file', 'f_mode'),
                                  ('file', 'f_op')])},
                  {'call': 'socketpair',
                   'reason': set([('file', 'f_flags'),
                                  ('file', 'f_mode'),
                                  ('file', 'f_op')])},
                  {'call': 'shmat',
                   'reason': set([('file', 'f_flags'),
                                  ('file', 'f_mode'),
                                  ('file', 'f_op')])},
                  {'call': 'socket',
                   'reason': set([('file', 'f_flags'),
                                  ('file', 'f_mode'),
                                  ('file', 'f_op')])},
                  {'call': 'pipe2',
                   'reason': set([('file', 'f_flags'),
                                  ('file', 'f_mode'),
                                  ('file', 'f_op')])},
                  {'call': 'perf_event_open',
                   'reason': set([('file', 'f_flags'),
                                  ('file', 'f_mode'),
                                  ('file', 'f_op')])},
                  {'call': 'shmdt',
                   'reason': set([('file', 'f_flags'),
                                  ('file', 'f_mode'),
                                  ('file', 'f_op')])},
                  {'call': 'acct',
                   'reason': set([('file', 'f_flags'),
                                  ('file', 'f_mode'),
                                  ('file', 'f_op')])},
                  {'call': 'open',
                   'reason': set([('file', 'f_flags'),
                                  ('file', 'f_mode'),
                                  ('file', 'f_op')])},
                  {'call': 'mq_getsetattr',
                   'reason': set([('file', 'f_flags'),
                                  ('mq_attr', 'mq_curmsgs'),
                                  ('mq_attr', 'mq_maxmsg'),
                                  ('mq_attr', 'mq_msgsize'),
                                  ('mqueue_inode_info', 'node_cache')])},
                  {'call': 'dup',
                   'reason': set([('file', 'f_flags'),
                                  ('file', 'f_mode'),
                                  ('file', 'f_op')])},
                  {'call': 'setns',
                   'reason': set([('file', 'f_flags'),
                                  ('file', 'f_mode'),
                                  ('file', 'f_op')])},
                  {'call': 'shmctl',
                   'reason': set([('file', 'f_flags'),
                                  ('file', 'f_mode'),
                                  ('file', 'f_op')])},
                  {'call': 'swapon',
                   'reason': set([('file', 'f_flags'),
                                  ('file', 'f_mode'),
                                  ('file', 'f_op')])},
                  {'call': 'mmap_pgoff',
                   'reason': set([('file', 'f_flags'),
                                  ('file', 'f_mode'),
                                  ('file', 'f_op')])},
                  {'call': 'mq_notify',
                   'reason': set([('mq_attr', 'mq_curmsgs'),
                                  ('mq_attr', 'mq_maxmsg'),
                                  ('mq_attr', 'mq_msgsize'),
                                  ('mqueue_inode_info', 'node_cache')])},
                  {'call': 'mq_open',
                   'reason': set([('file', 'f_flags'),
                                  ('file', 'f_mode'),
                                  ('file', 'f_op'),
                                  ('mq_attr', 'mq_curmsgs'),
                                  ('mq_attr', 'mq_maxmsg'),
                                  ('mq_attr', 'mq_msgsize')])},
                  {'call': 'open_by_handle_at',
                   'reason': set([('file', 'f_flags'),
                                  ('file', 'f_mode'),
                                  ('file', 'f_op')])}],
 'mremap': [{'call': 'keyctl',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'rt_sigtimedwait',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'msgrcv',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'kill', 'reason': set([('task_struct', 'personality')])},
            {'call': 'swapoff', 'reason': set([('mm_struct', 'map_count')])},
            {'call': 'sched_getaffinity',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'sched_setparam',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'ioprio_set',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'personality',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'remap_file_pages',
             'reason': set([('mm_struct', 'map_count'),
                            ('vm_area_struct', 'vm_end'),
                            ('vm_area_struct', 'vm_file'),
                            ('vm_area_struct', 'vm_flags'),
                            ('vm_area_struct', 'vm_next'),
                            ('vm_area_struct', 'vm_ops'),
                            ('vm_area_struct', 'vm_pgoff'),
                            ('vm_area_struct', 'vm_start')])},
            {'call': 'io_getevents',
             'reason': set([('mm_struct', 'map_count')])},
            {'call': 'getppid',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'mq_timedreceive',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'capget',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'sched_setaffinity',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'signal',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'semtimedop',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'umount',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'sched_rr_get_interval',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'rt_sigprocmask',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'setsid',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'sigaltstack',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'sched_setattr',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'migrate_pages',
             'reason': set([('mm_struct', 'map_count'),
                            ('task_struct', 'personality')])},
            {'call': 'getitimer',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'setpgid',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'getsid',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'prlimit64',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'perf_event_open',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'shmdt',
             'reason': set([('mm_struct', 'map_count'),
                            ('vm_area_struct', 'vm_end'),
                            ('vm_area_struct', 'vm_file'),
                            ('vm_area_struct', 'vm_flags'),
                            ('vm_area_struct', 'vm_next'),
                            ('vm_area_struct', 'vm_ops'),
                            ('vm_area_struct', 'vm_pgoff'),
                            ('vm_area_struct', 'vm_start')])},
            {'call': 'rt_sigaction',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'getpgid',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'brk',
             'reason': set([('mm_struct', 'map_count'),
                            ('vm_area_struct', 'vm_end'),
                            ('vm_area_struct', 'vm_file'),
                            ('vm_area_struct', 'vm_flags'),
                            ('vm_area_struct', 'vm_next'),
                            ('vm_area_struct', 'vm_ops'),
                            ('vm_area_struct', 'vm_pgoff'),
                            ('vm_area_struct', 'vm_start')])},
            {'call': 'getpriority',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'sigaction',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'setns',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'fork', 'reason': set([('task_struct', 'personality')])},
            {'call': 'get_mempolicy',
             'reason': set([('mm_struct', 'map_count'),
                            ('vm_area_struct', 'vm_end'),
                            ('vm_area_struct', 'vm_file'),
                            ('vm_area_struct', 'vm_flags'),
                            ('vm_area_struct', 'vm_next'),
                            ('vm_area_struct', 'vm_ops'),
                            ('vm_area_struct', 'vm_pgoff'),
                            ('vm_area_struct', 'vm_start')])},
            {'call': 'get_robust_list',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'mq_timedsend',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'sched_getscheduler',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'ptrace',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'munlockall',
             'reason': set([('vm_area_struct', 'vm_end'),
                            ('vm_area_struct', 'vm_file'),
                            ('vm_area_struct', 'vm_flags'),
                            ('vm_area_struct', 'vm_next'),
                            ('vm_area_struct', 'vm_ops'),
                            ('vm_area_struct', 'vm_pgoff'),
                            ('vm_area_struct', 'vm_start')])},
            {'call': 'pkey_mprotect',
             'reason': set([('vm_area_struct', 'vm_end'),
                            ('vm_area_struct', 'vm_file'),
                            ('vm_area_struct', 'vm_flags'),
                            ('vm_area_struct', 'vm_next'),
                            ('vm_area_struct', 'vm_ops'),
                            ('vm_area_struct', 'vm_pgoff'),
                            ('vm_area_struct', 'vm_start')])},
            {'call': 'madvise',
             'reason': set([('vm_area_struct', 'vm_end'),
                            ('vm_area_struct', 'vm_file'),
                            ('vm_area_struct', 'vm_flags'),
                            ('vm_area_struct', 'vm_next'),
                            ('vm_area_struct', 'vm_ops'),
                            ('vm_area_struct', 'vm_pgoff'),
                            ('vm_area_struct', 'vm_start')])},
            {'call': 'sched_getattr',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'getrusage',
             'reason': set([('mm_struct', 'map_count'),
                            ('task_struct', 'personality')])},
            {'call': 'sched_setscheduler',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'setitimer',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'ioprio_get',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'vfork',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'io_setup', 'reason': set([('mm_struct', 'map_count')])},
            {'call': 'mprotect',
             'reason': set([('vm_area_struct', 'vm_end'),
                            ('vm_area_struct', 'vm_file'),
                            ('vm_area_struct', 'vm_flags'),
                            ('vm_area_struct', 'vm_next'),
                            ('vm_area_struct', 'vm_ops'),
                            ('vm_area_struct', 'vm_pgoff'),
                            ('vm_area_struct', 'vm_start')])},
            {'call': 'io_destroy',
             'reason': set([('mm_struct', 'map_count')])},
            {'call': 'mbind', 'reason': set([('mm_struct', 'map_count')])},
            {'call': 'prctl',
             'reason': set([('mm_struct', 'map_count'),
                            ('task_struct', 'personality'),
                            ('vm_area_struct', 'vm_end'),
                            ('vm_area_struct', 'vm_file'),
                            ('vm_area_struct', 'vm_flags'),
                            ('vm_area_struct', 'vm_next'),
                            ('vm_area_struct', 'vm_ops'),
                            ('vm_area_struct', 'vm_pgoff'),
                            ('vm_area_struct', 'vm_start')])},
            {'call': 'move_pages',
             'reason': set([('mm_struct', 'map_count'),
                            ('task_struct', 'personality')])},
            {'call': 'modify_ldt',
             'reason': set([('mm_struct', 'map_count')])},
            {'call': 'munlock',
             'reason': set([('vm_area_struct', 'vm_end'),
                            ('vm_area_struct', 'vm_file'),
                            ('vm_area_struct', 'vm_flags'),
                            ('vm_area_struct', 'vm_next'),
                            ('vm_area_struct', 'vm_ops'),
                            ('vm_area_struct', 'vm_pgoff'),
                            ('vm_area_struct', 'vm_start')])},
            {'call': 'setpriority',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'mincore',
             'reason': set([('mm_struct', 'map_count'),
                            ('vm_area_struct', 'vm_end'),
                            ('vm_area_struct', 'vm_file'),
                            ('vm_area_struct', 'vm_flags'),
                            ('vm_area_struct', 'vm_next'),
                            ('vm_area_struct', 'vm_ops'),
                            ('vm_area_struct', 'vm_pgoff'),
                            ('vm_area_struct', 'vm_start')])},
            {'call': 'clone',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'sched_getparam',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'io_cancel',
             'reason': set([('mm_struct', 'map_count')])},
            {'call': 'mlockall',
             'reason': set([('vm_area_struct', 'vm_end'),
                            ('vm_area_struct', 'vm_file'),
                            ('vm_area_struct', 'vm_flags'),
                            ('vm_area_struct', 'vm_next'),
                            ('vm_area_struct', 'vm_ops'),
                            ('vm_area_struct', 'vm_pgoff'),
                            ('vm_area_struct', 'vm_start')])}],
 'msgctl': [{'call': 'keyctl', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'rt_sigtimedwait',
             'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'msgrcv',
             'reason': set([('ipc_namespace', 'msg_ctlmnb'),
                            ('mm_segment_t', 'seg')])},
            {'call': 'mq_unlink',
             'reason': set([('ipc_namespace', 'msg_ctlmnb')])},
            {'call': 'kill', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'msgget',
             'reason': set([('ipc_namespace', 'msg_ctlmnb')])},
            {'call': 'sched_getaffinity',
             'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'sched_setparam',
             'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'ioprio_set', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'getppid', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'ioperm', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'mq_timedreceive',
             'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'capget', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'sched_setaffinity',
             'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'signal', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'semtimedop',
             'reason': set([('ipc_namespace', 'msg_ctlmnb'),
                            ('mm_segment_t', 'seg')])},
            {'call': 'umount', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'sched_rr_get_interval',
             'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'semctl',
             'reason': set([('ipc_namespace', 'msg_ctlmnb')])},
            {'call': 'shmget',
             'reason': set([('ipc_namespace', 'msg_ctlmnb')])},
            {'call': 'rt_sigprocmask',
             'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'setsid', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'sigaltstack', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'sched_setattr',
             'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'migrate_pages',
             'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'getitimer', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'setpgid', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'semget',
             'reason': set([('ipc_namespace', 'msg_ctlmnb')])},
            {'call': 'getsid', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'shmat',
             'reason': set([('ipc_namespace', 'msg_ctlmnb')])},
            {'call': 'prlimit64', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'perf_event_open',
             'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'rt_sigaction',
             'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'getpgid', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'getpriority', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'sigaction', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'setns',
             'reason': set([('ipc_namespace', 'msg_ctlmnb'),
                            ('mm_segment_t', 'seg')])},
            {'call': 'fork', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'get_robust_list',
             'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'mq_timedsend',
             'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'sched_getscheduler',
             'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'ptrace', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'shmctl',
             'reason': set([('ipc_namespace', 'msg_ctlmnb')])},
            {'call': 'sched_getattr',
             'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'getrusage', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'sched_setscheduler',
             'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'setitimer', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'ioprio_get', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'vfork', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'prctl', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'move_pages', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'msgsnd',
             'reason': set([('ipc_namespace', 'msg_ctlmnb')])},
            {'call': 'setpriority', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'clone', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'mq_open',
             'reason': set([('ipc_namespace', 'msg_ctlmnb')])},
            {'call': 'sched_getparam',
             'reason': set([('mm_segment_t', 'seg')])}],
 'msgrcv': [{'call': 'mq_timedreceive', 'reason': set([('msg_msg', 'm_ts')])},
            {'call': 'mq_timedsend', 'reason': set([('msg_msg', 'm_ts')])},
            {'call': 'msgsnd', 'reason': set([('msg_msg', 'm_ts')])}],
 'msgsnd': [{'call': 'msgrcv',
             'reason': set([('ipc_namespace', 'msg_ctlmax')])},
            {'call': 'mq_unlink',
             'reason': set([('ipc_namespace', 'msg_ctlmax')])},
            {'call': 'msgget',
             'reason': set([('ipc_namespace', 'msg_ctlmax')])},
            {'call': 'semtimedop',
             'reason': set([('ipc_namespace', 'msg_ctlmax')])},
            {'call': 'semctl',
             'reason': set([('ipc_namespace', 'msg_ctlmax')])},
            {'call': 'shmget',
             'reason': set([('ipc_namespace', 'msg_ctlmax')])},
            {'call': 'msgctl',
             'reason': set([('ipc_namespace', 'msg_ctlmax')])},
            {'call': 'semget',
             'reason': set([('ipc_namespace', 'msg_ctlmax')])},
            {'call': 'shmat',
             'reason': set([('ipc_namespace', 'msg_ctlmax')])},
            {'call': 'setns',
             'reason': set([('ipc_namespace', 'msg_ctlmax')])},
            {'call': 'shmctl',
             'reason': set([('ipc_namespace', 'msg_ctlmax')])},
            {'call': 'mq_open',
             'reason': set([('ipc_namespace', 'msg_ctlmax')])}],
 'msync': [{'call': 'remap_file_pages',
            'reason': set([('vm_area_struct', 'vm_file'),
                           ('vm_area_struct', 'vm_flags')])},
           {'call': 'shmdt',
            'reason': set([('vm_area_struct', 'vm_file'),
                           ('vm_area_struct', 'vm_flags')])},
           {'call': 'brk',
            'reason': set([('vm_area_struct', 'vm_file'),
                           ('vm_area_struct', 'vm_flags')])},
           {'call': 'get_mempolicy',
            'reason': set([('vm_area_struct', 'vm_file'),
                           ('vm_area_struct', 'vm_flags')])},
           {'call': 'munlockall',
            'reason': set([('vm_area_struct', 'vm_file'),
                           ('vm_area_struct', 'vm_flags')])},
           {'call': 'pkey_mprotect',
            'reason': set([('vm_area_struct', 'vm_file'),
                           ('vm_area_struct', 'vm_flags')])},
           {'call': 'madvise',
            'reason': set([('vm_area_struct', 'vm_file'),
                           ('vm_area_struct', 'vm_flags')])},
           {'call': 'mprotect',
            'reason': set([('vm_area_struct', 'vm_file'),
                           ('vm_area_struct', 'vm_flags')])},
           {'call': 'mremap',
            'reason': set([('vm_area_struct', 'vm_file'),
                           ('vm_area_struct', 'vm_flags')])},
           {'call': 'prctl',
            'reason': set([('vm_area_struct', 'vm_file'),
                           ('vm_area_struct', 'vm_flags')])},
           {'call': 'munlock',
            'reason': set([('vm_area_struct', 'vm_file'),
                           ('vm_area_struct', 'vm_flags')])},
           {'call': 'mincore',
            'reason': set([('vm_area_struct', 'vm_file'),
                           ('vm_area_struct', 'vm_flags')])},
           {'call': 'mlockall',
            'reason': set([('vm_area_struct', 'vm_file'),
                           ('vm_area_struct', 'vm_flags')])}],
 'munlock': [{'call': 'keyctl', 'reason': set([('task_struct', 'mm')])},
             {'call': 'rt_sigtimedwait',
              'reason': set([('task_struct', 'mm')])},
             {'call': 'msgrcv', 'reason': set([('task_struct', 'mm')])},
             {'call': 'kill', 'reason': set([('task_struct', 'mm')])},
             {'call': 'sched_getaffinity',
              'reason': set([('task_struct', 'mm')])},
             {'call': 'sched_setparam',
              'reason': set([('task_struct', 'mm')])},
             {'call': 'ioprio_set', 'reason': set([('task_struct', 'mm')])},
             {'call': 'remap_file_pages',
              'reason': set([('vm_area_struct', 'vm_end'),
                             ('vm_area_struct', 'vm_start')])},
             {'call': 'getppid', 'reason': set([('task_struct', 'mm')])},
             {'call': 'mq_timedreceive',
              'reason': set([('task_struct', 'mm')])},
             {'call': 'capget', 'reason': set([('task_struct', 'mm')])},
             {'call': 'sched_setaffinity',
              'reason': set([('task_struct', 'mm')])},
             {'call': 'signal', 'reason': set([('task_struct', 'mm')])},
             {'call': 'semtimedop', 'reason': set([('task_struct', 'mm')])},
             {'call': 'umount', 'reason': set([('task_struct', 'mm')])},
             {'call': 'sched_rr_get_interval',
              'reason': set([('task_struct', 'mm')])},
             {'call': 'rt_sigprocmask',
              'reason': set([('task_struct', 'mm')])},
             {'call': 'setsid', 'reason': set([('task_struct', 'mm')])},
             {'call': 'sigaltstack', 'reason': set([('task_struct', 'mm')])},
             {'call': 'sched_setattr',
              'reason': set([('task_struct', 'mm')])},
             {'call': 'migrate_pages',
              'reason': set([('task_struct', 'mm')])},
             {'call': 'getitimer', 'reason': set([('task_struct', 'mm')])},
             {'call': 'setpgid', 'reason': set([('task_struct', 'mm')])},
             {'call': 'getsid', 'reason': set([('task_struct', 'mm')])},
             {'call': 'prlimit64', 'reason': set([('task_struct', 'mm')])},
             {'call': 'perf_event_open',
              'reason': set([('task_struct', 'mm')])},
             {'call': 'shmdt',
              'reason': set([('vm_area_struct', 'vm_end'),
                             ('vm_area_struct', 'vm_start')])},
             {'call': 'rt_sigaction', 'reason': set([('task_struct', 'mm')])},
             {'call': 'getpgid', 'reason': set([('task_struct', 'mm')])},
             {'call': 'brk',
              'reason': set([('vm_area_struct', 'vm_end'),
                             ('vm_area_struct', 'vm_start')])},
             {'call': 'getpriority', 'reason': set([('task_struct', 'mm')])},
             {'call': 'sigaction', 'reason': set([('task_struct', 'mm')])},
             {'call': 'setns', 'reason': set([('task_struct', 'mm')])},
             {'call': 'fork', 'reason': set([('task_struct', 'mm')])},
             {'call': 'get_mempolicy',
              'reason': set([('vm_area_struct', 'vm_end'),
                             ('vm_area_struct', 'vm_start')])},
             {'call': 'get_robust_list',
              'reason': set([('task_struct', 'mm')])},
             {'call': 'mq_timedsend', 'reason': set([('task_struct', 'mm')])},
             {'call': 'sched_getscheduler',
              'reason': set([('task_struct', 'mm')])},
             {'call': 'ptrace', 'reason': set([('task_struct', 'mm')])},
             {'call': 'munlockall',
              'reason': set([('vm_area_struct', 'vm_end'),
                             ('vm_area_struct', 'vm_start')])},
             {'call': 'pkey_mprotect',
              'reason': set([('vm_area_struct', 'vm_end'),
                             ('vm_area_struct', 'vm_start')])},
             {'call': 'madvise',
              'reason': set([('vm_area_struct', 'vm_end'),
                             ('vm_area_struct', 'vm_start')])},
             {'call': 'sched_getattr',
              'reason': set([('task_struct', 'mm')])},
             {'call': 'getrusage', 'reason': set([('task_struct', 'mm')])},
             {'call': 'sched_setscheduler',
              'reason': set([('task_struct', 'mm')])},
             {'call': 'setitimer', 'reason': set([('task_struct', 'mm')])},
             {'call': 'ioprio_get', 'reason': set([('task_struct', 'mm')])},
             {'call': 'vfork', 'reason': set([('task_struct', 'mm')])},
             {'call': 'mprotect',
              'reason': set([('vm_area_struct', 'vm_end'),
                             ('vm_area_struct', 'vm_start')])},
             {'call': 'mremap',
              'reason': set([('vm_area_struct', 'vm_end'),
                             ('vm_area_struct', 'vm_start')])},
             {'call': 'prctl',
              'reason': set([('task_struct', 'mm'),
                             ('vm_area_struct', 'vm_end'),
                             ('vm_area_struct', 'vm_start')])},
             {'call': 'move_pages', 'reason': set([('task_struct', 'mm')])},
             {'call': 'setpriority', 'reason': set([('task_struct', 'mm')])},
             {'call': 'mincore',
              'reason': set([('vm_area_struct', 'vm_end'),
                             ('vm_area_struct', 'vm_start')])},
             {'call': 'clone', 'reason': set([('task_struct', 'mm')])},
             {'call': 'sched_getparam',
              'reason': set([('task_struct', 'mm')])},
             {'call': 'mlockall',
              'reason': set([('vm_area_struct', 'vm_end'),
                             ('vm_area_struct', 'vm_start')])}],
 'munlockall': [{'call': 'remap_file_pages',
                 'reason': set([('vm_area_struct', 'vm_end'),
                                ('vm_area_struct', 'vm_start')])},
                {'call': 'shmdt',
                 'reason': set([('vm_area_struct', 'vm_end'),
                                ('vm_area_struct', 'vm_start')])},
                {'call': 'brk',
                 'reason': set([('vm_area_struct', 'vm_end'),
                                ('vm_area_struct', 'vm_start')])},
                {'call': 'get_mempolicy',
                 'reason': set([('vm_area_struct', 'vm_end'),
                                ('vm_area_struct', 'vm_start')])},
                {'call': 'pkey_mprotect',
                 'reason': set([('vm_area_struct', 'vm_end'),
                                ('vm_area_struct', 'vm_start')])},
                {'call': 'madvise',
                 'reason': set([('vm_area_struct', 'vm_end'),
                                ('vm_area_struct', 'vm_start')])},
                {'call': 'mprotect',
                 'reason': set([('vm_area_struct', 'vm_end'),
                                ('vm_area_struct', 'vm_start')])},
                {'call': 'mremap',
                 'reason': set([('vm_area_struct', 'vm_end'),
                                ('vm_area_struct', 'vm_start')])},
                {'call': 'prctl',
                 'reason': set([('vm_area_struct', 'vm_end'),
                                ('vm_area_struct', 'vm_start')])},
                {'call': 'munlock',
                 'reason': set([('vm_area_struct', 'vm_end'),
                                ('vm_area_struct', 'vm_start')])},
                {'call': 'mincore',
                 'reason': set([('vm_area_struct', 'vm_end'),
                                ('vm_area_struct', 'vm_start')])},
                {'call': 'mlockall',
                 'reason': set([('vm_area_struct', 'vm_end'),
                                ('vm_area_struct', 'vm_start')])}],
 'name_to_handle_at': [{'call': 'syncfs',
                        'reason': set([('super_block', 's_export_op')])},
                       {'call': 'eventfd2',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'swapoff',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'pivot_root',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'memfd_create',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'remap_file_pages',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'dup3',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'ustat',
                        'reason': set([('super_block', 's_export_op')])},
                       {'call': 'unshare',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'umount',
                        'reason': set([('super_block', 's_export_op')])},
                       {'call': 'epoll_create1',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'epoll_ctl',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'flock',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'openat',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'lookup_dcookie',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'uselib',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'accept4',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'socketpair',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'getcwd',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'shmat',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'socket',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'pipe2',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'perf_event_open',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'shmdt',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'quotactl',
                        'reason': set([('path', 'dentry'),
                                       ('path', 'mnt'),
                                       ('super_block', 's_export_op')])},
                       {'call': 'acct',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'open',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'dup',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'setns',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'shmctl',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'swapon',
                        'reason': set([('path', 'dentry'),
                                       ('path', 'mnt'),
                                       ('super_block', 's_export_op')])},
                       {'call': 'mmap_pgoff',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'mq_open',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'open_by_handle_at',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])}],
 'nanosleep': [{'call': 'rt_sigtimedwait',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'mq_unlink',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'swapoff',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'fchmod',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'memfd_create',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'readlinkat',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'io_getevents',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'fchown',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'mq_timedreceive',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'utime',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'semtimedop',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'settimeofday',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'sched_rr_get_interval',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'timerfd_gettime',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'pselect6',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'uselib',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'fchmodat',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'inotify_add_watch',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'timer_settime',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'ftruncate',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'timer_gettime',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'ioctl',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'linkat',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'stime',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'futimesat',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'poll',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'select',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'unlink',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'mq_getsetattr',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'faccessat',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'mq_timedsend',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'swapon',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'epoll_wait',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'fchownat',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'fstat',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'timerfd_settime',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'mq_notify',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'sendfile',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'newfstat',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'clock_nanosleep',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'unlinkat',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'futex',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'recvmmsg',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'sendfile64',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])},
               {'call': 'ppoll',
                'reason': set([('timespec', 'tv_nsec'),
                               ('timespec', 'tv_sec')])}],
 'newfstat': [{'call': 'newlstat',
               'reason': set([('compat_stat', 'st_ino'),
                              ('compat_stat', 'st_nlink'),
                              ('stat', 'st_ino'),
                              ('stat', 'st_nlink')])},
              {'call': 'newfstatat',
               'reason': set([('compat_stat', 'st_ino'),
                              ('compat_stat', 'st_nlink'),
                              ('stat', 'st_ino'),
                              ('stat', 'st_nlink')])},
              {'call': 'newstat',
               'reason': set([('compat_stat', 'st_ino'),
                              ('compat_stat', 'st_nlink'),
                              ('stat', 'st_ino'),
                              ('stat', 'st_nlink')])},
              {'call': 'fstat',
               'reason': set([('kstat', 'dev'),
                              ('kstat', 'ino'),
                              ('kstat', 'nlink'),
                              ('kstat', 'rdev'),
                              ('kstat', 'size')])}],
 'newfstatat': [{'call': 'newlstat',
                 'reason': set([('compat_stat', 'st_ino'),
                                ('compat_stat', 'st_nlink'),
                                ('stat', 'st_ino'),
                                ('stat', 'st_nlink')])},
                {'call': 'newstat',
                 'reason': set([('compat_stat', 'st_ino'),
                                ('compat_stat', 'st_nlink'),
                                ('stat', 'st_ino'),
                                ('stat', 'st_nlink')])},
                {'call': 'fstat',
                 'reason': set([('kstat', 'dev'),
                                ('kstat', 'ino'),
                                ('kstat', 'nlink'),
                                ('kstat', 'rdev'),
                                ('kstat', 'size')])},
                {'call': 'newfstat',
                 'reason': set([('compat_stat', 'st_ino'),
                                ('compat_stat', 'st_nlink'),
                                ('kstat', 'dev'),
                                ('kstat', 'ino'),
                                ('kstat', 'nlink'),
                                ('kstat', 'rdev'),
                                ('kstat', 'size'),
                                ('stat', 'st_ino'),
                                ('stat', 'st_nlink')])}],
 'newlstat': [{'call': 'newfstatat',
               'reason': set([('compat_stat', 'st_ino'),
                              ('compat_stat', 'st_nlink'),
                              ('stat', 'st_ino'),
                              ('stat', 'st_nlink')])},
              {'call': 'newstat',
               'reason': set([('compat_stat', 'st_ino'),
                              ('compat_stat', 'st_nlink'),
                              ('stat', 'st_ino'),
                              ('stat', 'st_nlink')])},
              {'call': 'fstat',
               'reason': set([('kstat', 'dev'),
                              ('kstat', 'ino'),
                              ('kstat', 'nlink'),
                              ('kstat', 'rdev'),
                              ('kstat', 'size')])},
              {'call': 'newfstat',
               'reason': set([('compat_stat', 'st_ino'),
                              ('compat_stat', 'st_nlink'),
                              ('kstat', 'dev'),
                              ('kstat', 'ino'),
                              ('kstat', 'nlink'),
                              ('kstat', 'rdev'),
                              ('kstat', 'size'),
                              ('stat', 'st_ino'),
                              ('stat', 'st_nlink')])}],
 'newstat': [{'call': 'newlstat',
              'reason': set([('compat_stat', 'st_ino'),
                             ('compat_stat', 'st_nlink'),
                             ('stat', 'st_ino'),
                             ('stat', 'st_nlink')])},
             {'call': 'newfstatat',
              'reason': set([('compat_stat', 'st_ino'),
                             ('compat_stat', 'st_nlink'),
                             ('stat', 'st_ino'),
                             ('stat', 'st_nlink')])},
             {'call': 'fstat',
              'reason': set([('kstat', 'dev'),
                             ('kstat', 'ino'),
                             ('kstat', 'nlink'),
                             ('kstat', 'rdev'),
                             ('kstat', 'size')])},
             {'call': 'newfstat',
              'reason': set([('compat_stat', 'st_ino'),
                             ('compat_stat', 'st_nlink'),
                             ('kstat', 'dev'),
                             ('kstat', 'ino'),
                             ('kstat', 'nlink'),
                             ('kstat', 'rdev'),
                             ('kstat', 'size'),
                             ('stat', 'st_ino'),
                             ('stat', 'st_nlink')])}],
 'newuname': [{'call': 'keyctl',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'rt_sigtimedwait',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'msgrcv',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'kill',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'sched_getaffinity',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'sched_setparam',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'ioprio_set',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'personality',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'getppid',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'mq_timedreceive',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'capget',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'sched_setaffinity',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'signal',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'semtimedop',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'umount',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'sched_rr_get_interval',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'rt_sigprocmask',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'setsid',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'sigaltstack',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'sched_setattr',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'migrate_pages',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'getitimer',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'setpgid',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'getsid',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'prlimit64',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'perf_event_open',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'rt_sigaction',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'getpgid',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'getpriority',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'sigaction',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'setns',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'fork',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'get_robust_list',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'mq_timedsend',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'sched_getscheduler',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'ptrace',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'sched_getattr',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'getrusage',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'sched_setscheduler',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'setitimer',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'ioprio_get',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'vfork',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'prctl',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'move_pages',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'setpriority',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'clone',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'sched_getparam',
               'reason': set([('task_struct', 'personality')])}],
 'old_getrlimit': [{'call': 'setrlimit',
                    'reason': set([('rlimit', 'rlim_cur'),
                                   ('rlimit', 'rlim_max')])},
                   {'call': 'prlimit64',
                    'reason': set([('rlimit', 'rlim_cur'),
                                   ('rlimit', 'rlim_max')])}],
 'old_readdir': [{'call': 'syncfs', 'reason': set([('fd', 'flags')])},
                 {'call': 'vmsplice', 'reason': set([('fd', 'flags')])},
                 {'call': 'pwritev64', 'reason': set([('fd', 'flags')])},
                 {'call': 'fremovexattr', 'reason': set([('fd', 'flags')])},
                 {'call': 'readahead', 'reason': set([('fd', 'flags')])},
                 {'call': 'getdents', 'reason': set([('fd', 'flags')])},
                 {'call': 'writev', 'reason': set([('fd', 'flags')])},
                 {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
                 {'call': 'fchmod', 'reason': set([('fd', 'flags')])},
                 {'call': 'pread64', 'reason': set([('fd', 'flags')])},
                 {'call': 'signalfd4', 'reason': set([('fd', 'flags')])},
                 {'call': 'read', 'reason': set([('fd', 'flags')])},
                 {'call': 'fchown', 'reason': set([('fd', 'flags')])},
                 {'call': 'mq_timedreceive',
                  'reason': set([('fd', 'flags')])},
                 {'call': 'utime', 'reason': set([('fd', 'flags')])},
                 {'call': 'fsync', 'reason': set([('fd', 'flags')])},
                 {'call': 'bpf', 'reason': set([('fd', 'flags')])},
                 {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
                 {'call': 'fsetxattr', 'reason': set([('fd', 'flags')])},
                 {'call': 'sendto', 'reason': set([('fd', 'flags')])},
                 {'call': 'tee', 'reason': set([('fd', 'flags')])},
                 {'call': 'sync_file_range',
                  'reason': set([('fd', 'flags')])},
                 {'call': 'lseek', 'reason': set([('fd', 'flags')])},
                 {'call': 'connect', 'reason': set([('fd', 'flags')])},
                 {'call': 'getsockname', 'reason': set([('fd', 'flags')])},
                 {'call': 'epoll_ctl', 'reason': set([('fd', 'flags')])},
                 {'call': 'flock', 'reason': set([('fd', 'flags')])},
                 {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
                 {'call': 'fchdir', 'reason': set([('fd', 'flags')])},
                 {'call': 'accept4', 'reason': set([('fd', 'flags')])},
                 {'call': 'inotify_rm_watch',
                  'reason': set([('fd', 'flags')])},
                 {'call': 'utimensat', 'reason': set([('fd', 'flags')])},
                 {'call': 'inotify_add_watch',
                  'reason': set([('fd', 'flags')])},
                 {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
                 {'call': 'splice', 'reason': set([('fd', 'flags')])},
                 {'call': 'ftruncate', 'reason': set([('fd', 'flags')])},
                 {'call': 'preadv', 'reason': set([('fd', 'flags')])},
                 {'call': 'getpeername', 'reason': set([('fd', 'flags')])},
                 {'call': 'setsockopt', 'reason': set([('fd', 'flags')])},
                 {'call': 'fcntl', 'reason': set([('fd', 'flags')])},
                 {'call': 'ioctl', 'reason': set([('fd', 'flags')])},
                 {'call': 'pwrite64', 'reason': set([('fd', 'flags')])},
                 {'call': 'perf_event_open',
                  'reason': set([('fd', 'flags')])},
                 {'call': 'pwritev64v2', 'reason': set([('fd', 'flags')])},
                 {'call': 'futimesat', 'reason': set([('fd', 'flags')])},
                 {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
                 {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
                 {'call': 'getsockopt', 'reason': set([('fd', 'flags')])},
                 {'call': 'mq_getsetattr', 'reason': set([('fd', 'flags')])},
                 {'call': 'fdatasync', 'reason': set([('fd', 'flags')])},
                 {'call': 'getdents64', 'reason': set([('fd', 'flags')])},
                 {'call': 'listen', 'reason': set([('fd', 'flags')])},
                 {'call': 'copy_file_range',
                  'reason': set([('fd', 'flags')])},
                 {'call': 'mq_timedsend', 'reason': set([('fd', 'flags')])},
                 {'call': 'fgetxattr', 'reason': set([('fd', 'flags')])},
                 {'call': 'fcntl64', 'reason': set([('fd', 'flags')])},
                 {'call': 'fallocate', 'reason': set([('fd', 'flags')])},
                 {'call': 'epoll_wait', 'reason': set([('fd', 'flags')])},
                 {'call': 'llseek', 'reason': set([('fd', 'flags')])},
                 {'call': 'preadv64v2', 'reason': set([('fd', 'flags')])},
                 {'call': 'readv', 'reason': set([('fd', 'flags')])},
                 {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
                 {'call': 'fstatfs64', 'reason': set([('fd', 'flags')])},
                 {'call': 'write', 'reason': set([('fd', 'flags')])},
                 {'call': 'mq_notify', 'reason': set([('fd', 'flags')])},
                 {'call': 'sendfile', 'reason': set([('fd', 'flags')])},
                 {'call': 'bind', 'reason': set([('fd', 'flags')])},
                 {'call': 'flistxattr', 'reason': set([('fd', 'flags')])},
                 {'call': 'sendfile64', 'reason': set([('fd', 'flags')])}],
 'olduname': [{'call': 'keyctl',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'rt_sigtimedwait',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'msgrcv',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'kill',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'sched_getaffinity',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'sched_setparam',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'ioprio_set',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'personality',
               'reason': set([('task_struct', 'personality')])},
              {'call': 'getppid',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'ioperm', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'mq_timedreceive',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'capget',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'sched_setaffinity',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'signal',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'semtimedop',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'umount',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'sched_rr_get_interval',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'rt_sigprocmask',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'setsid',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'sigaltstack',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'sched_setattr',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'migrate_pages',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'getitimer',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'setpgid',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'getsid',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'prlimit64',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'perf_event_open',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'rt_sigaction',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'getpgid',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'getpriority',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'sigaction',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'setns',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'fork',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'get_robust_list',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'mq_timedsend',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'sched_getscheduler',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'ptrace',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'sched_getattr',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'getrusage',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'sched_setscheduler',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'setitimer',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'ioprio_get',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'vfork',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'prctl',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'move_pages',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'setpriority',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'clone',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])},
              {'call': 'sched_getparam',
               'reason': set([('mm_segment_t', 'seg'),
                              ('task_struct', 'personality')])}],
 'open_by_handle_at': [{'call': 'eventfd2',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'swapoff',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'pivot_root',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'memfd_create',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'remap_file_pages',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'dup3',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'unshare',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'epoll_create1',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'epoll_ctl',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'flock',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'openat',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'lookup_dcookie',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'uselib',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'accept4',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'socketpair',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'getcwd',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'shmat',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'socket',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'pipe2',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'perf_event_open',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'shmdt',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'quotactl',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'acct',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'open',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'dup',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'setns',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'shmctl',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'swapon',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'mmap_pgoff',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                       {'call': 'mq_open',
                        'reason': set([('path', 'dentry'), ('path', 'mnt')])}],
 'perf_event_open': [{'call': 'syncfs',
                      'reason': set([('fd', 'flags'),
                                     ('list_head', 'prev')])},
                     {'call': 'keyctl',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'rt_sigtimedwait',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'vmsplice',
                      'reason': set([('fd', 'flags'),
                                     ('list_head', 'prev')])},
                     {'call': 'msgrcv',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'eventfd2',
                      'reason': set([('file', 'f_op'),
                                     ('list_head', 'prev')])},
                     {'call': 'mq_unlink',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'pwritev64', 'reason': set([('fd', 'flags')])},
                     {'call': 'kill',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'swapoff',
                      'reason': set([('file', 'f_op'),
                                     ('list_head', 'prev')])},
                     {'call': 'fremovexattr',
                      'reason': set([('fd', 'flags')])},
                     {'call': 'readahead',
                      'reason': set([('fd', 'flags'),
                                     ('list_head', 'prev')])},
                     {'call': 'getdents', 'reason': set([('fd', 'flags')])},
                     {'call': 'timer_delete',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'sched_getaffinity',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'writev', 'reason': set([('fd', 'flags')])},
                     {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
                     {'call': 'sched_setparam',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'fchmod',
                      'reason': set([('fd', 'flags'),
                                     ('list_head', 'prev')])},
                     {'call': 'setgid',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'pread64', 'reason': set([('fd', 'flags')])},
                     {'call': 'pivot_root',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'signalfd4', 'reason': set([('fd', 'flags')])},
                     {'call': 'memfd_create',
                      'reason': set([('file', 'f_op'),
                                     ('list_head', 'prev')])},
                     {'call': 'ioprio_set',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'delete_module',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'remap_file_pages',
                      'reason': set([('file', 'f_op'),
                                     ('list_head', 'prev')])},
                     {'call': 'dup3',
                      'reason': set([('file', 'f_op'),
                                     ('list_head', 'prev')])},
                     {'call': 'readlinkat',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'read', 'reason': set([('fd', 'flags')])},
                     {'call': 'io_getevents',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'getppid',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'fchown',
                      'reason': set([('fd', 'flags'),
                                     ('list_head', 'prev')])},
                     {'call': 'ioperm',
                      'reason': set([('mm_segment_t', 'seg')])},
                     {'call': 'mq_timedreceive',
                      'reason': set([('fd', 'flags'),
                                     ('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'capget',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'utime', 'reason': set([('fd', 'flags')])},
                     {'call': 'sched_setaffinity',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'ustat',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'fsync', 'reason': set([('fd', 'flags')])},
                     {'call': 'bpf',
                      'reason': set([('fd', 'flags'),
                                     ('list_head', 'prev')])},
                     {'call': 'unshare',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'signal',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'setreuid',
                      'reason': set([('list_head', 'prev'),
                                     ('task_struct', 'flags')])},
                     {'call': 'semtimedop',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'umount',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
                     {'call': 'fsetxattr', 'reason': set([('fd', 'flags')])},
                     {'call': 'timer_create',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'sendto', 'reason': set([('fd', 'flags')])},
                     {'call': 'mkdirat',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'sched_rr_get_interval',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'epoll_create1',
                      'reason': set([('file', 'f_op'),
                                     ('list_head', 'prev')])},
                     {'call': 'timerfd_gettime',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'tee',
                      'reason': set([('fd', 'flags'),
                                     ('list_head', 'prev')])},
                     {'call': 'semctl',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'sync_file_range',
                      'reason': set([('fd', 'flags'),
                                     ('list_head', 'prev')])},
                     {'call': 'lseek', 'reason': set([('fd', 'flags')])},
                     {'call': 'connect', 'reason': set([('fd', 'flags')])},
                     {'call': 'getsockname',
                      'reason': set([('fd', 'flags')])},
                     {'call': 'epoll_ctl',
                      'reason': set([('fd', 'flags'),
                                     ('file', 'f_op'),
                                     ('list_head', 'prev')])},
                     {'call': 'flock',
                      'reason': set([('fd', 'flags'),
                                     ('file', 'f_op'),
                                     ('list_head', 'prev')])},
                     {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
                     {'call': 'fchdir', 'reason': set([('fd', 'flags')])},
                     {'call': 'openat',
                      'reason': set([('file', 'f_op'),
                                     ('list_head', 'prev')])},
                     {'call': 'lookup_dcookie',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'uselib',
                      'reason': set([('file', 'f_op'),
                                     ('list_head', 'prev')])},
                     {'call': 'renameat2',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'rt_sigprocmask',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'accept4',
                      'reason': set([('fd', 'flags'),
                                     ('file', 'f_op'),
                                     ('list_head', 'prev')])},
                     {'call': 'msgctl',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'reboot',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'setsid',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'set_trip_temp',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'sigaltstack',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'sched_setattr',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'old_readdir',
                      'reason': set([('fd', 'flags')])},
                     {'call': 'inotify_rm_watch',
                      'reason': set([('fd', 'flags'),
                                     ('list_head', 'prev')])},
                     {'call': 'socketpair',
                      'reason': set([('file', 'f_op'),
                                     ('list_head', 'prev')])},
                     {'call': 'utimensat', 'reason': set([('fd', 'flags')])},
                     {'call': 'migrate_pages',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'getitimer',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'fchmodat',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'setpgid',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'init_module',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'setresgid',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'getcwd',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'inotify_add_watch',
                      'reason': set([('fd', 'flags'),
                                     ('list_head', 'prev')])},
                     {'call': 'get_trip_temp',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
                     {'call': 'timer_settime',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'setregid',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'splice',
                      'reason': set([('fd', 'flags'),
                                     ('list_head', 'prev')])},
                     {'call': 'ftruncate',
                      'reason': set([('fd', 'flags'),
                                     ('list_head', 'prev')])},
                     {'call': 'timer_gettime',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'preadv', 'reason': set([('fd', 'flags')])},
                     {'call': 'getpeername',
                      'reason': set([('fd', 'flags')])},
                     {'call': 'getsid',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'shmat',
                      'reason': set([('file', 'f_op'),
                                     ('list_head', 'prev')])},
                     {'call': 'setsockopt', 'reason': set([('fd', 'flags')])},
                     {'call': 'mknodat',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'socket',
                      'reason': set([('file', 'f_op'),
                                     ('list_head', 'prev')])},
                     {'call': 'symlinkat',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'pipe2',
                      'reason': set([('file', 'f_op'),
                                     ('list_head', 'prev')])},
                     {'call': 'fcntl', 'reason': set([('fd', 'flags')])},
                     {'call': 'ioctl',
                      'reason': set([('fd', 'flags'),
                                     ('list_head', 'prev')])},
                     {'call': 'prlimit64',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'pwrite64', 'reason': set([('fd', 'flags')])},
                     {'call': 'linkat',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'getgroups16',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'shmdt',
                      'reason': set([('file', 'f_op'),
                                     ('list_head', 'prev')])},
                     {'call': 'pwritev64v2',
                      'reason': set([('fd', 'flags')])},
                     {'call': 'quotactl',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'rt_sigaction',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'futimesat', 'reason': set([('fd', 'flags')])},
                     {'call': 'request_key',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'getpgid',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'brk', 'reason': set([('list_head', 'prev')])},
                     {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
                     {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
                     {'call': 'acct',
                      'reason': set([('file', 'f_op'),
                                     ('list_head', 'prev')])},
                     {'call': 'open',
                      'reason': set([('file', 'f_op'),
                                     ('list_head', 'prev')])},
                     {'call': 'unlink',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'getsockopt', 'reason': set([('fd', 'flags')])},
                     {'call': 'exit_group',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'getpriority',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'sigaction',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'mq_getsetattr',
                      'reason': set([('fd', 'flags'),
                                     ('list_head', 'prev')])},
                     {'call': 'faccessat',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'rmdir',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'dup',
                      'reason': set([('file', 'f_op'),
                                     ('list_head', 'prev')])},
                     {'call': 'fdatasync', 'reason': set([('fd', 'flags')])},
                     {'call': 'setgroups16',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'setns',
                      'reason': set([('file', 'f_op'),
                                     ('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'getdents64', 'reason': set([('fd', 'flags')])},
                     {'call': 'listen', 'reason': set([('fd', 'flags')])},
                     {'call': 'fork',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'get_mempolicy',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'io_submit',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'get_robust_list',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'copy_file_range',
                      'reason': set([('fd', 'flags')])},
                     {'call': 'mq_timedsend',
                      'reason': set([('fd', 'flags'),
                                     ('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'sched_yield',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'sched_getscheduler',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'fgetxattr', 'reason': set([('fd', 'flags')])},
                     {'call': 'ptrace',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'shmctl',
                      'reason': set([('file', 'f_op'),
                                     ('list_head', 'prev')])},
                     {'call': 'fcntl64', 'reason': set([('fd', 'flags')])},
                     {'call': 'munlockall',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'swapon',
                      'reason': set([('file', 'f_op'),
                                     ('list_head', 'prev')])},
                     {'call': 'fallocate', 'reason': set([('fd', 'flags')])},
                     {'call': 'pkey_mprotect',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'madvise',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'epoll_wait',
                      'reason': set([('fd', 'flags'),
                                     ('list_head', 'prev')])},
                     {'call': 'sched_getattr',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'fchownat',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'getrusage',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'timerfd_settime',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'sched_setscheduler',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'setresuid',
                      'reason': set([('list_head', 'prev'),
                                     ('task_struct', 'flags')])},
                     {'call': 'setitimer',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'ioprio_get',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'vfork',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'setuid',
                      'reason': set([('list_head', 'prev'),
                                     ('task_struct', 'flags')])},
                     {'call': 'llseek', 'reason': set([('fd', 'flags')])},
                     {'call': 'io_setup',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'mprotect',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'mmap_pgoff',
                      'reason': set([('file', 'f_op'),
                                     ('list_head', 'prev')])},
                     {'call': 'mremap',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'io_destroy',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'mbind',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'preadv64v2', 'reason': set([('fd', 'flags')])},
                     {'call': 'readv', 'reason': set([('fd', 'flags')])},
                     {'call': 'prctl',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'move_pages',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'timerfd_create',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
                     {'call': 'modify_ldt',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'getgroups',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'fstatfs64', 'reason': set([('fd', 'flags')])},
                     {'call': 'dup2', 'reason': set([('list_head', 'prev')])},
                     {'call': 'get_curr_temp',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'msgsnd',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'write', 'reason': set([('fd', 'flags')])},
                     {'call': 'munlock',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'setpriority',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'inotify_init1',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'mincore',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'mq_notify',
                      'reason': set([('fd', 'flags'),
                                     ('list_head', 'prev')])},
                     {'call': 'sendfile',
                      'reason': set([('fd', 'flags'),
                                     ('list_head', 'prev')])},
                     {'call': 'timer_getoverrun',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'kexec_load',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'clone',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'mq_open',
                      'reason': set([('file', 'f_op'),
                                     ('list_head', 'prev')])},
                     {'call': 'setgroups',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'unlinkat',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'sched_getparam',
                      'reason': set([('list_head', 'prev'),
                                     ('mm_segment_t', 'seg'),
                                     ('task_struct', 'flags')])},
                     {'call': 'io_cancel',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'open_by_handle_at',
                      'reason': set([('file', 'f_op'),
                                     ('list_head', 'prev')])},
                     {'call': 'bind', 'reason': set([('fd', 'flags')])},
                     {'call': 'flistxattr', 'reason': set([('fd', 'flags')])},
                     {'call': 'finit_module',
                      'reason': set([('list_head', 'prev')])},
                     {'call': 'sendfile64',
                      'reason': set([('fd', 'flags'),
                                     ('list_head', 'prev')])},
                     {'call': 'mlockall',
                      'reason': set([('list_head', 'prev')])}],
 'pivot_root': [{'call': 'eventfd2',
                 'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                {'call': 'mq_unlink',
                 'reason': set([('dentry', 'd_inode'),
                                ('dentry', 'd_parent'),
                                ('vfsmount', 'mnt_flags'),
                                ('vfsmount', 'mnt_root')])},
                {'call': 'swapoff',
                 'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                {'call': 'memfd_create',
                 'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                {'call': 'remap_file_pages',
                 'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                {'call': 'dup3',
                 'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                {'call': 'unshare',
                 'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                {'call': 'umount',
                 'reason': set([('mount', 'mnt_ns'),
                                ('mount', 'mnt_parent'),
                                ('vfsmount', 'mnt_flags'),
                                ('vfsmount', 'mnt_root')])},
                {'call': 'mkdirat',
                 'reason': set([('dentry', 'd_inode'),
                                ('dentry', 'd_parent')])},
                {'call': 'epoll_create1',
                 'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                {'call': 'epoll_ctl',
                 'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                {'call': 'flock',
                 'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                {'call': 'openat',
                 'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                {'call': 'lookup_dcookie',
                 'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                {'call': 'uselib',
                 'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                {'call': 'renameat2',
                 'reason': set([('dentry', 'd_inode'),
                                ('dentry', 'd_parent')])},
                {'call': 'accept4',
                 'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                {'call': 'socketpair',
                 'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                {'call': 'getcwd',
                 'reason': set([('dentry', 'd_inode'),
                                ('dentry', 'd_parent'),
                                ('mount', 'mnt_ns'),
                                ('mount', 'mnt_parent'),
                                ('path', 'dentry'),
                                ('path', 'mnt'),
                                ('vfsmount', 'mnt_flags'),
                                ('vfsmount', 'mnt_root')])},
                {'call': 'ftruncate',
                 'reason': set([('dentry', 'd_inode'),
                                ('dentry', 'd_parent')])},
                {'call': 'shmat',
                 'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                {'call': 'mknodat',
                 'reason': set([('dentry', 'd_inode'),
                                ('dentry', 'd_parent')])},
                {'call': 'socket',
                 'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                {'call': 'symlinkat',
                 'reason': set([('dentry', 'd_inode'),
                                ('dentry', 'd_parent')])},
                {'call': 'pipe2',
                 'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                {'call': 'perf_event_open',
                 'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                {'call': 'linkat',
                 'reason': set([('dentry', 'd_inode'),
                                ('dentry', 'd_parent')])},
                {'call': 'shmdt',
                 'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                {'call': 'quotactl',
                 'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                {'call': 'acct',
                 'reason': set([('path', 'dentry'),
                                ('path', 'mnt'),
                                ('vfsmount', 'mnt_flags'),
                                ('vfsmount', 'mnt_root')])},
                {'call': 'open',
                 'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                {'call': 'unlink',
                 'reason': set([('dentry', 'd_inode'),
                                ('dentry', 'd_parent')])},
                {'call': 'rmdir',
                 'reason': set([('dentry', 'd_inode'),
                                ('dentry', 'd_parent')])},
                {'call': 'dup',
                 'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                {'call': 'setns',
                 'reason': set([('nsproxy', 'mnt_ns'),
                                ('path', 'dentry'),
                                ('path', 'mnt')])},
                {'call': 'shmctl',
                 'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                {'call': 'swapon',
                 'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                {'call': 'mmap_pgoff',
                 'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                {'call': 'mq_open',
                 'reason': set([('dentry', 'd_inode'),
                                ('dentry', 'd_parent'),
                                ('path', 'dentry'),
                                ('path', 'mnt'),
                                ('vfsmount', 'mnt_flags'),
                                ('vfsmount', 'mnt_root')])},
                {'call': 'unlinkat',
                 'reason': set([('dentry', 'd_inode'),
                                ('dentry', 'd_parent')])},
                {'call': 'open_by_handle_at',
                 'reason': set([('path', 'dentry'), ('path', 'mnt')])}],
 'pkey_alloc': [{'call': 'swapoff',
                 'reason': set([('mm_context_t', 'pkey_allocation_map')])},
                {'call': 'remap_file_pages',
                 'reason': set([('mm_context_t', 'pkey_allocation_map')])},
                {'call': 'io_getevents',
                 'reason': set([('mm_context_t', 'pkey_allocation_map')])},
                {'call': 'pkey_free',
                 'reason': set([('mm_context_t', 'pkey_allocation_map')])},
                {'call': 'migrate_pages',
                 'reason': set([('mm_context_t', 'pkey_allocation_map')])},
                {'call': 'shmdt',
                 'reason': set([('mm_context_t', 'pkey_allocation_map')])},
                {'call': 'brk',
                 'reason': set([('mm_context_t', 'pkey_allocation_map')])},
                {'call': 'get_mempolicy',
                 'reason': set([('mm_context_t', 'pkey_allocation_map')])},
                {'call': 'getrusage',
                 'reason': set([('mm_context_t', 'pkey_allocation_map')])},
                {'call': 'io_setup',
                 'reason': set([('mm_context_t', 'pkey_allocation_map')])},
                {'call': 'mremap',
                 'reason': set([('mm_context_t', 'pkey_allocation_map')])},
                {'call': 'io_destroy',
                 'reason': set([('mm_context_t', 'pkey_allocation_map')])},
                {'call': 'mbind',
                 'reason': set([('mm_context_t', 'pkey_allocation_map')])},
                {'call': 'prctl',
                 'reason': set([('mm_context_t', 'pkey_allocation_map')])},
                {'call': 'move_pages',
                 'reason': set([('mm_context_t', 'pkey_allocation_map')])},
                {'call': 'modify_ldt',
                 'reason': set([('mm_context_t', 'pkey_allocation_map')])},
                {'call': 'mincore',
                 'reason': set([('mm_context_t', 'pkey_allocation_map')])},
                {'call': 'io_cancel',
                 'reason': set([('mm_context_t', 'pkey_allocation_map')])}],
 'pkey_mprotect': [{'call': 'keyctl',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'rt_sigtimedwait',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'msgrcv',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'kill',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'sched_getaffinity',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'sched_setparam',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'ioprio_set',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'personality',
                    'reason': set([('task_struct', 'personality')])},
                   {'call': 'remap_file_pages',
                    'reason': set([('vm_area_struct', 'vm_end'),
                                   ('vm_area_struct', 'vm_flags'),
                                   ('vm_area_struct', 'vm_start')])},
                   {'call': 'getppid',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'mq_timedreceive',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'capget',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'sched_setaffinity',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'signal',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'semtimedop',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'umount',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'sched_rr_get_interval',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'rt_sigprocmask',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'setsid',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'sigaltstack',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'sched_setattr',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'migrate_pages',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'getitimer',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'setpgid',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'getsid',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'prlimit64',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'perf_event_open',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'shmdt',
                    'reason': set([('vm_area_struct', 'vm_end'),
                                   ('vm_area_struct', 'vm_flags'),
                                   ('vm_area_struct', 'vm_start')])},
                   {'call': 'rt_sigaction',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'getpgid',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'brk',
                    'reason': set([('vm_area_struct', 'vm_end'),
                                   ('vm_area_struct', 'vm_flags'),
                                   ('vm_area_struct', 'vm_start')])},
                   {'call': 'getpriority',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'sigaction',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'setns',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'fork',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'get_mempolicy',
                    'reason': set([('vm_area_struct', 'vm_end'),
                                   ('vm_area_struct', 'vm_flags'),
                                   ('vm_area_struct', 'vm_start')])},
                   {'call': 'get_robust_list',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'mq_timedsend',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'sched_getscheduler',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'ptrace',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'munlockall',
                    'reason': set([('vm_area_struct', 'vm_end'),
                                   ('vm_area_struct', 'vm_flags'),
                                   ('vm_area_struct', 'vm_start')])},
                   {'call': 'madvise',
                    'reason': set([('vm_area_struct', 'vm_end'),
                                   ('vm_area_struct', 'vm_flags'),
                                   ('vm_area_struct', 'vm_start')])},
                   {'call': 'sched_getattr',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'getrusage',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'sched_setscheduler',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'setitimer',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'ioprio_get',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'vfork',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'mprotect',
                    'reason': set([('vm_area_struct', 'vm_end'),
                                   ('vm_area_struct', 'vm_flags'),
                                   ('vm_area_struct', 'vm_start')])},
                   {'call': 'mremap',
                    'reason': set([('vm_area_struct', 'vm_end'),
                                   ('vm_area_struct', 'vm_flags'),
                                   ('vm_area_struct', 'vm_start')])},
                   {'call': 'prctl',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality'),
                                   ('vm_area_struct', 'vm_end'),
                                   ('vm_area_struct', 'vm_flags'),
                                   ('vm_area_struct', 'vm_start')])},
                   {'call': 'move_pages',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'munlock',
                    'reason': set([('vm_area_struct', 'vm_end'),
                                   ('vm_area_struct', 'vm_flags'),
                                   ('vm_area_struct', 'vm_start')])},
                   {'call': 'setpriority',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'mincore',
                    'reason': set([('vm_area_struct', 'vm_end'),
                                   ('vm_area_struct', 'vm_flags'),
                                   ('vm_area_struct', 'vm_start')])},
                   {'call': 'clone',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'sched_getparam',
                    'reason': set([('task_struct', 'mm'),
                                   ('task_struct', 'personality')])},
                   {'call': 'mlockall',
                    'reason': set([('vm_area_struct', 'vm_end'),
                                   ('vm_area_struct', 'vm_flags'),
                                   ('vm_area_struct', 'vm_start')])}],
 'poll': [{'call': 'ppoll', 'reason': set([('poll_list', 'len')])}],
 'ppoll': [{'call': 'keyctl',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'rt_sigtimedwait',
            'reason': set([('task_struct', 'personality'),
                           ('timespec', 'tv_nsec'),
                           ('timespec', 'tv_sec')])},
           {'call': 'msgrcv',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'mq_unlink',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'kill', 'reason': set([('task_struct', 'personality')])},
           {'call': 'swapoff',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'sched_getaffinity',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'sched_setparam',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'fchmod',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'memfd_create',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'ioprio_set',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'personality',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'readlinkat',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'io_getevents',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'getppid',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'fchown',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'mq_timedreceive',
            'reason': set([('task_struct', 'personality'),
                           ('timespec', 'tv_nsec'),
                           ('timespec', 'tv_sec')])},
           {'call': 'capget',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'utime',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'sched_setaffinity',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'signal',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'semtimedop',
            'reason': set([('task_struct', 'personality'),
                           ('timespec', 'tv_nsec'),
                           ('timespec', 'tv_sec')])},
           {'call': 'umount',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'settimeofday',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'sched_rr_get_interval',
            'reason': set([('task_struct', 'personality'),
                           ('timespec', 'tv_nsec'),
                           ('timespec', 'tv_sec')])},
           {'call': 'timerfd_gettime',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'pselect6',
            'reason': set([('compat_timespec', 'tv_nsec'),
                           ('compat_timespec', 'tv_sec'),
                           ('timespec', 'tv_nsec'),
                           ('timespec', 'tv_sec')])},
           {'call': 'uselib',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'rt_sigprocmask',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'setsid',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'sigaltstack',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'sched_setattr',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'migrate_pages',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'getitimer',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'fchmodat',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'setpgid',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'inotify_add_watch',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'timer_settime',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'ftruncate',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'timer_gettime',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'getsid',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'ioctl',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'prlimit64',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'perf_event_open',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'linkat',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'stime',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'rt_sigaction',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'futimesat',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'getpgid',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'poll',
            'reason': set([('poll_list', 'len'),
                           ('timespec', 'tv_nsec'),
                           ('timespec', 'tv_sec')])},
           {'call': 'select',
            'reason': set([('compat_timespec', 'tv_nsec'),
                           ('compat_timespec', 'tv_sec'),
                           ('timespec', 'tv_nsec'),
                           ('timespec', 'tv_sec')])},
           {'call': 'unlink',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'getpriority',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'sigaction',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'nanosleep',
            'reason': set([('compat_timespec', 'tv_nsec'),
                           ('compat_timespec', 'tv_sec'),
                           ('timespec', 'tv_nsec'),
                           ('timespec', 'tv_sec')])},
           {'call': 'mq_getsetattr',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'faccessat',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'setns', 'reason': set([('task_struct', 'personality')])},
           {'call': 'fork', 'reason': set([('task_struct', 'personality')])},
           {'call': 'get_robust_list',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'mq_timedsend',
            'reason': set([('task_struct', 'personality'),
                           ('timespec', 'tv_nsec'),
                           ('timespec', 'tv_sec')])},
           {'call': 'sched_getscheduler',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'ptrace',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'swapon',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'epoll_wait',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'sched_getattr',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'fchownat',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'getrusage',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'fstat',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'timerfd_settime',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'sched_setscheduler',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'setitimer',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'ioprio_get',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'vfork', 'reason': set([('task_struct', 'personality')])},
           {'call': 'prctl', 'reason': set([('task_struct', 'personality')])},
           {'call': 'move_pages',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'setpriority',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'mq_notify',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'sendfile',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'newfstat',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'clone', 'reason': set([('task_struct', 'personality')])},
           {'call': 'clock_nanosleep',
            'reason': set([('compat_timespec', 'tv_nsec'),
                           ('compat_timespec', 'tv_sec'),
                           ('timespec', 'tv_nsec'),
                           ('timespec', 'tv_sec')])},
           {'call': 'unlinkat',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'sched_getparam',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'futex',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'recvmmsg',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])},
           {'call': 'sendfile64',
            'reason': set([('timespec', 'tv_nsec'), ('timespec', 'tv_sec')])}],
 'prctl': [{'call': 'keyctl',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'rt_sigtimedwait',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'msgrcv',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'kill',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'swapoff', 'reason': set([('mm_struct', 'flags')])},
           {'call': 'sched_getaffinity',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'sched_setparam',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'ioprio_set',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'personality',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'remap_file_pages',
            'reason': set([('mm_struct', 'flags')])},
           {'call': 'io_getevents', 'reason': set([('mm_struct', 'flags')])},
           {'call': 'getppid',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'mq_timedreceive',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'capget',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'sched_setaffinity',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'signal',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'setreuid', 'reason': set([('task_struct', 'flags')])},
           {'call': 'semtimedop',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'umount',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'sched_rr_get_interval',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'rt_sigprocmask',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'setsid',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'sigaltstack',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'sched_setattr',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'migrate_pages',
            'reason': set([('mm_struct', 'flags'),
                           ('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'getitimer',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'setpgid',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'getsid',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'prlimit64',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'perf_event_open',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'shmdt', 'reason': set([('mm_struct', 'flags')])},
           {'call': 'rt_sigaction',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'getpgid',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'brk', 'reason': set([('mm_struct', 'flags')])},
           {'call': 'getpriority',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'sigaction',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'setns',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'fork',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'get_mempolicy', 'reason': set([('mm_struct', 'flags')])},
           {'call': 'get_robust_list',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'mq_timedsend',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'sched_getscheduler',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'ptrace',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'sched_getattr',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'getrusage',
            'reason': set([('mm_struct', 'flags'),
                           ('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'sched_setscheduler',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'setresuid', 'reason': set([('task_struct', 'flags')])},
           {'call': 'setitimer',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'ioprio_get',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'vfork',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'setuid', 'reason': set([('task_struct', 'flags')])},
           {'call': 'io_setup', 'reason': set([('mm_struct', 'flags')])},
           {'call': 'mremap', 'reason': set([('mm_struct', 'flags')])},
           {'call': 'io_destroy', 'reason': set([('mm_struct', 'flags')])},
           {'call': 'mbind', 'reason': set([('mm_struct', 'flags')])},
           {'call': 'move_pages',
            'reason': set([('mm_struct', 'flags'),
                           ('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'modify_ldt', 'reason': set([('mm_struct', 'flags')])},
           {'call': 'setpriority',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'mincore', 'reason': set([('mm_struct', 'flags')])},
           {'call': 'clone',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'sched_getparam',
            'reason': set([('task_struct', 'flags'),
                           ('task_struct', 'personality'),
                           ('task_struct', 'timer_slack_ns')])},
           {'call': 'io_cancel', 'reason': set([('mm_struct', 'flags')])}],
 'pread64': [{'call': 'syncfs', 'reason': set([('fd', 'flags')])},
             {'call': 'vmsplice', 'reason': set([('fd', 'flags')])},
             {'call': 'eventfd2', 'reason': set([('file', 'f_mode')])},
             {'call': 'pwritev64', 'reason': set([('fd', 'flags')])},
             {'call': 'swapoff', 'reason': set([('file', 'f_mode')])},
             {'call': 'fremovexattr', 'reason': set([('fd', 'flags')])},
             {'call': 'readahead', 'reason': set([('fd', 'flags')])},
             {'call': 'getdents', 'reason': set([('fd', 'flags')])},
             {'call': 'writev', 'reason': set([('fd', 'flags')])},
             {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
             {'call': 'fchmod', 'reason': set([('fd', 'flags')])},
             {'call': 'signalfd4', 'reason': set([('fd', 'flags')])},
             {'call': 'memfd_create', 'reason': set([('file', 'f_mode')])},
             {'call': 'remap_file_pages',
              'reason': set([('file', 'f_mode')])},
             {'call': 'dup3', 'reason': set([('file', 'f_mode')])},
             {'call': 'read', 'reason': set([('fd', 'flags')])},
             {'call': 'fchown', 'reason': set([('fd', 'flags')])},
             {'call': 'mq_timedreceive', 'reason': set([('fd', 'flags')])},
             {'call': 'utime', 'reason': set([('fd', 'flags')])},
             {'call': 'fsync', 'reason': set([('fd', 'flags')])},
             {'call': 'bpf', 'reason': set([('fd', 'flags')])},
             {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
             {'call': 'fsetxattr', 'reason': set([('fd', 'flags')])},
             {'call': 'sendto', 'reason': set([('fd', 'flags')])},
             {'call': 'epoll_create1', 'reason': set([('file', 'f_mode')])},
             {'call': 'tee', 'reason': set([('fd', 'flags')])},
             {'call': 'sync_file_range', 'reason': set([('fd', 'flags')])},
             {'call': 'lseek', 'reason': set([('fd', 'flags')])},
             {'call': 'connect', 'reason': set([('fd', 'flags')])},
             {'call': 'getsockname', 'reason': set([('fd', 'flags')])},
             {'call': 'epoll_ctl',
              'reason': set([('fd', 'flags'), ('file', 'f_mode')])},
             {'call': 'flock',
              'reason': set([('fd', 'flags'), ('file', 'f_mode')])},
             {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
             {'call': 'fchdir', 'reason': set([('fd', 'flags')])},
             {'call': 'openat', 'reason': set([('file', 'f_mode')])},
             {'call': 'uselib', 'reason': set([('file', 'f_mode')])},
             {'call': 'accept4',
              'reason': set([('fd', 'flags'), ('file', 'f_mode')])},
             {'call': 'old_readdir', 'reason': set([('fd', 'flags')])},
             {'call': 'inotify_rm_watch', 'reason': set([('fd', 'flags')])},
             {'call': 'socketpair', 'reason': set([('file', 'f_mode')])},
             {'call': 'utimensat', 'reason': set([('fd', 'flags')])},
             {'call': 'inotify_add_watch', 'reason': set([('fd', 'flags')])},
             {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
             {'call': 'splice', 'reason': set([('fd', 'flags')])},
             {'call': 'ftruncate', 'reason': set([('fd', 'flags')])},
             {'call': 'preadv', 'reason': set([('fd', 'flags')])},
             {'call': 'getpeername', 'reason': set([('fd', 'flags')])},
             {'call': 'shmat', 'reason': set([('file', 'f_mode')])},
             {'call': 'setsockopt', 'reason': set([('fd', 'flags')])},
             {'call': 'socket', 'reason': set([('file', 'f_mode')])},
             {'call': 'pipe2', 'reason': set([('file', 'f_mode')])},
             {'call': 'fcntl', 'reason': set([('fd', 'flags')])},
             {'call': 'ioctl', 'reason': set([('fd', 'flags')])},
             {'call': 'pwrite64', 'reason': set([('fd', 'flags')])},
             {'call': 'perf_event_open',
              'reason': set([('fd', 'flags'), ('file', 'f_mode')])},
             {'call': 'shmdt', 'reason': set([('file', 'f_mode')])},
             {'call': 'pwritev64v2', 'reason': set([('fd', 'flags')])},
             {'call': 'futimesat', 'reason': set([('fd', 'flags')])},
             {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
             {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
             {'call': 'acct', 'reason': set([('file', 'f_mode')])},
             {'call': 'open', 'reason': set([('file', 'f_mode')])},
             {'call': 'getsockopt', 'reason': set([('fd', 'flags')])},
             {'call': 'mq_getsetattr', 'reason': set([('fd', 'flags')])},
             {'call': 'dup', 'reason': set([('file', 'f_mode')])},
             {'call': 'fdatasync', 'reason': set([('fd', 'flags')])},
             {'call': 'setns', 'reason': set([('file', 'f_mode')])},
             {'call': 'getdents64', 'reason': set([('fd', 'flags')])},
             {'call': 'listen', 'reason': set([('fd', 'flags')])},
             {'call': 'copy_file_range', 'reason': set([('fd', 'flags')])},
             {'call': 'mq_timedsend', 'reason': set([('fd', 'flags')])},
             {'call': 'fgetxattr', 'reason': set([('fd', 'flags')])},
             {'call': 'shmctl', 'reason': set([('file', 'f_mode')])},
             {'call': 'fcntl64', 'reason': set([('fd', 'flags')])},
             {'call': 'swapon', 'reason': set([('file', 'f_mode')])},
             {'call': 'fallocate', 'reason': set([('fd', 'flags')])},
             {'call': 'epoll_wait', 'reason': set([('fd', 'flags')])},
             {'call': 'llseek', 'reason': set([('fd', 'flags')])},
             {'call': 'mmap_pgoff', 'reason': set([('file', 'f_mode')])},
             {'call': 'preadv64v2', 'reason': set([('fd', 'flags')])},
             {'call': 'readv', 'reason': set([('fd', 'flags')])},
             {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
             {'call': 'fstatfs64', 'reason': set([('fd', 'flags')])},
             {'call': 'write', 'reason': set([('fd', 'flags')])},
             {'call': 'mq_notify', 'reason': set([('fd', 'flags')])},
             {'call': 'sendfile', 'reason': set([('fd', 'flags')])},
             {'call': 'mq_open', 'reason': set([('file', 'f_mode')])},
             {'call': 'open_by_handle_at',
              'reason': set([('file', 'f_mode')])},
             {'call': 'bind', 'reason': set([('fd', 'flags')])},
             {'call': 'flistxattr', 'reason': set([('fd', 'flags')])},
             {'call': 'sendfile64', 'reason': set([('fd', 'flags')])}],
 'preadv': [{'call': 'eventfd2', 'reason': set([('file', 'f_mode')])},
            {'call': 'swapoff', 'reason': set([('file', 'f_mode')])},
            {'call': 'memfd_create', 'reason': set([('file', 'f_mode')])},
            {'call': 'remap_file_pages', 'reason': set([('file', 'f_mode')])},
            {'call': 'dup3', 'reason': set([('file', 'f_mode')])},
            {'call': 'epoll_create1', 'reason': set([('file', 'f_mode')])},
            {'call': 'epoll_ctl', 'reason': set([('file', 'f_mode')])},
            {'call': 'flock', 'reason': set([('file', 'f_mode')])},
            {'call': 'openat', 'reason': set([('file', 'f_mode')])},
            {'call': 'uselib', 'reason': set([('file', 'f_mode')])},
            {'call': 'accept4', 'reason': set([('file', 'f_mode')])},
            {'call': 'socketpair', 'reason': set([('file', 'f_mode')])},
            {'call': 'shmat', 'reason': set([('file', 'f_mode')])},
            {'call': 'socket', 'reason': set([('file', 'f_mode')])},
            {'call': 'pipe2', 'reason': set([('file', 'f_mode')])},
            {'call': 'perf_event_open', 'reason': set([('file', 'f_mode')])},
            {'call': 'shmdt', 'reason': set([('file', 'f_mode')])},
            {'call': 'acct', 'reason': set([('file', 'f_mode')])},
            {'call': 'open', 'reason': set([('file', 'f_mode')])},
            {'call': 'dup', 'reason': set([('file', 'f_mode')])},
            {'call': 'setns', 'reason': set([('file', 'f_mode')])},
            {'call': 'shmctl', 'reason': set([('file', 'f_mode')])},
            {'call': 'swapon', 'reason': set([('file', 'f_mode')])},
            {'call': 'mmap_pgoff', 'reason': set([('file', 'f_mode')])},
            {'call': 'mq_open', 'reason': set([('file', 'f_mode')])},
            {'call': 'open_by_handle_at',
             'reason': set([('file', 'f_mode')])}],
 'preadv2': [{'call': 'eventfd2', 'reason': set([('file', 'f_mode')])},
             {'call': 'swapoff', 'reason': set([('file', 'f_mode')])},
             {'call': 'memfd_create', 'reason': set([('file', 'f_mode')])},
             {'call': 'remap_file_pages',
              'reason': set([('file', 'f_mode')])},
             {'call': 'dup3', 'reason': set([('file', 'f_mode')])},
             {'call': 'epoll_create1', 'reason': set([('file', 'f_mode')])},
             {'call': 'epoll_ctl', 'reason': set([('file', 'f_mode')])},
             {'call': 'flock', 'reason': set([('file', 'f_mode')])},
             {'call': 'openat', 'reason': set([('file', 'f_mode')])},
             {'call': 'uselib', 'reason': set([('file', 'f_mode')])},
             {'call': 'accept4', 'reason': set([('file', 'f_mode')])},
             {'call': 'socketpair', 'reason': set([('file', 'f_mode')])},
             {'call': 'shmat', 'reason': set([('file', 'f_mode')])},
             {'call': 'socket', 'reason': set([('file', 'f_mode')])},
             {'call': 'pipe2', 'reason': set([('file', 'f_mode')])},
             {'call': 'perf_event_open', 'reason': set([('file', 'f_mode')])},
             {'call': 'shmdt', 'reason': set([('file', 'f_mode')])},
             {'call': 'acct', 'reason': set([('file', 'f_mode')])},
             {'call': 'open', 'reason': set([('file', 'f_mode')])},
             {'call': 'dup', 'reason': set([('file', 'f_mode')])},
             {'call': 'setns', 'reason': set([('file', 'f_mode')])},
             {'call': 'shmctl', 'reason': set([('file', 'f_mode')])},
             {'call': 'swapon', 'reason': set([('file', 'f_mode')])},
             {'call': 'mmap_pgoff', 'reason': set([('file', 'f_mode')])},
             {'call': 'mq_open', 'reason': set([('file', 'f_mode')])},
             {'call': 'open_by_handle_at',
              'reason': set([('file', 'f_mode')])}],
 'preadv64': [{'call': 'eventfd2', 'reason': set([('file', 'f_mode')])},
              {'call': 'swapoff', 'reason': set([('file', 'f_mode')])},
              {'call': 'memfd_create', 'reason': set([('file', 'f_mode')])},
              {'call': 'remap_file_pages',
               'reason': set([('file', 'f_mode')])},
              {'call': 'dup3', 'reason': set([('file', 'f_mode')])},
              {'call': 'epoll_create1', 'reason': set([('file', 'f_mode')])},
              {'call': 'epoll_ctl', 'reason': set([('file', 'f_mode')])},
              {'call': 'flock', 'reason': set([('file', 'f_mode')])},
              {'call': 'openat', 'reason': set([('file', 'f_mode')])},
              {'call': 'uselib', 'reason': set([('file', 'f_mode')])},
              {'call': 'accept4', 'reason': set([('file', 'f_mode')])},
              {'call': 'socketpair', 'reason': set([('file', 'f_mode')])},
              {'call': 'shmat', 'reason': set([('file', 'f_mode')])},
              {'call': 'socket', 'reason': set([('file', 'f_mode')])},
              {'call': 'pipe2', 'reason': set([('file', 'f_mode')])},
              {'call': 'perf_event_open',
               'reason': set([('file', 'f_mode')])},
              {'call': 'shmdt', 'reason': set([('file', 'f_mode')])},
              {'call': 'acct', 'reason': set([('file', 'f_mode')])},
              {'call': 'open', 'reason': set([('file', 'f_mode')])},
              {'call': 'dup', 'reason': set([('file', 'f_mode')])},
              {'call': 'setns', 'reason': set([('file', 'f_mode')])},
              {'call': 'shmctl', 'reason': set([('file', 'f_mode')])},
              {'call': 'swapon', 'reason': set([('file', 'f_mode')])},
              {'call': 'mmap_pgoff', 'reason': set([('file', 'f_mode')])},
              {'call': 'mq_open', 'reason': set([('file', 'f_mode')])},
              {'call': 'open_by_handle_at',
               'reason': set([('file', 'f_mode')])}],
 'preadv64v2': [{'call': 'eventfd2', 'reason': set([('file', 'f_mode')])},
                {'call': 'swapoff', 'reason': set([('file', 'f_mode')])},
                {'call': 'memfd_create', 'reason': set([('file', 'f_mode')])},
                {'call': 'remap_file_pages',
                 'reason': set([('file', 'f_mode')])},
                {'call': 'dup3', 'reason': set([('file', 'f_mode')])},
                {'call': 'epoll_create1',
                 'reason': set([('file', 'f_mode')])},
                {'call': 'epoll_ctl', 'reason': set([('file', 'f_mode')])},
                {'call': 'flock', 'reason': set([('file', 'f_mode')])},
                {'call': 'openat', 'reason': set([('file', 'f_mode')])},
                {'call': 'uselib', 'reason': set([('file', 'f_mode')])},
                {'call': 'accept4', 'reason': set([('file', 'f_mode')])},
                {'call': 'socketpair', 'reason': set([('file', 'f_mode')])},
                {'call': 'shmat', 'reason': set([('file', 'f_mode')])},
                {'call': 'socket', 'reason': set([('file', 'f_mode')])},
                {'call': 'pipe2', 'reason': set([('file', 'f_mode')])},
                {'call': 'perf_event_open',
                 'reason': set([('file', 'f_mode')])},
                {'call': 'shmdt', 'reason': set([('file', 'f_mode')])},
                {'call': 'acct', 'reason': set([('file', 'f_mode')])},
                {'call': 'open', 'reason': set([('file', 'f_mode')])},
                {'call': 'dup', 'reason': set([('file', 'f_mode')])},
                {'call': 'setns', 'reason': set([('file', 'f_mode')])},
                {'call': 'shmctl', 'reason': set([('file', 'f_mode')])},
                {'call': 'swapon', 'reason': set([('file', 'f_mode')])},
                {'call': 'mmap_pgoff', 'reason': set([('file', 'f_mode')])},
                {'call': 'mq_open', 'reason': set([('file', 'f_mode')])},
                {'call': 'open_by_handle_at',
                 'reason': set([('file', 'f_mode')])}],
 'prlimit64': [{'call': 'keyctl',
                'reason': set([('cred', 'user_ns'),
                               ('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'rt_sigtimedwait',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'setfsuid', 'reason': set([('cred', 'user_ns')])},
               {'call': 'msgrcv',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'kill',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'getresuid16', 'reason': set([('cred', 'user_ns')])},
               {'call': 'getresgid', 'reason': set([('cred', 'user_ns')])},
               {'call': 'sched_getaffinity',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'sched_setparam',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'setgid',
                'reason': set([('cred', 'egid'),
                               ('cred', 'gid'),
                               ('cred', 'sgid'),
                               ('cred', 'user_ns')])},
               {'call': 'ioprio_set',
                'reason': set([('cred', 'user_ns'),
                               ('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'capset', 'reason': set([('cred', 'user_ns')])},
               {'call': 'getppid',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'mq_timedreceive',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'getresgid16', 'reason': set([('cred', 'user_ns')])},
               {'call': 'capget',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'sched_setaffinity',
                'reason': set([('cred', 'user_ns'),
                               ('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'setfsgid', 'reason': set([('cred', 'user_ns')])},
               {'call': 'unshare', 'reason': set([('cred', 'user_ns')])},
               {'call': 'signal',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'setreuid',
                'reason': set([('cred', 'euid'),
                               ('cred', 'suid'),
                               ('cred', 'uid'),
                               ('cred', 'user_ns')])},
               {'call': 'semtimedop',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'umount',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'sched_rr_get_interval',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'epoll_create1',
                'reason': set([('cred', 'user_ns')])},
               {'call': 'getresuid', 'reason': set([('cred', 'user_ns')])},
               {'call': 'rt_sigprocmask',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'setsid',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'sigaltstack',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'sched_setattr',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'setrlimit',
                'reason': set([('rlimit', 'rlim_cur'),
                               ('rlimit', 'rlim_max')])},
               {'call': 'migrate_pages',
                'reason': set([('cred', 'user_ns'),
                               ('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'getitimer',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'setpgid',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'setresgid',
                'reason': set([('cred', 'egid'),
                               ('cred', 'gid'),
                               ('cred', 'sgid'),
                               ('cred', 'user_ns')])},
               {'call': 'setregid',
                'reason': set([('cred', 'egid'),
                               ('cred', 'gid'),
                               ('cred', 'sgid'),
                               ('cred', 'user_ns')])},
               {'call': 'getsid',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'old_getrlimit',
                'reason': set([('rlimit', 'rlim_cur'),
                               ('rlimit', 'rlim_max')])},
               {'call': 'perf_event_open',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'getgroups16', 'reason': set([('cred', 'user_ns')])},
               {'call': 'rt_sigaction',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'getpgid',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'getpriority',
                'reason': set([('cred', 'user_ns'),
                               ('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'sigaction',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'faccessat', 'reason': set([('cred', 'user_ns')])},
               {'call': 'setns',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'fork',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'get_robust_list',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'mq_timedsend',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'sched_getscheduler',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'ptrace',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'sched_getattr',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'getrusage',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'sched_setscheduler',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'setresuid',
                'reason': set([('cred', 'euid'),
                               ('cred', 'suid'),
                               ('cred', 'uid'),
                               ('cred', 'user_ns')])},
               {'call': 'setitimer',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'ioprio_get',
                'reason': set([('cred', 'user_ns'),
                               ('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'vfork',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'setuid',
                'reason': set([('cred', 'euid'),
                               ('cred', 'suid'),
                               ('cred', 'uid'),
                               ('cred', 'user_ns')])},
               {'call': 'prctl',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'move_pages',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'getgroups', 'reason': set([('cred', 'user_ns')])},
               {'call': 'setpriority',
                'reason': set([('cred', 'user_ns'),
                               ('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'clone',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])},
               {'call': 'sched_getparam',
                'reason': set([('task_struct', 'cred'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'real_cred'),
                               ('task_struct', 'sighand')])}],
 'pselect6': [{'call': 'keyctl', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'rt_sigtimedwait',
               'reason': set([('mm_segment_t', 'seg'),
                              ('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'msgrcv', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'mq_unlink',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'kill', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'swapoff',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'sched_getaffinity',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'sched_setparam',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'fchmod',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'memfd_create',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'ioprio_set',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'readlinkat',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'io_getevents',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'getppid', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'fchown',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'ioperm', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'mq_timedreceive',
               'reason': set([('mm_segment_t', 'seg'),
                              ('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'capget', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'utime',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'sched_setaffinity',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'signal', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'semtimedop',
               'reason': set([('mm_segment_t', 'seg'),
                              ('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'umount', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'settimeofday',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'sched_rr_get_interval',
               'reason': set([('mm_segment_t', 'seg'),
                              ('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'timerfd_gettime',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'uselib',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'rt_sigprocmask',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'setsid', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'sigaltstack',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'sched_setattr',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'migrate_pages',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'getitimer', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'fchmodat',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'setpgid', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'inotify_add_watch',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'timer_settime',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'ftruncate',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'timer_gettime',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'getsid', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'ioctl',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'prlimit64', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'perf_event_open',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'linkat',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'stime',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'rt_sigaction',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'futimesat',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'getpgid', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'poll',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'select',
               'reason': set([('compat_timespec', 'tv_nsec'),
                              ('compat_timespec', 'tv_sec'),
                              ('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'unlink',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'getpriority',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'sigaction', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'nanosleep',
               'reason': set([('compat_timespec', 'tv_nsec'),
                              ('compat_timespec', 'tv_sec'),
                              ('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'mq_getsetattr',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'faccessat',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'setns', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'fork', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'get_robust_list',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'mq_timedsend',
               'reason': set([('mm_segment_t', 'seg'),
                              ('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'sched_getscheduler',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'ptrace', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'swapon',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'epoll_wait',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'sched_getattr',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'fchownat',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'getrusage', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'fstat',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'timerfd_settime',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'sched_setscheduler',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'setitimer', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'ioprio_get',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'vfork', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'prctl', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'move_pages',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'setpriority',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'mq_notify',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'sendfile',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'newfstat',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'clone', 'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'clock_nanosleep',
               'reason': set([('compat_timespec', 'tv_nsec'),
                              ('compat_timespec', 'tv_sec'),
                              ('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'unlinkat',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'sched_getparam',
               'reason': set([('mm_segment_t', 'seg')])},
              {'call': 'futex',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'recvmmsg',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'sendfile64',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'ppoll',
               'reason': set([('compat_timespec', 'tv_nsec'),
                              ('compat_timespec', 'tv_sec'),
                              ('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])}],
 'ptrace': [{'call': 'keyctl',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'rt_sigtimedwait',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'msgrcv',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'kill',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'pause', 'reason': set([('task_struct', 'state')])},
            {'call': 'sched_getaffinity',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'sched_setparam',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'ioprio_set',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'getppid',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'mq_timedreceive',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'capget',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'sched_setaffinity',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'signal',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'setreuid', 'reason': set([('task_struct', 'flags')])},
            {'call': 'semtimedop',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'umount',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'sched_rr_get_interval',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'rt_sigprocmask',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'setsid',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'sigaltstack',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'sched_setattr',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'migrate_pages',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'getitimer',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'setpgid',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'rt_sigsuspend',
             'reason': set([('task_struct', 'state')])},
            {'call': 'getsid',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'prlimit64',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'perf_event_open',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'rt_sigaction',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'getpgid',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'getpriority',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'sigaction',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'setns',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'fork',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'get_robust_list',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'mq_timedsend',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'sched_getscheduler',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'epoll_wait', 'reason': set([('task_struct', 'state')])},
            {'call': 'sched_getattr',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'getrusage',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'sched_setscheduler',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'setresuid', 'reason': set([('task_struct', 'flags')])},
            {'call': 'setitimer',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'ioprio_get',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'vfork',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'setuid', 'reason': set([('task_struct', 'flags')])},
            {'call': 'prctl',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'move_pages',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'setpriority',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'clone',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])},
            {'call': 'sigsuspend', 'reason': set([('task_struct', 'state')])},
            {'call': 'sched_getparam',
             'reason': set([('task_struct', 'exit_state'),
                            ('task_struct', 'flags'),
                            ('task_struct', 'parent'),
                            ('task_struct', 'ptrace'),
                            ('task_struct', 'real_parent'),
                            ('task_struct', 'state')])}],
 'pwrite64': [{'call': 'syncfs', 'reason': set([('fd', 'flags')])},
              {'call': 'vmsplice', 'reason': set([('fd', 'flags')])},
              {'call': 'eventfd2', 'reason': set([('file', 'f_mode')])},
              {'call': 'pwritev64', 'reason': set([('fd', 'flags')])},
              {'call': 'swapoff', 'reason': set([('file', 'f_mode')])},
              {'call': 'fremovexattr', 'reason': set([('fd', 'flags')])},
              {'call': 'readahead', 'reason': set([('fd', 'flags')])},
              {'call': 'getdents', 'reason': set([('fd', 'flags')])},
              {'call': 'writev', 'reason': set([('fd', 'flags')])},
              {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
              {'call': 'fchmod', 'reason': set([('fd', 'flags')])},
              {'call': 'pread64', 'reason': set([('fd', 'flags')])},
              {'call': 'signalfd4', 'reason': set([('fd', 'flags')])},
              {'call': 'memfd_create', 'reason': set([('file', 'f_mode')])},
              {'call': 'remap_file_pages',
               'reason': set([('file', 'f_mode')])},
              {'call': 'dup3', 'reason': set([('file', 'f_mode')])},
              {'call': 'read', 'reason': set([('fd', 'flags')])},
              {'call': 'fchown', 'reason': set([('fd', 'flags')])},
              {'call': 'mq_timedreceive', 'reason': set([('fd', 'flags')])},
              {'call': 'utime', 'reason': set([('fd', 'flags')])},
              {'call': 'fsync', 'reason': set([('fd', 'flags')])},
              {'call': 'bpf', 'reason': set([('fd', 'flags')])},
              {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
              {'call': 'fsetxattr', 'reason': set([('fd', 'flags')])},
              {'call': 'sendto', 'reason': set([('fd', 'flags')])},
              {'call': 'epoll_create1', 'reason': set([('file', 'f_mode')])},
              {'call': 'tee', 'reason': set([('fd', 'flags')])},
              {'call': 'sync_file_range', 'reason': set([('fd', 'flags')])},
              {'call': 'lseek', 'reason': set([('fd', 'flags')])},
              {'call': 'connect', 'reason': set([('fd', 'flags')])},
              {'call': 'getsockname', 'reason': set([('fd', 'flags')])},
              {'call': 'epoll_ctl',
               'reason': set([('fd', 'flags'), ('file', 'f_mode')])},
              {'call': 'flock',
               'reason': set([('fd', 'flags'), ('file', 'f_mode')])},
              {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
              {'call': 'fchdir', 'reason': set([('fd', 'flags')])},
              {'call': 'openat', 'reason': set([('file', 'f_mode')])},
              {'call': 'uselib', 'reason': set([('file', 'f_mode')])},
              {'call': 'accept4',
               'reason': set([('fd', 'flags'), ('file', 'f_mode')])},
              {'call': 'old_readdir', 'reason': set([('fd', 'flags')])},
              {'call': 'inotify_rm_watch', 'reason': set([('fd', 'flags')])},
              {'call': 'socketpair', 'reason': set([('file', 'f_mode')])},
              {'call': 'utimensat', 'reason': set([('fd', 'flags')])},
              {'call': 'inotify_add_watch', 'reason': set([('fd', 'flags')])},
              {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
              {'call': 'splice', 'reason': set([('fd', 'flags')])},
              {'call': 'ftruncate', 'reason': set([('fd', 'flags')])},
              {'call': 'preadv', 'reason': set([('fd', 'flags')])},
              {'call': 'getpeername', 'reason': set([('fd', 'flags')])},
              {'call': 'shmat', 'reason': set([('file', 'f_mode')])},
              {'call': 'setsockopt', 'reason': set([('fd', 'flags')])},
              {'call': 'socket', 'reason': set([('file', 'f_mode')])},
              {'call': 'pipe2', 'reason': set([('file', 'f_mode')])},
              {'call': 'fcntl', 'reason': set([('fd', 'flags')])},
              {'call': 'ioctl', 'reason': set([('fd', 'flags')])},
              {'call': 'perf_event_open',
               'reason': set([('fd', 'flags'), ('file', 'f_mode')])},
              {'call': 'shmdt', 'reason': set([('file', 'f_mode')])},
              {'call': 'pwritev64v2', 'reason': set([('fd', 'flags')])},
              {'call': 'futimesat', 'reason': set([('fd', 'flags')])},
              {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
              {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
              {'call': 'acct', 'reason': set([('file', 'f_mode')])},
              {'call': 'open', 'reason': set([('file', 'f_mode')])},
              {'call': 'getsockopt', 'reason': set([('fd', 'flags')])},
              {'call': 'mq_getsetattr', 'reason': set([('fd', 'flags')])},
              {'call': 'dup', 'reason': set([('file', 'f_mode')])},
              {'call': 'fdatasync', 'reason': set([('fd', 'flags')])},
              {'call': 'setns', 'reason': set([('file', 'f_mode')])},
              {'call': 'getdents64', 'reason': set([('fd', 'flags')])},
              {'call': 'listen', 'reason': set([('fd', 'flags')])},
              {'call': 'copy_file_range', 'reason': set([('fd', 'flags')])},
              {'call': 'mq_timedsend', 'reason': set([('fd', 'flags')])},
              {'call': 'fgetxattr', 'reason': set([('fd', 'flags')])},
              {'call': 'shmctl', 'reason': set([('file', 'f_mode')])},
              {'call': 'fcntl64', 'reason': set([('fd', 'flags')])},
              {'call': 'swapon', 'reason': set([('file', 'f_mode')])},
              {'call': 'fallocate', 'reason': set([('fd', 'flags')])},
              {'call': 'epoll_wait', 'reason': set([('fd', 'flags')])},
              {'call': 'llseek', 'reason': set([('fd', 'flags')])},
              {'call': 'mmap_pgoff', 'reason': set([('file', 'f_mode')])},
              {'call': 'preadv64v2', 'reason': set([('fd', 'flags')])},
              {'call': 'readv', 'reason': set([('fd', 'flags')])},
              {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
              {'call': 'fstatfs64', 'reason': set([('fd', 'flags')])},
              {'call': 'write', 'reason': set([('fd', 'flags')])},
              {'call': 'mq_notify', 'reason': set([('fd', 'flags')])},
              {'call': 'sendfile', 'reason': set([('fd', 'flags')])},
              {'call': 'mq_open', 'reason': set([('file', 'f_mode')])},
              {'call': 'open_by_handle_at',
               'reason': set([('file', 'f_mode')])},
              {'call': 'bind', 'reason': set([('fd', 'flags')])},
              {'call': 'flistxattr', 'reason': set([('fd', 'flags')])},
              {'call': 'sendfile64', 'reason': set([('fd', 'flags')])}],
 'pwritev': [{'call': 'eventfd2', 'reason': set([('file', 'f_mode')])},
             {'call': 'swapoff', 'reason': set([('file', 'f_mode')])},
             {'call': 'memfd_create', 'reason': set([('file', 'f_mode')])},
             {'call': 'remap_file_pages',
              'reason': set([('file', 'f_mode')])},
             {'call': 'dup3', 'reason': set([('file', 'f_mode')])},
             {'call': 'epoll_create1', 'reason': set([('file', 'f_mode')])},
             {'call': 'epoll_ctl', 'reason': set([('file', 'f_mode')])},
             {'call': 'flock', 'reason': set([('file', 'f_mode')])},
             {'call': 'openat', 'reason': set([('file', 'f_mode')])},
             {'call': 'uselib', 'reason': set([('file', 'f_mode')])},
             {'call': 'accept4', 'reason': set([('file', 'f_mode')])},
             {'call': 'socketpair', 'reason': set([('file', 'f_mode')])},
             {'call': 'shmat', 'reason': set([('file', 'f_mode')])},
             {'call': 'socket', 'reason': set([('file', 'f_mode')])},
             {'call': 'pipe2', 'reason': set([('file', 'f_mode')])},
             {'call': 'perf_event_open', 'reason': set([('file', 'f_mode')])},
             {'call': 'shmdt', 'reason': set([('file', 'f_mode')])},
             {'call': 'acct', 'reason': set([('file', 'f_mode')])},
             {'call': 'open', 'reason': set([('file', 'f_mode')])},
             {'call': 'dup', 'reason': set([('file', 'f_mode')])},
             {'call': 'setns', 'reason': set([('file', 'f_mode')])},
             {'call': 'shmctl', 'reason': set([('file', 'f_mode')])},
             {'call': 'swapon', 'reason': set([('file', 'f_mode')])},
             {'call': 'mmap_pgoff', 'reason': set([('file', 'f_mode')])},
             {'call': 'mq_open', 'reason': set([('file', 'f_mode')])},
             {'call': 'open_by_handle_at',
              'reason': set([('file', 'f_mode')])}],
 'pwritev2': [{'call': 'eventfd2', 'reason': set([('file', 'f_mode')])},
              {'call': 'swapoff', 'reason': set([('file', 'f_mode')])},
              {'call': 'memfd_create', 'reason': set([('file', 'f_mode')])},
              {'call': 'remap_file_pages',
               'reason': set([('file', 'f_mode')])},
              {'call': 'dup3', 'reason': set([('file', 'f_mode')])},
              {'call': 'epoll_create1', 'reason': set([('file', 'f_mode')])},
              {'call': 'epoll_ctl', 'reason': set([('file', 'f_mode')])},
              {'call': 'flock', 'reason': set([('file', 'f_mode')])},
              {'call': 'openat', 'reason': set([('file', 'f_mode')])},
              {'call': 'uselib', 'reason': set([('file', 'f_mode')])},
              {'call': 'accept4', 'reason': set([('file', 'f_mode')])},
              {'call': 'socketpair', 'reason': set([('file', 'f_mode')])},
              {'call': 'shmat', 'reason': set([('file', 'f_mode')])},
              {'call': 'socket', 'reason': set([('file', 'f_mode')])},
              {'call': 'pipe2', 'reason': set([('file', 'f_mode')])},
              {'call': 'perf_event_open',
               'reason': set([('file', 'f_mode')])},
              {'call': 'shmdt', 'reason': set([('file', 'f_mode')])},
              {'call': 'acct', 'reason': set([('file', 'f_mode')])},
              {'call': 'open', 'reason': set([('file', 'f_mode')])},
              {'call': 'dup', 'reason': set([('file', 'f_mode')])},
              {'call': 'setns', 'reason': set([('file', 'f_mode')])},
              {'call': 'shmctl', 'reason': set([('file', 'f_mode')])},
              {'call': 'swapon', 'reason': set([('file', 'f_mode')])},
              {'call': 'mmap_pgoff', 'reason': set([('file', 'f_mode')])},
              {'call': 'mq_open', 'reason': set([('file', 'f_mode')])},
              {'call': 'open_by_handle_at',
               'reason': set([('file', 'f_mode')])}],
 'pwritev64': [{'call': 'eventfd2', 'reason': set([('file', 'f_mode')])},
               {'call': 'swapoff', 'reason': set([('file', 'f_mode')])},
               {'call': 'memfd_create', 'reason': set([('file', 'f_mode')])},
               {'call': 'remap_file_pages',
                'reason': set([('file', 'f_mode')])},
               {'call': 'dup3', 'reason': set([('file', 'f_mode')])},
               {'call': 'epoll_create1', 'reason': set([('file', 'f_mode')])},
               {'call': 'epoll_ctl', 'reason': set([('file', 'f_mode')])},
               {'call': 'flock', 'reason': set([('file', 'f_mode')])},
               {'call': 'openat', 'reason': set([('file', 'f_mode')])},
               {'call': 'uselib', 'reason': set([('file', 'f_mode')])},
               {'call': 'accept4', 'reason': set([('file', 'f_mode')])},
               {'call': 'socketpair', 'reason': set([('file', 'f_mode')])},
               {'call': 'shmat', 'reason': set([('file', 'f_mode')])},
               {'call': 'socket', 'reason': set([('file', 'f_mode')])},
               {'call': 'pipe2', 'reason': set([('file', 'f_mode')])},
               {'call': 'perf_event_open',
                'reason': set([('file', 'f_mode')])},
               {'call': 'shmdt', 'reason': set([('file', 'f_mode')])},
               {'call': 'acct', 'reason': set([('file', 'f_mode')])},
               {'call': 'open', 'reason': set([('file', 'f_mode')])},
               {'call': 'dup', 'reason': set([('file', 'f_mode')])},
               {'call': 'setns', 'reason': set([('file', 'f_mode')])},
               {'call': 'shmctl', 'reason': set([('file', 'f_mode')])},
               {'call': 'swapon', 'reason': set([('file', 'f_mode')])},
               {'call': 'mmap_pgoff', 'reason': set([('file', 'f_mode')])},
               {'call': 'mq_open', 'reason': set([('file', 'f_mode')])},
               {'call': 'open_by_handle_at',
                'reason': set([('file', 'f_mode')])}],
 'pwritev64v2': [{'call': 'eventfd2', 'reason': set([('file', 'f_mode')])},
                 {'call': 'swapoff', 'reason': set([('file', 'f_mode')])},
                 {'call': 'memfd_create',
                  'reason': set([('file', 'f_mode')])},
                 {'call': 'remap_file_pages',
                  'reason': set([('file', 'f_mode')])},
                 {'call': 'dup3', 'reason': set([('file', 'f_mode')])},
                 {'call': 'epoll_create1',
                  'reason': set([('file', 'f_mode')])},
                 {'call': 'epoll_ctl', 'reason': set([('file', 'f_mode')])},
                 {'call': 'flock', 'reason': set([('file', 'f_mode')])},
                 {'call': 'openat', 'reason': set([('file', 'f_mode')])},
                 {'call': 'uselib', 'reason': set([('file', 'f_mode')])},
                 {'call': 'accept4', 'reason': set([('file', 'f_mode')])},
                 {'call': 'socketpair', 'reason': set([('file', 'f_mode')])},
                 {'call': 'shmat', 'reason': set([('file', 'f_mode')])},
                 {'call': 'socket', 'reason': set([('file', 'f_mode')])},
                 {'call': 'pipe2', 'reason': set([('file', 'f_mode')])},
                 {'call': 'perf_event_open',
                  'reason': set([('file', 'f_mode')])},
                 {'call': 'shmdt', 'reason': set([('file', 'f_mode')])},
                 {'call': 'acct', 'reason': set([('file', 'f_mode')])},
                 {'call': 'open', 'reason': set([('file', 'f_mode')])},
                 {'call': 'dup', 'reason': set([('file', 'f_mode')])},
                 {'call': 'setns', 'reason': set([('file', 'f_mode')])},
                 {'call': 'shmctl', 'reason': set([('file', 'f_mode')])},
                 {'call': 'swapon', 'reason': set([('file', 'f_mode')])},
                 {'call': 'mmap_pgoff', 'reason': set([('file', 'f_mode')])},
                 {'call': 'mq_open', 'reason': set([('file', 'f_mode')])},
                 {'call': 'open_by_handle_at',
                  'reason': set([('file', 'f_mode')])}],
 'quotactl': [{'call': 'syncfs',
               'reason': set([('super_block', 's_flags'),
                              ('super_block', 's_qcop'),
                              ('super_block', 's_quota_types')])},
              {'call': 'sysfs', 'reason': set([('filename', 'name')])},
              {'call': 'mq_unlink', 'reason': set([('filename', 'name')])},
              {'call': 'swapoff', 'reason': set([('filename', 'name')])},
              {'call': 'ustat',
               'reason': set([('super_block', 's_flags'),
                              ('super_block', 's_qcop'),
                              ('super_block', 's_quota_types')])},
              {'call': 'umount',
               'reason': set([('super_block', 's_flags'),
                              ('super_block', 's_qcop'),
                              ('super_block', 's_quota_types')])},
              {'call': 'openat', 'reason': set([('filename', 'name')])},
              {'call': 'uselib', 'reason': set([('filename', 'name')])},
              {'call': 'renameat2', 'reason': set([('filename', 'name')])},
              {'call': 'symlinkat', 'reason': set([('filename', 'name')])},
              {'call': 'acct', 'reason': set([('filename', 'name')])},
              {'call': 'open', 'reason': set([('filename', 'name')])},
              {'call': 'unlink', 'reason': set([('filename', 'name')])},
              {'call': 'rmdir', 'reason': set([('filename', 'name')])},
              {'call': 'swapon',
               'reason': set([('filename', 'name'),
                              ('super_block', 's_flags'),
                              ('super_block', 's_qcop'),
                              ('super_block', 's_quota_types')])},
              {'call': 'mq_open', 'reason': set([('filename', 'name')])},
              {'call': 'unlinkat', 'reason': set([('filename', 'name')])}],
 'read': [{'call': 'syncfs', 'reason': set([('fd', 'flags')])},
          {'call': 'vmsplice', 'reason': set([('fd', 'flags')])},
          {'call': 'pwritev64', 'reason': set([('fd', 'flags')])},
          {'call': 'fremovexattr', 'reason': set([('fd', 'flags')])},
          {'call': 'readahead', 'reason': set([('fd', 'flags')])},
          {'call': 'getdents', 'reason': set([('fd', 'flags')])},
          {'call': 'writev', 'reason': set([('fd', 'flags')])},
          {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
          {'call': 'fchmod', 'reason': set([('fd', 'flags')])},
          {'call': 'pread64', 'reason': set([('fd', 'flags')])},
          {'call': 'signalfd4', 'reason': set([('fd', 'flags')])},
          {'call': 'fchown', 'reason': set([('fd', 'flags')])},
          {'call': 'mq_timedreceive', 'reason': set([('fd', 'flags')])},
          {'call': 'utime', 'reason': set([('fd', 'flags')])},
          {'call': 'fsync', 'reason': set([('fd', 'flags')])},
          {'call': 'bpf', 'reason': set([('fd', 'flags')])},
          {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
          {'call': 'fsetxattr', 'reason': set([('fd', 'flags')])},
          {'call': 'sendto', 'reason': set([('fd', 'flags')])},
          {'call': 'tee', 'reason': set([('fd', 'flags')])},
          {'call': 'sync_file_range', 'reason': set([('fd', 'flags')])},
          {'call': 'lseek', 'reason': set([('fd', 'flags')])},
          {'call': 'connect', 'reason': set([('fd', 'flags')])},
          {'call': 'getsockname', 'reason': set([('fd', 'flags')])},
          {'call': 'epoll_ctl', 'reason': set([('fd', 'flags')])},
          {'call': 'flock', 'reason': set([('fd', 'flags')])},
          {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
          {'call': 'fchdir', 'reason': set([('fd', 'flags')])},
          {'call': 'accept4', 'reason': set([('fd', 'flags')])},
          {'call': 'old_readdir', 'reason': set([('fd', 'flags')])},
          {'call': 'inotify_rm_watch', 'reason': set([('fd', 'flags')])},
          {'call': 'utimensat', 'reason': set([('fd', 'flags')])},
          {'call': 'inotify_add_watch', 'reason': set([('fd', 'flags')])},
          {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
          {'call': 'splice', 'reason': set([('fd', 'flags')])},
          {'call': 'ftruncate', 'reason': set([('fd', 'flags')])},
          {'call': 'preadv', 'reason': set([('fd', 'flags')])},
          {'call': 'getpeername', 'reason': set([('fd', 'flags')])},
          {'call': 'setsockopt', 'reason': set([('fd', 'flags')])},
          {'call': 'fcntl', 'reason': set([('fd', 'flags')])},
          {'call': 'ioctl', 'reason': set([('fd', 'flags')])},
          {'call': 'pwrite64', 'reason': set([('fd', 'flags')])},
          {'call': 'perf_event_open', 'reason': set([('fd', 'flags')])},
          {'call': 'pwritev64v2', 'reason': set([('fd', 'flags')])},
          {'call': 'futimesat', 'reason': set([('fd', 'flags')])},
          {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
          {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
          {'call': 'getsockopt', 'reason': set([('fd', 'flags')])},
          {'call': 'mq_getsetattr', 'reason': set([('fd', 'flags')])},
          {'call': 'fdatasync', 'reason': set([('fd', 'flags')])},
          {'call': 'getdents64', 'reason': set([('fd', 'flags')])},
          {'call': 'listen', 'reason': set([('fd', 'flags')])},
          {'call': 'copy_file_range', 'reason': set([('fd', 'flags')])},
          {'call': 'mq_timedsend', 'reason': set([('fd', 'flags')])},
          {'call': 'fgetxattr', 'reason': set([('fd', 'flags')])},
          {'call': 'fcntl64', 'reason': set([('fd', 'flags')])},
          {'call': 'fallocate', 'reason': set([('fd', 'flags')])},
          {'call': 'epoll_wait', 'reason': set([('fd', 'flags')])},
          {'call': 'llseek', 'reason': set([('fd', 'flags')])},
          {'call': 'preadv64v2', 'reason': set([('fd', 'flags')])},
          {'call': 'readv', 'reason': set([('fd', 'flags')])},
          {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
          {'call': 'fstatfs64', 'reason': set([('fd', 'flags')])},
          {'call': 'write', 'reason': set([('fd', 'flags')])},
          {'call': 'mq_notify', 'reason': set([('fd', 'flags')])},
          {'call': 'sendfile', 'reason': set([('fd', 'flags')])},
          {'call': 'bind', 'reason': set([('fd', 'flags')])},
          {'call': 'flistxattr', 'reason': set([('fd', 'flags')])},
          {'call': 'sendfile64', 'reason': set([('fd', 'flags')])}],
 'readahead': [{'call': 'syncfs', 'reason': set([('fd', 'flags')])},
               {'call': 'vmsplice', 'reason': set([('fd', 'flags')])},
               {'call': 'eventfd2', 'reason': set([('file', 'f_mode')])},
               {'call': 'mq_unlink',
                'reason': set([('address_space', 'a_ops')])},
               {'call': 'pwritev64', 'reason': set([('fd', 'flags')])},
               {'call': 'swapoff',
                'reason': set([('address_space', 'a_ops'),
                               ('file', 'f_mode')])},
               {'call': 'fremovexattr', 'reason': set([('fd', 'flags')])},
               {'call': 'getdents', 'reason': set([('fd', 'flags')])},
               {'call': 'writev', 'reason': set([('fd', 'flags')])},
               {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
               {'call': 'fchmod',
                'reason': set([('address_space', 'a_ops'), ('fd', 'flags')])},
               {'call': 'pread64', 'reason': set([('fd', 'flags')])},
               {'call': 'signalfd4', 'reason': set([('fd', 'flags')])},
               {'call': 'memfd_create',
                'reason': set([('address_space', 'a_ops'),
                               ('file', 'f_mode')])},
               {'call': 'remap_file_pages',
                'reason': set([('file', 'f_mode')])},
               {'call': 'dup3', 'reason': set([('file', 'f_mode')])},
               {'call': 'readlinkat',
                'reason': set([('address_space', 'a_ops')])},
               {'call': 'read', 'reason': set([('fd', 'flags')])},
               {'call': 'fchown',
                'reason': set([('address_space', 'a_ops'), ('fd', 'flags')])},
               {'call': 'mq_timedreceive',
                'reason': set([('address_space', 'a_ops'), ('fd', 'flags')])},
               {'call': 'utime', 'reason': set([('fd', 'flags')])},
               {'call': 'fsync', 'reason': set([('fd', 'flags')])},
               {'call': 'bpf', 'reason': set([('fd', 'flags')])},
               {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
               {'call': 'fsetxattr', 'reason': set([('fd', 'flags')])},
               {'call': 'sendto', 'reason': set([('fd', 'flags')])},
               {'call': 'epoll_create1', 'reason': set([('file', 'f_mode')])},
               {'call': 'tee', 'reason': set([('fd', 'flags')])},
               {'call': 'sync_file_range',
                'reason': set([('address_space', 'a_ops'), ('fd', 'flags')])},
               {'call': 'lseek', 'reason': set([('fd', 'flags')])},
               {'call': 'connect', 'reason': set([('fd', 'flags')])},
               {'call': 'getsockname', 'reason': set([('fd', 'flags')])},
               {'call': 'epoll_ctl',
                'reason': set([('fd', 'flags'), ('file', 'f_mode')])},
               {'call': 'flock',
                'reason': set([('fd', 'flags'), ('file', 'f_mode')])},
               {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
               {'call': 'fchdir', 'reason': set([('fd', 'flags')])},
               {'call': 'openat', 'reason': set([('file', 'f_mode')])},
               {'call': 'uselib',
                'reason': set([('address_space', 'a_ops'),
                               ('file', 'f_mode')])},
               {'call': 'accept4',
                'reason': set([('fd', 'flags'), ('file', 'f_mode')])},
               {'call': 'old_readdir', 'reason': set([('fd', 'flags')])},
               {'call': 'inotify_rm_watch', 'reason': set([('fd', 'flags')])},
               {'call': 'socketpair', 'reason': set([('file', 'f_mode')])},
               {'call': 'utimensat', 'reason': set([('fd', 'flags')])},
               {'call': 'fchmodat',
                'reason': set([('address_space', 'a_ops')])},
               {'call': 'inotify_add_watch',
                'reason': set([('address_space', 'a_ops'), ('fd', 'flags')])},
               {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
               {'call': 'splice', 'reason': set([('fd', 'flags')])},
               {'call': 'ftruncate',
                'reason': set([('address_space', 'a_ops'), ('fd', 'flags')])},
               {'call': 'preadv', 'reason': set([('fd', 'flags')])},
               {'call': 'getpeername', 'reason': set([('fd', 'flags')])},
               {'call': 'shmat',
                'reason': set([('address_space', 'a_ops'),
                               ('file', 'f_mode')])},
               {'call': 'setsockopt', 'reason': set([('fd', 'flags')])},
               {'call': 'socket', 'reason': set([('file', 'f_mode')])},
               {'call': 'pipe2', 'reason': set([('file', 'f_mode')])},
               {'call': 'fcntl', 'reason': set([('fd', 'flags')])},
               {'call': 'ioctl',
                'reason': set([('address_space', 'a_ops'), ('fd', 'flags')])},
               {'call': 'pwrite64', 'reason': set([('fd', 'flags')])},
               {'call': 'perf_event_open',
                'reason': set([('fd', 'flags'), ('file', 'f_mode')])},
               {'call': 'linkat',
                'reason': set([('address_space', 'a_ops')])},
               {'call': 'shmdt', 'reason': set([('file', 'f_mode')])},
               {'call': 'pwritev64v2', 'reason': set([('fd', 'flags')])},
               {'call': 'futimesat', 'reason': set([('fd', 'flags')])},
               {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
               {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
               {'call': 'acct', 'reason': set([('file', 'f_mode')])},
               {'call': 'open', 'reason': set([('file', 'f_mode')])},
               {'call': 'unlink',
                'reason': set([('address_space', 'a_ops')])},
               {'call': 'getsockopt', 'reason': set([('fd', 'flags')])},
               {'call': 'mq_getsetattr',
                'reason': set([('address_space', 'a_ops'), ('fd', 'flags')])},
               {'call': 'faccessat',
                'reason': set([('address_space', 'a_ops')])},
               {'call': 'dup', 'reason': set([('file', 'f_mode')])},
               {'call': 'fdatasync', 'reason': set([('fd', 'flags')])},
               {'call': 'setns', 'reason': set([('file', 'f_mode')])},
               {'call': 'getdents64', 'reason': set([('fd', 'flags')])},
               {'call': 'listen', 'reason': set([('fd', 'flags')])},
               {'call': 'copy_file_range', 'reason': set([('fd', 'flags')])},
               {'call': 'mq_timedsend',
                'reason': set([('address_space', 'a_ops'), ('fd', 'flags')])},
               {'call': 'fgetxattr', 'reason': set([('fd', 'flags')])},
               {'call': 'shmctl', 'reason': set([('file', 'f_mode')])},
               {'call': 'fcntl64', 'reason': set([('fd', 'flags')])},
               {'call': 'swapon',
                'reason': set([('address_space', 'a_ops'),
                               ('file', 'f_mode')])},
               {'call': 'fallocate', 'reason': set([('fd', 'flags')])},
               {'call': 'epoll_wait', 'reason': set([('fd', 'flags')])},
               {'call': 'fchownat',
                'reason': set([('address_space', 'a_ops')])},
               {'call': 'llseek', 'reason': set([('fd', 'flags')])},
               {'call': 'mmap_pgoff', 'reason': set([('file', 'f_mode')])},
               {'call': 'preadv64v2', 'reason': set([('fd', 'flags')])},
               {'call': 'readv', 'reason': set([('fd', 'flags')])},
               {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
               {'call': 'fstatfs64', 'reason': set([('fd', 'flags')])},
               {'call': 'write', 'reason': set([('fd', 'flags')])},
               {'call': 'mq_notify',
                'reason': set([('address_space', 'a_ops'), ('fd', 'flags')])},
               {'call': 'sendfile',
                'reason': set([('address_space', 'a_ops'), ('fd', 'flags')])},
               {'call': 'mq_open', 'reason': set([('file', 'f_mode')])},
               {'call': 'unlinkat',
                'reason': set([('address_space', 'a_ops')])},
               {'call': 'open_by_handle_at',
                'reason': set([('file', 'f_mode')])},
               {'call': 'bind', 'reason': set([('fd', 'flags')])},
               {'call': 'flistxattr', 'reason': set([('fd', 'flags')])},
               {'call': 'sendfile64',
                'reason': set([('address_space', 'a_ops'), ('fd', 'flags')])}],
 'readlinkat': [{'call': 'eventfd2', 'reason': set([('path', 'dentry')])},
                {'call': 'swapoff', 'reason': set([('path', 'dentry')])},
                {'call': 'pivot_root', 'reason': set([('path', 'dentry')])},
                {'call': 'memfd_create', 'reason': set([('path', 'dentry')])},
                {'call': 'remap_file_pages',
                 'reason': set([('path', 'dentry')])},
                {'call': 'dup3', 'reason': set([('path', 'dentry')])},
                {'call': 'unshare', 'reason': set([('path', 'dentry')])},
                {'call': 'epoll_create1',
                 'reason': set([('path', 'dentry')])},
                {'call': 'epoll_ctl', 'reason': set([('path', 'dentry')])},
                {'call': 'flock', 'reason': set([('path', 'dentry')])},
                {'call': 'openat', 'reason': set([('path', 'dentry')])},
                {'call': 'lookup_dcookie',
                 'reason': set([('path', 'dentry')])},
                {'call': 'uselib', 'reason': set([('path', 'dentry')])},
                {'call': 'accept4', 'reason': set([('path', 'dentry')])},
                {'call': 'socketpair', 'reason': set([('path', 'dentry')])},
                {'call': 'getcwd', 'reason': set([('path', 'dentry')])},
                {'call': 'shmat', 'reason': set([('path', 'dentry')])},
                {'call': 'socket', 'reason': set([('path', 'dentry')])},
                {'call': 'pipe2', 'reason': set([('path', 'dentry')])},
                {'call': 'perf_event_open',
                 'reason': set([('path', 'dentry')])},
                {'call': 'shmdt', 'reason': set([('path', 'dentry')])},
                {'call': 'quotactl', 'reason': set([('path', 'dentry')])},
                {'call': 'acct', 'reason': set([('path', 'dentry')])},
                {'call': 'open', 'reason': set([('path', 'dentry')])},
                {'call': 'dup', 'reason': set([('path', 'dentry')])},
                {'call': 'setns', 'reason': set([('path', 'dentry')])},
                {'call': 'shmctl', 'reason': set([('path', 'dentry')])},
                {'call': 'swapon', 'reason': set([('path', 'dentry')])},
                {'call': 'mmap_pgoff', 'reason': set([('path', 'dentry')])},
                {'call': 'mq_open', 'reason': set([('path', 'dentry')])},
                {'call': 'open_by_handle_at',
                 'reason': set([('path', 'dentry')])}],
 'reboot': [{'call': 'perf_event_open',
             'reason': set([('pid_namespace', 'user_ns')])},
            {'call': 'acct', 'reason': set([('pid_namespace', 'user_ns')])},
            {'call': 'setns', 'reason': set([('pid_namespace', 'user_ns')])}],
 'recvfrom': [{'call': 'eventfd2', 'reason': set([('file', 'f_flags')])},
              {'call': 'swapoff', 'reason': set([('file', 'f_flags')])},
              {'call': 'memfd_create', 'reason': set([('file', 'f_flags')])},
              {'call': 'remap_file_pages',
               'reason': set([('file', 'f_flags')])},
              {'call': 'dup3', 'reason': set([('file', 'f_flags')])},
              {'call': 'epoll_create1', 'reason': set([('file', 'f_flags')])},
              {'call': 'epoll_ctl', 'reason': set([('file', 'f_flags')])},
              {'call': 'flock', 'reason': set([('file', 'f_flags')])},
              {'call': 'openat', 'reason': set([('file', 'f_flags')])},
              {'call': 'uselib', 'reason': set([('file', 'f_flags')])},
              {'call': 'accept4', 'reason': set([('file', 'f_flags')])},
              {'call': 'socketpair', 'reason': set([('file', 'f_flags')])},
              {'call': 'shmat', 'reason': set([('file', 'f_flags')])},
              {'call': 'socket', 'reason': set([('file', 'f_flags')])},
              {'call': 'pipe2', 'reason': set([('file', 'f_flags')])},
              {'call': 'perf_event_open',
               'reason': set([('file', 'f_flags')])},
              {'call': 'shmdt', 'reason': set([('file', 'f_flags')])},
              {'call': 'acct', 'reason': set([('file', 'f_flags')])},
              {'call': 'open', 'reason': set([('file', 'f_flags')])},
              {'call': 'mq_getsetattr', 'reason': set([('file', 'f_flags')])},
              {'call': 'dup', 'reason': set([('file', 'f_flags')])},
              {'call': 'setns', 'reason': set([('file', 'f_flags')])},
              {'call': 'shmctl', 'reason': set([('file', 'f_flags')])},
              {'call': 'swapon', 'reason': set([('file', 'f_flags')])},
              {'call': 'mmap_pgoff', 'reason': set([('file', 'f_flags')])},
              {'call': 'mq_open', 'reason': set([('file', 'f_flags')])},
              {'call': 'open_by_handle_at',
               'reason': set([('file', 'f_flags')])}],
 'recvmmsg': [{'call': 'rt_sigtimedwait',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'mq_unlink',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'swapoff',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'fchmod',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'memfd_create',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'readlinkat',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'io_getevents',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'fchown',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'mq_timedreceive',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'utime',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'semtimedop',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'recvfrom',
               'reason': set([('msghdr', 'msg_flags'),
                              ('socket', 'file'),
                              ('socket', 'sk')])},
              {'call': 'settimeofday',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'sendto',
               'reason': set([('msghdr', 'msg_flags'),
                              ('socket', 'file'),
                              ('socket', 'sk')])},
              {'call': 'sched_rr_get_interval',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'timerfd_gettime',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'connect',
               'reason': set([('socket', 'file'), ('socket', 'sk')])},
              {'call': 'getsockname',
               'reason': set([('socket', 'file'), ('socket', 'sk')])},
              {'call': 'pselect6',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'uselib',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'accept4',
               'reason': set([('socket', 'file'), ('socket', 'sk')])},
              {'call': 'fchmodat',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'inotify_add_watch',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'timer_settime',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'ftruncate',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'timer_gettime',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'getpeername',
               'reason': set([('socket', 'file'), ('socket', 'sk')])},
              {'call': 'setsockopt',
               'reason': set([('socket', 'file'), ('socket', 'sk')])},
              {'call': 'ioctl',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'linkat',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'sendmsg',
               'reason': set([('socket', 'file'), ('socket', 'sk')])},
              {'call': 'stime',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'futimesat',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'shutdown',
               'reason': set([('socket', 'file'), ('socket', 'sk')])},
              {'call': 'poll',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'select',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'unlink',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'getsockopt',
               'reason': set([('socket', 'file'), ('socket', 'sk')])},
              {'call': 'nanosleep',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'mq_getsetattr',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'faccessat',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'listen',
               'reason': set([('socket', 'file'), ('socket', 'sk')])},
              {'call': 'mq_timedsend',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'swapon',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'epoll_wait',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'fchownat',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'fstat',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'timerfd_settime',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'recvmsg',
               'reason': set([('socket', 'file'), ('socket', 'sk')])},
              {'call': 'mq_notify',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'sendfile',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'sendmmsg',
               'reason': set([('socket', 'file'), ('socket', 'sk')])},
              {'call': 'newfstat',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'clock_nanosleep',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'unlinkat',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'bind',
               'reason': set([('socket', 'file'), ('socket', 'sk')])},
              {'call': 'futex',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'sendfile64',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])},
              {'call': 'ppoll',
               'reason': set([('timespec', 'tv_nsec'),
                              ('timespec', 'tv_sec')])}],
 'recvmsg': [{'call': 'recvfrom', 'reason': set([('socket', 'file')])},
             {'call': 'sendto', 'reason': set([('socket', 'file')])},
             {'call': 'connect', 'reason': set([('socket', 'file')])},
             {'call': 'getsockname', 'reason': set([('socket', 'file')])},
             {'call': 'accept4', 'reason': set([('socket', 'file')])},
             {'call': 'getpeername', 'reason': set([('socket', 'file')])},
             {'call': 'setsockopt', 'reason': set([('socket', 'file')])},
             {'call': 'sendmsg', 'reason': set([('socket', 'file')])},
             {'call': 'shutdown', 'reason': set([('socket', 'file')])},
             {'call': 'getsockopt', 'reason': set([('socket', 'file')])},
             {'call': 'listen', 'reason': set([('socket', 'file')])},
             {'call': 'sendmmsg', 'reason': set([('socket', 'file')])},
             {'call': 'bind', 'reason': set([('socket', 'file')])},
             {'call': 'recvmmsg', 'reason': set([('socket', 'file')])}],
 'remap_file_pages': [{'call': 'shmdt',
                       'reason': set([('vm_area_struct', 'vm_end'),
                                      ('vm_area_struct', 'vm_file'),
                                      ('vm_area_struct', 'vm_flags'),
                                      ('vm_area_struct', 'vm_start')])},
                      {'call': 'brk',
                       'reason': set([('vm_area_struct', 'vm_end'),
                                      ('vm_area_struct', 'vm_file'),
                                      ('vm_area_struct', 'vm_flags'),
                                      ('vm_area_struct', 'vm_start')])},
                      {'call': 'get_mempolicy',
                       'reason': set([('vm_area_struct', 'vm_end'),
                                      ('vm_area_struct', 'vm_file'),
                                      ('vm_area_struct', 'vm_flags'),
                                      ('vm_area_struct', 'vm_start')])},
                      {'call': 'munlockall',
                       'reason': set([('vm_area_struct', 'vm_end'),
                                      ('vm_area_struct', 'vm_file'),
                                      ('vm_area_struct', 'vm_flags'),
                                      ('vm_area_struct', 'vm_start')])},
                      {'call': 'pkey_mprotect',
                       'reason': set([('vm_area_struct', 'vm_end'),
                                      ('vm_area_struct', 'vm_file'),
                                      ('vm_area_struct', 'vm_flags'),
                                      ('vm_area_struct', 'vm_start')])},
                      {'call': 'madvise',
                       'reason': set([('vm_area_struct', 'vm_end'),
                                      ('vm_area_struct', 'vm_file'),
                                      ('vm_area_struct', 'vm_flags'),
                                      ('vm_area_struct', 'vm_start')])},
                      {'call': 'mprotect',
                       'reason': set([('vm_area_struct', 'vm_end'),
                                      ('vm_area_struct', 'vm_file'),
                                      ('vm_area_struct', 'vm_flags'),
                                      ('vm_area_struct', 'vm_start')])},
                      {'call': 'mremap',
                       'reason': set([('vm_area_struct', 'vm_end'),
                                      ('vm_area_struct', 'vm_file'),
                                      ('vm_area_struct', 'vm_flags'),
                                      ('vm_area_struct', 'vm_start')])},
                      {'call': 'prctl',
                       'reason': set([('vm_area_struct', 'vm_end'),
                                      ('vm_area_struct', 'vm_file'),
                                      ('vm_area_struct', 'vm_flags'),
                                      ('vm_area_struct', 'vm_start')])},
                      {'call': 'munlock',
                       'reason': set([('vm_area_struct', 'vm_end'),
                                      ('vm_area_struct', 'vm_file'),
                                      ('vm_area_struct', 'vm_flags'),
                                      ('vm_area_struct', 'vm_start')])},
                      {'call': 'mincore',
                       'reason': set([('vm_area_struct', 'vm_end'),
                                      ('vm_area_struct', 'vm_file'),
                                      ('vm_area_struct', 'vm_flags'),
                                      ('vm_area_struct', 'vm_start')])},
                      {'call': 'mlockall',
                       'reason': set([('vm_area_struct', 'vm_end'),
                                      ('vm_area_struct', 'vm_file'),
                                      ('vm_area_struct', 'vm_flags'),
                                      ('vm_area_struct', 'vm_start')])}],
 'removexattr': [{'call': 'eventfd2',
                  'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                 {'call': 'swapoff',
                  'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                 {'call': 'pivot_root',
                  'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                 {'call': 'memfd_create',
                  'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                 {'call': 'remap_file_pages',
                  'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                 {'call': 'dup3',
                  'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                 {'call': 'unshare',
                  'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                 {'call': 'epoll_create1',
                  'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                 {'call': 'epoll_ctl',
                  'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                 {'call': 'flock',
                  'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                 {'call': 'openat',
                  'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                 {'call': 'lookup_dcookie',
                  'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                 {'call': 'uselib',
                  'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                 {'call': 'accept4',
                  'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                 {'call': 'socketpair',
                  'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                 {'call': 'getcwd',
                  'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                 {'call': 'shmat',
                  'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                 {'call': 'socket',
                  'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                 {'call': 'pipe2',
                  'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                 {'call': 'perf_event_open',
                  'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                 {'call': 'shmdt',
                  'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                 {'call': 'quotactl',
                  'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                 {'call': 'acct',
                  'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                 {'call': 'open',
                  'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                 {'call': 'dup',
                  'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                 {'call': 'setns',
                  'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                 {'call': 'shmctl',
                  'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                 {'call': 'swapon',
                  'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                 {'call': 'mmap_pgoff',
                  'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                 {'call': 'mq_open',
                  'reason': set([('path', 'dentry'), ('path', 'mnt')])},
                 {'call': 'open_by_handle_at',
                  'reason': set([('path', 'dentry'), ('path', 'mnt')])}],
 'renameat2': [{'call': 'sysfs',
                'reason': set([('filename', 'name'),
                               ('filename', 'refcnt')])},
               {'call': 'eventfd2',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'mq_unlink',
                'reason': set([('dentry', 'd_inode'),
                               ('filename', 'name'),
                               ('filename', 'refcnt')])},
               {'call': 'swapoff',
                'reason': set([('filename', 'name'),
                               ('filename', 'refcnt'),
                               ('path', 'dentry'),
                               ('path', 'mnt')])},
               {'call': 'pivot_root',
                'reason': set([('dentry', 'd_inode'),
                               ('path', 'dentry'),
                               ('path', 'mnt')])},
               {'call': 'memfd_create',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'remap_file_pages',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'dup3',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'unshare',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'mkdirat', 'reason': set([('dentry', 'd_inode')])},
               {'call': 'epoll_create1',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'epoll_ctl',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'flock',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'openat',
                'reason': set([('filename', 'name'),
                               ('filename', 'refcnt'),
                               ('path', 'dentry'),
                               ('path', 'mnt')])},
               {'call': 'lookup_dcookie',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'uselib',
                'reason': set([('filename', 'name'),
                               ('filename', 'refcnt'),
                               ('path', 'dentry'),
                               ('path', 'mnt')])},
               {'call': 'accept4',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'socketpair',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'getcwd',
                'reason': set([('dentry', 'd_inode'),
                               ('path', 'dentry'),
                               ('path', 'mnt')])},
               {'call': 'ftruncate', 'reason': set([('dentry', 'd_inode')])},
               {'call': 'shmat',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'mknodat', 'reason': set([('dentry', 'd_inode')])},
               {'call': 'socket',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'symlinkat',
                'reason': set([('dentry', 'd_inode'),
                               ('filename', 'name'),
                               ('filename', 'refcnt')])},
               {'call': 'pipe2',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'perf_event_open',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'linkat', 'reason': set([('dentry', 'd_inode')])},
               {'call': 'shmdt',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'quotactl',
                'reason': set([('filename', 'name'),
                               ('filename', 'refcnt'),
                               ('path', 'dentry'),
                               ('path', 'mnt')])},
               {'call': 'acct',
                'reason': set([('filename', 'name'),
                               ('filename', 'refcnt'),
                               ('path', 'dentry'),
                               ('path', 'mnt')])},
               {'call': 'open',
                'reason': set([('filename', 'name'),
                               ('filename', 'refcnt'),
                               ('path', 'dentry'),
                               ('path', 'mnt')])},
               {'call': 'unlink',
                'reason': set([('dentry', 'd_inode'),
                               ('filename', 'name'),
                               ('filename', 'refcnt')])},
               {'call': 'rmdir',
                'reason': set([('dentry', 'd_inode'),
                               ('filename', 'name'),
                               ('filename', 'refcnt')])},
               {'call': 'dup',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'setns',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'shmctl',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'swapon',
                'reason': set([('filename', 'name'),
                               ('filename', 'refcnt'),
                               ('path', 'dentry'),
                               ('path', 'mnt')])},
               {'call': 'mmap_pgoff',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])},
               {'call': 'mq_open',
                'reason': set([('dentry', 'd_inode'),
                               ('filename', 'name'),
                               ('filename', 'refcnt'),
                               ('path', 'dentry'),
                               ('path', 'mnt')])},
               {'call': 'unlinkat',
                'reason': set([('dentry', 'd_inode'),
                               ('filename', 'name'),
                               ('filename', 'refcnt')])},
               {'call': 'open_by_handle_at',
                'reason': set([('path', 'dentry'), ('path', 'mnt')])}],
 'rmdir': [{'call': 'eventfd2',
            'reason': set([('path', 'dentry'), ('path', 'mnt')])},
           {'call': 'mq_unlink', 'reason': set([('dentry', 'd_inode')])},
           {'call': 'swapoff',
            'reason': set([('path', 'dentry'), ('path', 'mnt')])},
           {'call': 'pivot_root',
            'reason': set([('dentry', 'd_inode'),
                           ('path', 'dentry'),
                           ('path', 'mnt')])},
           {'call': 'memfd_create',
            'reason': set([('path', 'dentry'), ('path', 'mnt')])},
           {'call': 'remap_file_pages',
            'reason': set([('path', 'dentry'), ('path', 'mnt')])},
           {'call': 'dup3',
            'reason': set([('path', 'dentry'), ('path', 'mnt')])},
           {'call': 'unshare',
            'reason': set([('path', 'dentry'), ('path', 'mnt')])},
           {'call': 'mkdirat', 'reason': set([('dentry', 'd_inode')])},
           {'call': 'epoll_create1',
            'reason': set([('path', 'dentry'), ('path', 'mnt')])},
           {'call': 'epoll_ctl',
            'reason': set([('path', 'dentry'), ('path', 'mnt')])},
           {'call': 'flock',
            'reason': set([('path', 'dentry'), ('path', 'mnt')])},
           {'call': 'openat',
            'reason': set([('path', 'dentry'), ('path', 'mnt')])},
           {'call': 'lookup_dcookie',
            'reason': set([('path', 'dentry'), ('path', 'mnt')])},
           {'call': 'uselib',
            'reason': set([('path', 'dentry'), ('path', 'mnt')])},
           {'call': 'renameat2', 'reason': set([('dentry', 'd_inode')])},
           {'call': 'accept4',
            'reason': set([('path', 'dentry'), ('path', 'mnt')])},
           {'call': 'socketpair',
            'reason': set([('path', 'dentry'), ('path', 'mnt')])},
           {'call': 'getcwd',
            'reason': set([('dentry', 'd_inode'),
                           ('path', 'dentry'),
                           ('path', 'mnt')])},
           {'call': 'ftruncate', 'reason': set([('dentry', 'd_inode')])},
           {'call': 'shmat',
            'reason': set([('path', 'dentry'), ('path', 'mnt')])},
           {'call': 'mknodat', 'reason': set([('dentry', 'd_inode')])},
           {'call': 'socket',
            'reason': set([('path', 'dentry'), ('path', 'mnt')])},
           {'call': 'symlinkat', 'reason': set([('dentry', 'd_inode')])},
           {'call': 'pipe2',
            'reason': set([('path', 'dentry'), ('path', 'mnt')])},
           {'call': 'perf_event_open',
            'reason': set([('path', 'dentry'), ('path', 'mnt')])},
           {'call': 'linkat', 'reason': set([('dentry', 'd_inode')])},
           {'call': 'shmdt',
            'reason': set([('path', 'dentry'), ('path', 'mnt')])},
           {'call': 'quotactl',
            'reason': set([('path', 'dentry'), ('path', 'mnt')])},
           {'call': 'acct',
            'reason': set([('path', 'dentry'), ('path', 'mnt')])},
           {'call': 'open',
            'reason': set([('path', 'dentry'), ('path', 'mnt')])},
           {'call': 'unlink', 'reason': set([('dentry', 'd_inode')])},
           {'call': 'dup',
            'reason': set([('path', 'dentry'), ('path', 'mnt')])},
           {'call': 'setns',
            'reason': set([('path', 'dentry'), ('path', 'mnt')])},
           {'call': 'shmctl',
            'reason': set([('path', 'dentry'), ('path', 'mnt')])},
           {'call': 'swapon',
            'reason': set([('path', 'dentry'), ('path', 'mnt')])},
           {'call': 'mmap_pgoff',
            'reason': set([('path', 'dentry'), ('path', 'mnt')])},
           {'call': 'mq_open',
            'reason': set([('dentry', 'd_inode'),
                           ('path', 'dentry'),
                           ('path', 'mnt')])},
           {'call': 'unlinkat', 'reason': set([('dentry', 'd_inode')])},
           {'call': 'open_by_handle_at',
            'reason': set([('path', 'dentry'), ('path', 'mnt')])}],
 'rt_sigqueueinfo': [{'call': 'rt_sigtimedwait',
                      'reason': set([('siginfo', 'si_code')])},
                     {'call': 'kill',
                      'reason': set([('siginfo', 'si_code')])},
                     {'call': 'timer_create',
                      'reason': set([('siginfo', 'si_code')])},
                     {'call': 'tgkill',
                      'reason': set([('siginfo', 'si_code')])},
                     {'call': 'rt_tgsigqueueinfo',
                      'reason': set([('siginfo', 'si_code')])},
                     {'call': 'rt_sigreturn',
                      'reason': set([('siginfo', 'si_code')])},
                     {'call': 'tkill',
                      'reason': set([('siginfo', 'si_code')])}],
 'rt_sigreturn': [{'call': 'keyctl',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'rt_sigtimedwait',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'msgrcv',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'kill',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'sched_getaffinity',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'sched_setparam',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'ioprio_set',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'getppid',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'ioperm',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'mq_timedreceive',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'capget',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'sched_setaffinity',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'signal',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'semtimedop',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'umount',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'sched_rr_get_interval',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'rt_sigprocmask',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'setsid',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'sigaltstack',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'sched_setattr',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'migrate_pages',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'getitimer',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'setpgid',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'getsid',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'prlimit64',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'perf_event_open',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'rt_sigaction',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'getpgid',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'getpriority',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'sigaction',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'setns',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'fork',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'get_robust_list',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'mq_timedsend',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'sched_getscheduler',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'ptrace',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'sched_getattr',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'getrusage',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'sched_setscheduler',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'setitimer',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'ioprio_get',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'vfork',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'prctl',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'move_pages',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'setpriority',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'clone',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])},
                  {'call': 'sched_getparam',
                   'reason': set([('mm_segment_t', 'seg'),
                                  ('thread_struct', 'uaccess_err')])}],
 'rt_sigtimedwait': [{'call': 'keyctl',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'msgrcv',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'kill',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('siginfo', 'si_code'),
                                     ('siginfo', 'si_signo'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'sched_getaffinity',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'sched_setparam',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'ioprio_set',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'getppid',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'ioperm',
                      'reason': set([('mm_segment_t', 'seg')])},
                     {'call': 'mq_timedreceive',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'capget',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'sched_setaffinity',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'signal',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'semtimedop',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'umount',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'timer_create',
                      'reason': set([('siginfo', 'si_code'),
                                     ('siginfo', 'si_signo')])},
                     {'call': 'sched_rr_get_interval',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'rt_sigqueueinfo',
                      'reason': set([('siginfo', 'si_code'),
                                     ('siginfo', 'si_signo')])},
                     {'call': 'tgkill',
                      'reason': set([('siginfo', 'si_code'),
                                     ('siginfo', 'si_signo')])},
                     {'call': 'rt_sigprocmask',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'setsid',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'sigaltstack',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'sched_setattr',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'migrate_pages',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'getitimer',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'setpgid',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'getsid',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'prlimit64',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'perf_event_open',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'rt_sigaction',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'getpgid',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'getpriority',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'sigaction',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'rt_tgsigqueueinfo',
                      'reason': set([('siginfo', 'si_code'),
                                     ('siginfo', 'si_signo')])},
                     {'call': 'setns',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'fork',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'get_robust_list',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'mq_timedsend',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'sched_getscheduler',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'ptrace',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'sched_getattr',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'getrusage',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'sched_setscheduler',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'setitimer',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'ioprio_get',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'vfork',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'prctl',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'move_pages',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'rt_sigreturn',
                      'reason': set([('siginfo', 'si_code'),
                                     ('siginfo', 'si_signo')])},
                     {'call': 'tkill',
                      'reason': set([('siginfo', 'si_code'),
                                     ('siginfo', 'si_signo')])},
                     {'call': 'setpriority',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'clone',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])},
                     {'call': 'sched_getparam',
                      'reason': set([('mm_segment_t', 'seg'),
                                     ('task_struct', 'timer_slack_ns')])}],
 'rt_tgsigqueueinfo': [{'call': 'rt_sigtimedwait',
                        'reason': set([('siginfo', 'si_code')])},
                       {'call': 'kill',
                        'reason': set([('siginfo', 'si_code')])},
                       {'call': 'timer_create',
                        'reason': set([('siginfo', 'si_code')])},
                       {'call': 'rt_sigqueueinfo',
                        'reason': set([('siginfo', 'si_code')])},
                       {'call': 'tgkill',
                        'reason': set([('siginfo', 'si_code')])},
                       {'call': 'rt_sigreturn',
                        'reason': set([('siginfo', 'si_code')])},
                       {'call': 'tkill',
                        'reason': set([('siginfo', 'si_code')])}],
 'sched_getattr': [{'call': 'keyctl',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'rt_sigtimedwait',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'msgrcv',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'kill',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'sched_getaffinity',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'sched_setparam',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'ioprio_set',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'getppid',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'ioperm',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'mq_timedreceive',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'capget',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'sched_setaffinity',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'signal',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'semtimedop',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'umount',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'sched_rr_get_interval',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'rt_sigprocmask',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'setsid',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'sigaltstack',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'sched_setattr',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('sched_attr', 'size'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'migrate_pages',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'getitimer',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'setpgid',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'getsid',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'prlimit64',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'perf_event_open',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'rt_sigaction',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'getpgid',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'getpriority',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'sigaction',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'setns',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'fork',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'get_robust_list',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'mq_timedsend',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'sched_getscheduler',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'ptrace',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'getrusage',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'sched_setscheduler',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'setitimer',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'ioprio_get',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'vfork',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'prctl',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'move_pages',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'setpriority',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'clone',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])},
                   {'call': 'sched_getparam',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('task_struct', 'policy'),
                                   ('task_struct', 'sched_reset_on_fork')])}],
 'sched_getparam': [{'call': 'keyctl',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'rt_sigtimedwait',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'msgrcv',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'kill',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'sched_getaffinity',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'sched_setparam',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'ioprio_set',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'getppid',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'mq_timedreceive',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'capget',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'sched_setaffinity',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'signal',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'semtimedop',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'umount',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'sched_rr_get_interval',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'rt_sigprocmask',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'setsid',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'sigaltstack',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'sched_setattr',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'migrate_pages',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'getitimer',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'setpgid',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'getsid',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'prlimit64',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'perf_event_open',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'rt_sigaction',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'getpgid',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'getpriority',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'sigaction',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'setns',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'fork',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'get_robust_list',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'mq_timedsend',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'sched_getscheduler',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'ptrace',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'sched_getattr',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'getrusage',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'sched_setscheduler',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'setitimer',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'ioprio_get',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'vfork',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'prctl',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'move_pages',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'setpriority',
                     'reason': set([('task_struct', 'policy')])},
                    {'call': 'clone',
                     'reason': set([('task_struct', 'policy')])}],
 'sched_getscheduler': [{'call': 'keyctl',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'rt_sigtimedwait',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'msgrcv',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'kill',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'sched_getaffinity',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'sched_setparam',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'ioprio_set',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'getppid',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'mq_timedreceive',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'capget',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'sched_setaffinity',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'signal',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'semtimedop',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'umount',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'sched_rr_get_interval',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'rt_sigprocmask',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'setsid',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'sigaltstack',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'sched_setattr',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'migrate_pages',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'getitimer',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'setpgid',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'getsid',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'prlimit64',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'perf_event_open',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'rt_sigaction',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'getpgid',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'getpriority',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'sigaction',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'setns',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'fork',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'get_robust_list',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'mq_timedsend',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'ptrace',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'sched_getattr',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'getrusage',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'sched_setscheduler',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'setitimer',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'ioprio_get',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'vfork',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'prctl',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'move_pages',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'setpriority',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'clone',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])},
                        {'call': 'sched_getparam',
                         'reason': set([('task_struct',
                                         'sched_reset_on_fork')])}],
 'sched_setaffinity': [{'call': 'keyctl',
                        'reason': set([('cred', 'user_ns'),
                                       ('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'rt_sigtimedwait',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'setfsuid',
                        'reason': set([('cred', 'user_ns')])},
                       {'call': 'msgrcv',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'kill',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'getresuid16',
                        'reason': set([('cred', 'user_ns')])},
                       {'call': 'getresgid',
                        'reason': set([('cred', 'user_ns')])},
                       {'call': 'sched_getaffinity',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'sched_setparam',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'setgid',
                        'reason': set([('cred', 'user_ns')])},
                       {'call': 'ioprio_set',
                        'reason': set([('cred', 'user_ns'),
                                       ('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'capset',
                        'reason': set([('cred', 'user_ns')])},
                       {'call': 'getppid',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'mq_timedreceive',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'getresgid16',
                        'reason': set([('cred', 'user_ns')])},
                       {'call': 'capget',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'setfsgid',
                        'reason': set([('cred', 'user_ns')])},
                       {'call': 'unshare',
                        'reason': set([('cred', 'user_ns')])},
                       {'call': 'signal',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'setreuid',
                        'reason': set([('cred', 'user_ns'),
                                       ('task_struct', 'flags')])},
                       {'call': 'semtimedop',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'umount',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'sched_rr_get_interval',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'epoll_create1',
                        'reason': set([('cred', 'user_ns')])},
                       {'call': 'getresuid',
                        'reason': set([('cred', 'user_ns')])},
                       {'call': 'rt_sigprocmask',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'setsid',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'sigaltstack',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'sched_setattr',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'migrate_pages',
                        'reason': set([('cred', 'user_ns'),
                                       ('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'getitimer',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'setpgid',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'setresgid',
                        'reason': set([('cred', 'user_ns')])},
                       {'call': 'setregid',
                        'reason': set([('cred', 'user_ns')])},
                       {'call': 'getsid',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'prlimit64',
                        'reason': set([('cred', 'user_ns'),
                                       ('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'perf_event_open',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'getgroups16',
                        'reason': set([('cred', 'user_ns')])},
                       {'call': 'rt_sigaction',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'getpgid',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'getpriority',
                        'reason': set([('cred', 'user_ns'),
                                       ('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'sigaction',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'faccessat',
                        'reason': set([('cred', 'user_ns')])},
                       {'call': 'setns',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'fork',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'get_robust_list',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'mq_timedsend',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'sched_getscheduler',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'ptrace',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'sched_getattr',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'getrusage',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'sched_setscheduler',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'setresuid',
                        'reason': set([('cred', 'user_ns'),
                                       ('task_struct', 'flags')])},
                       {'call': 'setitimer',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'ioprio_get',
                        'reason': set([('cred', 'user_ns'),
                                       ('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'vfork',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'setuid',
                        'reason': set([('cred', 'user_ns'),
                                       ('task_struct', 'flags')])},
                       {'call': 'prctl',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'move_pages',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'getgroups',
                        'reason': set([('cred', 'user_ns')])},
                       {'call': 'setpriority',
                        'reason': set([('cred', 'user_ns'),
                                       ('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'clone',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])},
                       {'call': 'sched_getparam',
                        'reason': set([('task_struct', 'flags'),
                                       ('task_struct', 'real_cred')])}],
 'sched_setattr': [{'call': 'keyctl',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'rt_sigtimedwait',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'msgrcv',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'kill', 'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'sched_getaffinity',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'sched_setparam',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'ioprio_set',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'getppid',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'ioperm',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'mq_timedreceive',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'capget',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'sched_setaffinity',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'signal',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'semtimedop',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'umount',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'sched_rr_get_interval',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'rt_sigprocmask',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'setsid',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'sigaltstack',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'migrate_pages',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'getitimer',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'setpgid',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'getsid',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'prlimit64',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'perf_event_open',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'rt_sigaction',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'getpgid',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'getpriority',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'sigaction',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'setns',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'fork', 'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'get_robust_list',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'mq_timedsend',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'sched_getscheduler',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'ptrace',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'sched_getattr',
                    'reason': set([('mm_segment_t', 'seg'),
                                   ('sched_attr', 'sched_policy')])},
                   {'call': 'getrusage',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'sched_setscheduler',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'setitimer',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'ioprio_get',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'vfork',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'prctl',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'move_pages',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'setpriority',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'clone',
                    'reason': set([('mm_segment_t', 'seg')])},
                   {'call': 'sched_getparam',
                    'reason': set([('mm_segment_t', 'seg')])}],
 'select': [{'call': 'keyctl',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'rt_sigtimedwait',
             'reason': set([('task_struct', 'personality'),
                            ('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'msgrcv',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'mq_unlink',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'kill', 'reason': set([('task_struct', 'personality')])},
            {'call': 'swapoff',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'sched_getaffinity',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'sched_setparam',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'fchmod',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'memfd_create',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'ioprio_set',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'personality',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'dup3', 'reason': set([('files_struct', 'fdt')])},
            {'call': 'readlinkat',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'io_getevents',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'getppid',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'fchown',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'mq_timedreceive',
             'reason': set([('task_struct', 'personality'),
                            ('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'capget',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'utime',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'sched_setaffinity',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'unshare', 'reason': set([('files_struct', 'fdt')])},
            {'call': 'signal',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'semtimedop',
             'reason': set([('task_struct', 'personality'),
                            ('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'umount',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'settimeofday',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'sched_rr_get_interval',
             'reason': set([('task_struct', 'personality'),
                            ('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'timerfd_gettime',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'pselect6',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'uselib',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'rt_sigprocmask',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'setsid',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'sigaltstack',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'sched_setattr',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'migrate_pages',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'getitimer',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'fchmodat',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'setpgid',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'inotify_add_watch',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'timer_settime',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'ftruncate',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'timer_gettime',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'getsid',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'ioctl',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'prlimit64',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'perf_event_open',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'linkat',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'stime',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'rt_sigaction',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'futimesat',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'getpgid',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'poll',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'unlink',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'getpriority',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'sigaction',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'nanosleep',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'mq_getsetattr',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'faccessat',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'setns',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'fork', 'reason': set([('task_struct', 'personality')])},
            {'call': 'get_robust_list',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'mq_timedsend',
             'reason': set([('task_struct', 'personality'),
                            ('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'sched_getscheduler',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'ptrace',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'swapon',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'epoll_wait',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'sched_getattr',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'fchownat',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'getrusage',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'fstat',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'timerfd_settime',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'sched_setscheduler',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'setitimer',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'ioprio_get',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'vfork',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'prctl',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'move_pages',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'dup2', 'reason': set([('files_struct', 'fdt')])},
            {'call': 'setpriority',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'mq_notify',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'sendfile',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'newfstat',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'clone',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'clock_nanosleep',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'unlinkat',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'sched_getparam',
             'reason': set([('task_struct', 'personality')])},
            {'call': 'futex',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'recvmmsg',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'sendfile64',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])},
            {'call': 'ppoll',
             'reason': set([('timespec', 'tv_nsec'),
                            ('timespec', 'tv_sec')])}],
 'semctl': [{'call': 'semtimedop',
             'reason': set([('sem_array', 'sem_nsems')])}],
 'semtimedop': [{'call': 'syncfs', 'reason': set([('list_head', 'prev')])},
                {'call': 'keyctl', 'reason': set([('list_head', 'prev')])},
                {'call': 'rt_sigtimedwait',
                 'reason': set([('list_head', 'prev'),
                                ('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'vmsplice', 'reason': set([('list_head', 'prev')])},
                {'call': 'msgrcv',
                 'reason': set([('kern_ipc_perm', 'deleted'),
                                ('list_head', 'prev')])},
                {'call': 'eventfd2', 'reason': set([('list_head', 'prev')])},
                {'call': 'mq_unlink',
                 'reason': set([('list_head', 'prev'),
                                ('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'kill', 'reason': set([('list_head', 'prev')])},
                {'call': 'swapoff',
                 'reason': set([('list_head', 'prev'),
                                ('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'readahead', 'reason': set([('list_head', 'prev')])},
                {'call': 'timer_delete',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'sched_getaffinity',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'sched_setparam',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'fchmod',
                 'reason': set([('list_head', 'prev'),
                                ('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'setgid', 'reason': set([('list_head', 'prev')])},
                {'call': 'pivot_root',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'memfd_create',
                 'reason': set([('list_head', 'prev'),
                                ('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'ioprio_set',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'delete_module',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'remap_file_pages',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'dup3', 'reason': set([('list_head', 'prev')])},
                {'call': 'readlinkat',
                 'reason': set([('list_head', 'prev'),
                                ('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'io_getevents',
                 'reason': set([('list_head', 'prev'),
                                ('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'getppid', 'reason': set([('list_head', 'prev')])},
                {'call': 'fchown',
                 'reason': set([('list_head', 'prev'),
                                ('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'mq_timedreceive',
                 'reason': set([('list_head', 'prev'),
                                ('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'capget', 'reason': set([('list_head', 'prev')])},
                {'call': 'utime',
                 'reason': set([('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'sched_setaffinity',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'ustat', 'reason': set([('list_head', 'prev')])},
                {'call': 'bpf', 'reason': set([('list_head', 'prev')])},
                {'call': 'unshare', 'reason': set([('list_head', 'prev')])},
                {'call': 'signal', 'reason': set([('list_head', 'prev')])},
                {'call': 'setreuid', 'reason': set([('list_head', 'prev')])},
                {'call': 'umount', 'reason': set([('list_head', 'prev')])},
                {'call': 'settimeofday',
                 'reason': set([('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'timer_create',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'mkdirat', 'reason': set([('list_head', 'prev')])},
                {'call': 'sched_rr_get_interval',
                 'reason': set([('list_head', 'prev'),
                                ('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'epoll_create1',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'timerfd_gettime',
                 'reason': set([('list_head', 'prev'),
                                ('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'tee', 'reason': set([('list_head', 'prev')])},
                {'call': 'semctl',
                 'reason': set([('kern_ipc_perm', 'deleted'),
                                ('list_head', 'prev'),
                                ('sem_array', 'complex_count'),
                                ('sem_array', 'sem_nsems'),
                                ('sem_array', 'use_global_lock'),
                                ('sem_undo', 'semid')])},
                {'call': 'sync_file_range',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'epoll_ctl', 'reason': set([('list_head', 'prev')])},
                {'call': 'flock', 'reason': set([('list_head', 'prev')])},
                {'call': 'openat', 'reason': set([('list_head', 'prev')])},
                {'call': 'lookup_dcookie',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'pselect6',
                 'reason': set([('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'uselib',
                 'reason': set([('list_head', 'prev'),
                                ('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'renameat2', 'reason': set([('list_head', 'prev')])},
                {'call': 'rt_sigprocmask',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'accept4', 'reason': set([('list_head', 'prev')])},
                {'call': 'msgctl',
                 'reason': set([('kern_ipc_perm', 'deleted'),
                                ('list_head', 'prev')])},
                {'call': 'reboot', 'reason': set([('list_head', 'prev')])},
                {'call': 'setsid', 'reason': set([('list_head', 'prev')])},
                {'call': 'set_trip_temp',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'sigaltstack',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'sched_setattr',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'inotify_rm_watch',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'socketpair',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'migrate_pages',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'getitimer', 'reason': set([('list_head', 'prev')])},
                {'call': 'fchmodat',
                 'reason': set([('list_head', 'prev'),
                                ('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'setpgid', 'reason': set([('list_head', 'prev')])},
                {'call': 'init_module',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'setresgid', 'reason': set([('list_head', 'prev')])},
                {'call': 'getcwd', 'reason': set([('list_head', 'prev')])},
                {'call': 'inotify_add_watch',
                 'reason': set([('list_head', 'prev'),
                                ('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'get_trip_temp',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'timer_settime',
                 'reason': set([('list_head', 'prev'),
                                ('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'setregid', 'reason': set([('list_head', 'prev')])},
                {'call': 'splice', 'reason': set([('list_head', 'prev')])},
                {'call': 'ftruncate',
                 'reason': set([('list_head', 'prev'),
                                ('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'timer_gettime',
                 'reason': set([('list_head', 'prev'),
                                ('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'getsid', 'reason': set([('list_head', 'prev')])},
                {'call': 'shmat',
                 'reason': set([('kern_ipc_perm', 'deleted'),
                                ('list_head', 'prev')])},
                {'call': 'mknodat', 'reason': set([('list_head', 'prev')])},
                {'call': 'socket', 'reason': set([('list_head', 'prev')])},
                {'call': 'symlinkat', 'reason': set([('list_head', 'prev')])},
                {'call': 'pipe2', 'reason': set([('list_head', 'prev')])},
                {'call': 'ioctl',
                 'reason': set([('list_head', 'prev'),
                                ('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'prlimit64', 'reason': set([('list_head', 'prev')])},
                {'call': 'perf_event_open',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'linkat',
                 'reason': set([('list_head', 'prev'),
                                ('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'stime',
                 'reason': set([('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'getgroups16',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'shmdt', 'reason': set([('list_head', 'prev')])},
                {'call': 'quotactl', 'reason': set([('list_head', 'prev')])},
                {'call': 'rt_sigaction',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'futimesat',
                 'reason': set([('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'request_key',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'getpgid', 'reason': set([('list_head', 'prev')])},
                {'call': 'brk', 'reason': set([('list_head', 'prev')])},
                {'call': 'acct', 'reason': set([('list_head', 'prev')])},
                {'call': 'poll',
                 'reason': set([('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'open', 'reason': set([('list_head', 'prev')])},
                {'call': 'select',
                 'reason': set([('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'unlink',
                 'reason': set([('list_head', 'prev'),
                                ('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'exit_group',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'getpriority',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'sigaction', 'reason': set([('list_head', 'prev')])},
                {'call': 'nanosleep',
                 'reason': set([('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'mq_getsetattr',
                 'reason': set([('list_head', 'prev'),
                                ('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'faccessat',
                 'reason': set([('list_head', 'prev'),
                                ('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'rmdir', 'reason': set([('list_head', 'prev')])},
                {'call': 'dup', 'reason': set([('list_head', 'prev')])},
                {'call': 'setgroups16',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'setns', 'reason': set([('list_head', 'prev')])},
                {'call': 'fork', 'reason': set([('list_head', 'prev')])},
                {'call': 'get_mempolicy',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'io_submit', 'reason': set([('list_head', 'prev')])},
                {'call': 'get_robust_list',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'mq_timedsend',
                 'reason': set([('list_head', 'prev'),
                                ('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'sched_yield',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'sched_getscheduler',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'ptrace', 'reason': set([('list_head', 'prev')])},
                {'call': 'shmctl',
                 'reason': set([('kern_ipc_perm', 'deleted'),
                                ('list_head', 'prev')])},
                {'call': 'munlockall',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'swapon',
                 'reason': set([('list_head', 'prev'),
                                ('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'pkey_mprotect',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'madvise', 'reason': set([('list_head', 'prev')])},
                {'call': 'epoll_wait',
                 'reason': set([('list_head', 'prev'),
                                ('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'sched_getattr',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'fchownat',
                 'reason': set([('list_head', 'prev'),
                                ('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'getrusage', 'reason': set([('list_head', 'prev')])},
                {'call': 'fstat',
                 'reason': set([('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'timerfd_settime',
                 'reason': set([('list_head', 'prev'),
                                ('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'sched_setscheduler',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'setresuid', 'reason': set([('list_head', 'prev')])},
                {'call': 'setitimer', 'reason': set([('list_head', 'prev')])},
                {'call': 'ioprio_get',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'vfork', 'reason': set([('list_head', 'prev')])},
                {'call': 'setuid', 'reason': set([('list_head', 'prev')])},
                {'call': 'io_setup', 'reason': set([('list_head', 'prev')])},
                {'call': 'mprotect', 'reason': set([('list_head', 'prev')])},
                {'call': 'mmap_pgoff',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'mremap', 'reason': set([('list_head', 'prev')])},
                {'call': 'io_destroy',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'mbind', 'reason': set([('list_head', 'prev')])},
                {'call': 'prctl', 'reason': set([('list_head', 'prev')])},
                {'call': 'move_pages',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'timerfd_create',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'modify_ldt',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'getgroups', 'reason': set([('list_head', 'prev')])},
                {'call': 'dup2', 'reason': set([('list_head', 'prev')])},
                {'call': 'get_curr_temp',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'msgsnd',
                 'reason': set([('kern_ipc_perm', 'deleted'),
                                ('list_head', 'prev')])},
                {'call': 'munlock', 'reason': set([('list_head', 'prev')])},
                {'call': 'setpriority',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'inotify_init1',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'mincore', 'reason': set([('list_head', 'prev')])},
                {'call': 'mq_notify',
                 'reason': set([('list_head', 'prev'),
                                ('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'sendfile',
                 'reason': set([('list_head', 'prev'),
                                ('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'timer_getoverrun',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'newfstat',
                 'reason': set([('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'kexec_load',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'clone', 'reason': set([('list_head', 'prev')])},
                {'call': 'mq_open', 'reason': set([('list_head', 'prev')])},
                {'call': 'setgroups', 'reason': set([('list_head', 'prev')])},
                {'call': 'clock_nanosleep',
                 'reason': set([('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'unlinkat',
                 'reason': set([('list_head', 'prev'),
                                ('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'sched_getparam',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'io_cancel', 'reason': set([('list_head', 'prev')])},
                {'call': 'open_by_handle_at',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'futex',
                 'reason': set([('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'recvmmsg',
                 'reason': set([('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'finit_module',
                 'reason': set([('list_head', 'prev')])},
                {'call': 'sendfile64',
                 'reason': set([('list_head', 'prev'),
                                ('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])},
                {'call': 'mlockall', 'reason': set([('list_head', 'prev')])},
                {'call': 'ppoll',
                 'reason': set([('timespec', 'tv_nsec'),
                                ('timespec', 'tv_sec')])}],
 'sendfile': [{'call': 'eventfd2', 'reason': set([('file', 'f_mode')])},
              {'call': 'swapoff', 'reason': set([('file', 'f_mode')])},
              {'call': 'memfd_create', 'reason': set([('file', 'f_mode')])},
              {'call': 'remap_file_pages',
               'reason': set([('file', 'f_mode')])},
              {'call': 'dup3', 'reason': set([('file', 'f_mode')])},
              {'call': 'epoll_create1', 'reason': set([('file', 'f_mode')])},
              {'call': 'epoll_ctl', 'reason': set([('file', 'f_mode')])},
              {'call': 'flock', 'reason': set([('file', 'f_mode')])},
              {'call': 'openat', 'reason': set([('file', 'f_mode')])},
              {'call': 'uselib', 'reason': set([('file', 'f_mode')])},
              {'call': 'accept4', 'reason': set([('file', 'f_mode')])},
              {'call': 'socketpair', 'reason': set([('file', 'f_mode')])},
              {'call': 'shmat', 'reason': set([('file', 'f_mode')])},
              {'call': 'socket', 'reason': set([('file', 'f_mode')])},
              {'call': 'pipe2', 'reason': set([('file', 'f_mode')])},
              {'call': 'perf_event_open',
               'reason': set([('file', 'f_mode')])},
              {'call': 'shmdt', 'reason': set([('file', 'f_mode')])},
              {'call': 'acct', 'reason': set([('file', 'f_mode')])},
              {'call': 'open', 'reason': set([('file', 'f_mode')])},
              {'call': 'dup', 'reason': set([('file', 'f_mode')])},
              {'call': 'setns', 'reason': set([('file', 'f_mode')])},
              {'call': 'shmctl', 'reason': set([('file', 'f_mode')])},
              {'call': 'swapon', 'reason': set([('file', 'f_mode')])},
              {'call': 'mmap_pgoff', 'reason': set([('file', 'f_mode')])},
              {'call': 'mq_open', 'reason': set([('file', 'f_mode')])},
              {'call': 'open_by_handle_at',
               'reason': set([('file', 'f_mode')])}],
 'sendfile64': [{'call': 'eventfd2', 'reason': set([('file', 'f_mode')])},
                {'call': 'swapoff', 'reason': set([('file', 'f_mode')])},
                {'call': 'memfd_create', 'reason': set([('file', 'f_mode')])},
                {'call': 'remap_file_pages',
                 'reason': set([('file', 'f_mode')])},
                {'call': 'dup3', 'reason': set([('file', 'f_mode')])},
                {'call': 'epoll_create1',
                 'reason': set([('file', 'f_mode')])},
                {'call': 'epoll_ctl', 'reason': set([('file', 'f_mode')])},
                {'call': 'flock', 'reason': set([('file', 'f_mode')])},
                {'call': 'openat', 'reason': set([('file', 'f_mode')])},
                {'call': 'uselib', 'reason': set([('file', 'f_mode')])},
                {'call': 'accept4', 'reason': set([('file', 'f_mode')])},
                {'call': 'socketpair', 'reason': set([('file', 'f_mode')])},
                {'call': 'shmat', 'reason': set([('file', 'f_mode')])},
                {'call': 'socket', 'reason': set([('file', 'f_mode')])},
                {'call': 'pipe2', 'reason': set([('file', 'f_mode')])},
                {'call': 'perf_event_open',
                 'reason': set([('file', 'f_mode')])},
                {'call': 'shmdt', 'reason': set([('file', 'f_mode')])},
                {'call': 'acct', 'reason': set([('file', 'f_mode')])},
                {'call': 'open', 'reason': set([('file', 'f_mode')])},
                {'call': 'dup', 'reason': set([('file', 'f_mode')])},
                {'call': 'setns', 'reason': set([('file', 'f_mode')])},
                {'call': 'shmctl', 'reason': set([('file', 'f_mode')])},
                {'call': 'swapon', 'reason': set([('file', 'f_mode')])},
                {'call': 'mmap_pgoff', 'reason': set([('file', 'f_mode')])},
                {'call': 'mq_open', 'reason': set([('file', 'f_mode')])},
                {'call': 'open_by_handle_at',
                 'reason': set([('file', 'f_mode')])}],
 'sendmmsg': [{'call': 'recvfrom', 'reason': set([('socket', 'file')])},
              {'call': 'sendto', 'reason': set([('socket', 'file')])},
              {'call': 'connect', 'reason': set([('socket', 'file')])},
              {'call': 'getsockname', 'reason': set([('socket', 'file')])},
              {'call': 'accept4', 'reason': set([('socket', 'file')])},
              {'call': 'getpeername', 'reason': set([('socket', 'file')])},
              {'call': 'setsockopt', 'reason': set([('socket', 'file')])},
              {'call': 'sendmsg', 'reason': set([('socket', 'file')])},
              {'call': 'shutdown', 'reason': set([('socket', 'file')])},
              {'call': 'getsockopt', 'reason': set([('socket', 'file')])},
              {'call': 'listen', 'reason': set([('socket', 'file')])},
              {'call': 'recvmsg', 'reason': set([('socket', 'file')])},
              {'call': 'bind', 'reason': set([('socket', 'file')])},
              {'call': 'recvmmsg', 'reason': set([('socket', 'file')])}],
 'sendmsg': [{'call': 'recvfrom', 'reason': set([('socket', 'file')])},
             {'call': 'sendto', 'reason': set([('socket', 'file')])},
             {'call': 'connect', 'reason': set([('socket', 'file')])},
             {'call': 'getsockname', 'reason': set([('socket', 'file')])},
             {'call': 'accept4', 'reason': set([('socket', 'file')])},
             {'call': 'getpeername', 'reason': set([('socket', 'file')])},
             {'call': 'setsockopt', 'reason': set([('socket', 'file')])},
             {'call': 'shutdown', 'reason': set([('socket', 'file')])},
             {'call': 'getsockopt', 'reason': set([('socket', 'file')])},
             {'call': 'listen', 'reason': set([('socket', 'file')])},
             {'call': 'recvmsg', 'reason': set([('socket', 'file')])},
             {'call': 'sendmmsg', 'reason': set([('socket', 'file')])},
             {'call': 'bind', 'reason': set([('socket', 'file')])},
             {'call': 'recvmmsg', 'reason': set([('socket', 'file')])}],
 'sendto': [{'call': 'eventfd2', 'reason': set([('file', 'f_flags')])},
            {'call': 'swapoff', 'reason': set([('file', 'f_flags')])},
            {'call': 'memfd_create', 'reason': set([('file', 'f_flags')])},
            {'call': 'remap_file_pages',
             'reason': set([('file', 'f_flags')])},
            {'call': 'dup3', 'reason': set([('file', 'f_flags')])},
            {'call': 'epoll_create1', 'reason': set([('file', 'f_flags')])},
            {'call': 'epoll_ctl', 'reason': set([('file', 'f_flags')])},
            {'call': 'flock', 'reason': set([('file', 'f_flags')])},
            {'call': 'openat', 'reason': set([('file', 'f_flags')])},
            {'call': 'uselib', 'reason': set([('file', 'f_flags')])},
            {'call': 'accept4', 'reason': set([('file', 'f_flags')])},
            {'call': 'socketpair', 'reason': set([('file', 'f_flags')])},
            {'call': 'shmat', 'reason': set([('file', 'f_flags')])},
            {'call': 'socket', 'reason': set([('file', 'f_flags')])},
            {'call': 'pipe2', 'reason': set([('file', 'f_flags')])},
            {'call': 'perf_event_open', 'reason': set([('file', 'f_flags')])},
            {'call': 'shmdt', 'reason': set([('file', 'f_flags')])},
            {'call': 'acct', 'reason': set([('file', 'f_flags')])},
            {'call': 'open', 'reason': set([('file', 'f_flags')])},
            {'call': 'mq_getsetattr', 'reason': set([('file', 'f_flags')])},
            {'call': 'dup', 'reason': set([('file', 'f_flags')])},
            {'call': 'setns', 'reason': set([('file', 'f_flags')])},
            {'call': 'shmctl', 'reason': set([('file', 'f_flags')])},
            {'call': 'swapon', 'reason': set([('file', 'f_flags')])},
            {'call': 'mmap_pgoff', 'reason': set([('file', 'f_flags')])},
            {'call': 'mq_open', 'reason': set([('file', 'f_flags')])},
            {'call': 'open_by_handle_at',
             'reason': set([('file', 'f_flags')])}],
 'set_mempolicy': [{'call': 'get_mempolicy',
                    'reason': set([('mempolicy', 'mode')])},
                   {'call': 'mbind', 'reason': set([('mempolicy', 'mode')])}],
 'set_thread_area': [{'call': 'keyctl',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'rt_sigtimedwait',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'msgrcv',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'kill',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'sched_getaffinity',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'arch_prctl',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'sched_setparam',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'ioprio_set',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'getppid',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'ioperm',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'mq_timedreceive',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'capget',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'sched_setaffinity',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'signal',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'semtimedop',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'umount',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'sched_rr_get_interval',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'rt_sigprocmask',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'setsid',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'sigaltstack',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'sched_setattr',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'migrate_pages',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'getitimer',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'setpgid',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'getsid',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'prlimit64',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'perf_event_open',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'rt_sigaction',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'getpgid',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'getpriority',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'sigaction',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'setns',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'fork',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'get_robust_list',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'mq_timedsend',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'sched_getscheduler',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'ptrace',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'sched_getattr',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'getrusage',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'sched_setscheduler',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'setitimer',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'ioprio_get',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'vfork',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'prctl',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'move_pages',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'setpriority',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'clone',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])},
                     {'call': 'sched_getparam',
                      'reason': set([('thread_struct', 'fsindex'),
                                     ('thread_struct', 'gsindex')])}],
 'set_trip_temp': [{'call': 'get_trip_temp',
                    'reason': set([('pkg_device', 'cpu'),
                                   ('pkg_device', 'tj_max')])},
                   {'call': 'get_curr_temp',
                    'reason': set([('pkg_device', 'cpu'),
                                   ('pkg_device', 'tj_max')])}],
 'setdomainname': [{'call': 'setns',
                    'reason': set([('uts_namespace', 'user_ns')])}],
 'setfsgid': [{'call': 'keyctl',
               'reason': set([('cred', 'user_ns'), ('task_struct', 'cred')])},
              {'call': 'rt_sigtimedwait',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'setfsuid', 'reason': set([('cred', 'user_ns')])},
              {'call': 'msgrcv', 'reason': set([('task_struct', 'cred')])},
              {'call': 'kill', 'reason': set([('task_struct', 'cred')])},
              {'call': 'getresuid16', 'reason': set([('cred', 'user_ns')])},
              {'call': 'getresgid', 'reason': set([('cred', 'user_ns')])},
              {'call': 'sched_getaffinity',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_setparam',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'setgid',
               'reason': set([('cred', 'egid'),
                              ('cred', 'fsgid'),
                              ('cred', 'gid'),
                              ('cred', 'sgid'),
                              ('cred', 'user_ns')])},
              {'call': 'ioprio_set',
               'reason': set([('cred', 'user_ns'), ('task_struct', 'cred')])},
              {'call': 'capset', 'reason': set([('cred', 'user_ns')])},
              {'call': 'getppid', 'reason': set([('task_struct', 'cred')])},
              {'call': 'mq_timedreceive',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'getresgid16', 'reason': set([('cred', 'user_ns')])},
              {'call': 'capget', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_setaffinity',
               'reason': set([('cred', 'user_ns'), ('task_struct', 'cred')])},
              {'call': 'unshare', 'reason': set([('cred', 'user_ns')])},
              {'call': 'signal', 'reason': set([('task_struct', 'cred')])},
              {'call': 'setreuid', 'reason': set([('cred', 'user_ns')])},
              {'call': 'semtimedop',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'umount', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_rr_get_interval',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'epoll_create1', 'reason': set([('cred', 'user_ns')])},
              {'call': 'getresuid', 'reason': set([('cred', 'user_ns')])},
              {'call': 'rt_sigprocmask',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'setsid', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sigaltstack',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_setattr',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'migrate_pages',
               'reason': set([('cred', 'user_ns'), ('task_struct', 'cred')])},
              {'call': 'getitimer', 'reason': set([('task_struct', 'cred')])},
              {'call': 'setpgid', 'reason': set([('task_struct', 'cred')])},
              {'call': 'setresgid',
               'reason': set([('cred', 'egid'),
                              ('cred', 'fsgid'),
                              ('cred', 'gid'),
                              ('cred', 'sgid'),
                              ('cred', 'user_ns')])},
              {'call': 'setregid',
               'reason': set([('cred', 'egid'),
                              ('cred', 'fsgid'),
                              ('cred', 'gid'),
                              ('cred', 'sgid'),
                              ('cred', 'user_ns')])},
              {'call': 'getsid', 'reason': set([('task_struct', 'cred')])},
              {'call': 'prlimit64',
               'reason': set([('cred', 'user_ns'), ('task_struct', 'cred')])},
              {'call': 'perf_event_open',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'getgroups16', 'reason': set([('cred', 'user_ns')])},
              {'call': 'rt_sigaction',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'getpgid', 'reason': set([('task_struct', 'cred')])},
              {'call': 'getpriority',
               'reason': set([('cred', 'user_ns'), ('task_struct', 'cred')])},
              {'call': 'sigaction', 'reason': set([('task_struct', 'cred')])},
              {'call': 'faccessat',
               'reason': set([('cred', 'fsgid'), ('cred', 'user_ns')])},
              {'call': 'setns', 'reason': set([('task_struct', 'cred')])},
              {'call': 'fork', 'reason': set([('task_struct', 'cred')])},
              {'call': 'get_robust_list',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'mq_timedsend',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_getscheduler',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'ptrace', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_getattr',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'getrusage', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_setscheduler',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'setresuid', 'reason': set([('cred', 'user_ns')])},
              {'call': 'setitimer', 'reason': set([('task_struct', 'cred')])},
              {'call': 'ioprio_get',
               'reason': set([('cred', 'user_ns'), ('task_struct', 'cred')])},
              {'call': 'vfork', 'reason': set([('task_struct', 'cred')])},
              {'call': 'setuid', 'reason': set([('cred', 'user_ns')])},
              {'call': 'prctl', 'reason': set([('task_struct', 'cred')])},
              {'call': 'move_pages',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'getgroups', 'reason': set([('cred', 'user_ns')])},
              {'call': 'setpriority',
               'reason': set([('cred', 'user_ns'), ('task_struct', 'cred')])},
              {'call': 'clone', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_getparam',
               'reason': set([('task_struct', 'cred')])}],
 'setfsuid': [{'call': 'keyctl',
               'reason': set([('cred', 'user_ns'), ('task_struct', 'cred')])},
              {'call': 'rt_sigtimedwait',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'msgrcv', 'reason': set([('task_struct', 'cred')])},
              {'call': 'kill', 'reason': set([('task_struct', 'cred')])},
              {'call': 'getresuid16', 'reason': set([('cred', 'user_ns')])},
              {'call': 'getresgid', 'reason': set([('cred', 'user_ns')])},
              {'call': 'sched_getaffinity',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_setparam',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'setgid', 'reason': set([('cred', 'user_ns')])},
              {'call': 'ioprio_set',
               'reason': set([('cred', 'user_ns'), ('task_struct', 'cred')])},
              {'call': 'capset', 'reason': set([('cred', 'user_ns')])},
              {'call': 'getppid', 'reason': set([('task_struct', 'cred')])},
              {'call': 'mq_timedreceive',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'getresgid16', 'reason': set([('cred', 'user_ns')])},
              {'call': 'capget', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_setaffinity',
               'reason': set([('cred', 'user_ns'), ('task_struct', 'cred')])},
              {'call': 'setfsgid', 'reason': set([('cred', 'user_ns')])},
              {'call': 'unshare', 'reason': set([('cred', 'user_ns')])},
              {'call': 'signal', 'reason': set([('task_struct', 'cred')])},
              {'call': 'setreuid',
               'reason': set([('cred', 'euid'),
                              ('cred', 'fsuid'),
                              ('cred', 'suid'),
                              ('cred', 'uid'),
                              ('cred', 'user_ns')])},
              {'call': 'semtimedop',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'umount', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_rr_get_interval',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'epoll_create1', 'reason': set([('cred', 'user_ns')])},
              {'call': 'getresuid', 'reason': set([('cred', 'user_ns')])},
              {'call': 'rt_sigprocmask',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'setsid', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sigaltstack',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_setattr',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'migrate_pages',
               'reason': set([('cred', 'user_ns'), ('task_struct', 'cred')])},
              {'call': 'getitimer', 'reason': set([('task_struct', 'cred')])},
              {'call': 'setpgid', 'reason': set([('task_struct', 'cred')])},
              {'call': 'setresgid', 'reason': set([('cred', 'user_ns')])},
              {'call': 'setregid', 'reason': set([('cred', 'user_ns')])},
              {'call': 'getsid', 'reason': set([('task_struct', 'cred')])},
              {'call': 'prlimit64',
               'reason': set([('cred', 'user_ns'), ('task_struct', 'cred')])},
              {'call': 'perf_event_open',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'getgroups16', 'reason': set([('cred', 'user_ns')])},
              {'call': 'rt_sigaction',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'getpgid', 'reason': set([('task_struct', 'cred')])},
              {'call': 'getpriority',
               'reason': set([('cred', 'user_ns'), ('task_struct', 'cred')])},
              {'call': 'sigaction', 'reason': set([('task_struct', 'cred')])},
              {'call': 'faccessat',
               'reason': set([('cred', 'fsuid'), ('cred', 'user_ns')])},
              {'call': 'setns', 'reason': set([('task_struct', 'cred')])},
              {'call': 'fork', 'reason': set([('task_struct', 'cred')])},
              {'call': 'get_robust_list',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'mq_timedsend',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_getscheduler',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'ptrace', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_getattr',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'getrusage', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_setscheduler',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'setresuid',
               'reason': set([('cred', 'euid'),
                              ('cred', 'fsuid'),
                              ('cred', 'suid'),
                              ('cred', 'uid'),
                              ('cred', 'user_ns')])},
              {'call': 'setitimer', 'reason': set([('task_struct', 'cred')])},
              {'call': 'ioprio_get',
               'reason': set([('cred', 'user_ns'), ('task_struct', 'cred')])},
              {'call': 'vfork', 'reason': set([('task_struct', 'cred')])},
              {'call': 'setuid',
               'reason': set([('cred', 'euid'),
                              ('cred', 'fsuid'),
                              ('cred', 'suid'),
                              ('cred', 'uid'),
                              ('cred', 'user_ns')])},
              {'call': 'prctl', 'reason': set([('task_struct', 'cred')])},
              {'call': 'move_pages',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'getgroups', 'reason': set([('cred', 'user_ns')])},
              {'call': 'setpriority',
               'reason': set([('cred', 'user_ns'), ('task_struct', 'cred')])},
              {'call': 'clone', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_getparam',
               'reason': set([('task_struct', 'cred')])}],
 'setgid': [{'call': 'keyctl',
             'reason': set([('cred', 'user_ns'), ('task_struct', 'cred')])},
            {'call': 'rt_sigtimedwait',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'setfsuid', 'reason': set([('cred', 'user_ns')])},
            {'call': 'msgrcv', 'reason': set([('task_struct', 'cred')])},
            {'call': 'kill', 'reason': set([('task_struct', 'cred')])},
            {'call': 'getresuid16', 'reason': set([('cred', 'user_ns')])},
            {'call': 'getresgid', 'reason': set([('cred', 'user_ns')])},
            {'call': 'sched_getaffinity',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_setparam',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'ioprio_set',
             'reason': set([('cred', 'user_ns'), ('task_struct', 'cred')])},
            {'call': 'capset', 'reason': set([('cred', 'user_ns')])},
            {'call': 'getppid', 'reason': set([('task_struct', 'cred')])},
            {'call': 'mq_timedreceive',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'getresgid16', 'reason': set([('cred', 'user_ns')])},
            {'call': 'capget', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_setaffinity',
             'reason': set([('cred', 'user_ns'), ('task_struct', 'cred')])},
            {'call': 'setfsgid', 'reason': set([('cred', 'user_ns')])},
            {'call': 'unshare', 'reason': set([('cred', 'user_ns')])},
            {'call': 'signal', 'reason': set([('task_struct', 'cred')])},
            {'call': 'setreuid', 'reason': set([('cred', 'user_ns')])},
            {'call': 'semtimedop', 'reason': set([('task_struct', 'cred')])},
            {'call': 'umount', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_rr_get_interval',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'epoll_create1', 'reason': set([('cred', 'user_ns')])},
            {'call': 'getresuid', 'reason': set([('cred', 'user_ns')])},
            {'call': 'rt_sigprocmask',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'setsid', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sigaltstack', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_setattr',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'migrate_pages',
             'reason': set([('cred', 'user_ns'), ('task_struct', 'cred')])},
            {'call': 'getitimer', 'reason': set([('task_struct', 'cred')])},
            {'call': 'setpgid', 'reason': set([('task_struct', 'cred')])},
            {'call': 'setresgid',
             'reason': set([('cred', 'gid'),
                            ('cred', 'sgid'),
                            ('cred', 'user_ns')])},
            {'call': 'setregid',
             'reason': set([('cred', 'gid'),
                            ('cred', 'sgid'),
                            ('cred', 'user_ns')])},
            {'call': 'getsid', 'reason': set([('task_struct', 'cred')])},
            {'call': 'prlimit64',
             'reason': set([('cred', 'user_ns'), ('task_struct', 'cred')])},
            {'call': 'perf_event_open',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'getgroups16', 'reason': set([('cred', 'user_ns')])},
            {'call': 'rt_sigaction',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'getpgid', 'reason': set([('task_struct', 'cred')])},
            {'call': 'getpriority',
             'reason': set([('cred', 'user_ns'), ('task_struct', 'cred')])},
            {'call': 'sigaction', 'reason': set([('task_struct', 'cred')])},
            {'call': 'faccessat', 'reason': set([('cred', 'user_ns')])},
            {'call': 'setns', 'reason': set([('task_struct', 'cred')])},
            {'call': 'fork', 'reason': set([('task_struct', 'cred')])},
            {'call': 'get_robust_list',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'mq_timedsend',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_getscheduler',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'ptrace', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_getattr',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'getrusage', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_setscheduler',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'setresuid', 'reason': set([('cred', 'user_ns')])},
            {'call': 'setitimer', 'reason': set([('task_struct', 'cred')])},
            {'call': 'ioprio_get',
             'reason': set([('cred', 'user_ns'), ('task_struct', 'cred')])},
            {'call': 'vfork', 'reason': set([('task_struct', 'cred')])},
            {'call': 'setuid', 'reason': set([('cred', 'user_ns')])},
            {'call': 'prctl', 'reason': set([('task_struct', 'cred')])},
            {'call': 'move_pages', 'reason': set([('task_struct', 'cred')])},
            {'call': 'getgroups', 'reason': set([('cred', 'user_ns')])},
            {'call': 'setpriority',
             'reason': set([('cred', 'user_ns'), ('task_struct', 'cred')])},
            {'call': 'clone', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_getparam',
             'reason': set([('task_struct', 'cred')])}],
 'setgroups16': [{'call': 'setgroups',
                  'reason': set([('group_info', 'ngroups')])}],
 'sethostname': [{'call': 'setns',
                  'reason': set([('uts_namespace', 'user_ns')])}],
 'setitimer': [{'call': 'waitid',
                'reason': set([('timeval', 'tv_sec'),
                               ('timeval', 'tv_usec')])},
               {'call': 'settimeofday',
                'reason': set([('timeval', 'tv_sec'),
                               ('timeval', 'tv_usec')])},
               {'call': 'timer_create',
                'reason': set([('signal_struct', 'it_real_incr')])},
               {'call': 'adjtimex',
                'reason': set([('timeval', 'tv_sec'),
                               ('timeval', 'tv_usec')])},
               {'call': 'getitimer',
                'reason': set([('itimerval', 'it_interval'),
                               ('itimerval', 'it_value'),
                               ('timeval', 'tv_sec'),
                               ('timeval', 'tv_usec')])},
               {'call': 'select',
                'reason': set([('timeval', 'tv_sec'),
                               ('timeval', 'tv_usec')])},
               {'call': 'exit_group',
                'reason': set([('signal_struct', 'it_real_incr')])},
               {'call': 'wait4',
                'reason': set([('timeval', 'tv_sec'),
                               ('timeval', 'tv_usec')])},
               {'call': 'getrusage',
                'reason': set([('timeval', 'tv_sec'),
                               ('timeval', 'tv_usec')])},
               {'call': 'clock_adjtime',
                'reason': set([('timeval', 'tv_sec'),
                               ('timeval', 'tv_usec')])},
               {'call': 'alarm',
                'reason': set([('timeval', 'tv_sec'),
                               ('timeval', 'tv_usec')])},
               {'call': 'ppoll',
                'reason': set([('timeval', 'tv_sec'),
                               ('timeval', 'tv_usec')])}],
 'setpgid': [{'call': 'keyctl',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'rt_sigtimedwait',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'msgrcv',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'kill',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'sched_getaffinity',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'sched_setparam',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'ioprio_set',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'getppid',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'mq_timedreceive',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'capget',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'sched_setaffinity',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'signal',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'setreuid', 'reason': set([('task_struct', 'flags')])},
             {'call': 'semtimedop',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'umount',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'timer_create',
              'reason': set([('signal_struct', 'leader')])},
             {'call': 'sched_rr_get_interval',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'rt_sigprocmask',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'setsid',
              'reason': set([('signal_struct', 'leader'),
                             ('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'sigaltstack',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'sched_setattr',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'migrate_pages',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'getitimer',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'getsid',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'prlimit64',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'perf_event_open',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'rt_sigaction',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'getpgid',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'exit_group',
              'reason': set([('signal_struct', 'leader')])},
             {'call': 'getpriority',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'sigaction',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'setns',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'fork',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'get_robust_list',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'mq_timedsend',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'sched_getscheduler',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'ptrace',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'sched_getattr',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'getrusage',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'sched_setscheduler',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'setresuid', 'reason': set([('task_struct', 'flags')])},
             {'call': 'setitimer',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'ioprio_get',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'vfork',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'setuid', 'reason': set([('task_struct', 'flags')])},
             {'call': 'prctl',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'move_pages',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'setpriority',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'clone',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])},
             {'call': 'sched_getparam',
              'reason': set([('task_struct', 'exit_signal'),
                             ('task_struct', 'flags'),
                             ('task_struct', 'real_parent'),
                             ('task_struct', 'signal')])}],
 'setpriority': [{'call': 'keyctl',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'rt_sigtimedwait',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'msgrcv',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'kill',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'sched_getaffinity',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'sched_setparam',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'ioprio_set',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'getppid',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'mq_timedreceive',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'capget',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'sched_setaffinity',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'signal',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'setreuid', 'reason': set([('cred', 'uid')])},
                 {'call': 'semtimedop',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'umount',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'sched_rr_get_interval',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'rt_sigprocmask',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'setsid',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'sigaltstack',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'sched_setattr',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'migrate_pages',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'getitimer',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'setpgid',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'getsid',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'prlimit64',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'perf_event_open',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'rt_sigaction',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'getpgid',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'getpriority',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'sigaction',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'setns',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'fork',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'get_robust_list',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'mq_timedsend',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'sched_getscheduler',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'ptrace',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'sched_getattr',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'getrusage',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'sched_setscheduler',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'setresuid', 'reason': set([('cred', 'uid')])},
                 {'call': 'setitimer',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'ioprio_get',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'vfork',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'setuid', 'reason': set([('cred', 'uid')])},
                 {'call': 'prctl',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'move_pages',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'clone',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])},
                 {'call': 'sched_getparam',
                  'reason': set([('task_struct', 'cred'),
                                 ('task_struct', 'real_cred')])}],
 'setregid': [{'call': 'keyctl',
               'reason': set([('cred', 'user_ns'), ('task_struct', 'cred')])},
              {'call': 'rt_sigtimedwait',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'setfsuid', 'reason': set([('cred', 'user_ns')])},
              {'call': 'msgrcv', 'reason': set([('task_struct', 'cred')])},
              {'call': 'kill', 'reason': set([('task_struct', 'cred')])},
              {'call': 'getresuid16', 'reason': set([('cred', 'user_ns')])},
              {'call': 'getresgid', 'reason': set([('cred', 'user_ns')])},
              {'call': 'sched_getaffinity',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_setparam',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'setgid',
               'reason': set([('cred', 'egid'),
                              ('cred', 'gid'),
                              ('cred', 'sgid'),
                              ('cred', 'user_ns')])},
              {'call': 'ioprio_set',
               'reason': set([('cred', 'user_ns'), ('task_struct', 'cred')])},
              {'call': 'capset', 'reason': set([('cred', 'user_ns')])},
              {'call': 'getppid', 'reason': set([('task_struct', 'cred')])},
              {'call': 'mq_timedreceive',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'getresgid16', 'reason': set([('cred', 'user_ns')])},
              {'call': 'capget', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_setaffinity',
               'reason': set([('cred', 'user_ns'), ('task_struct', 'cred')])},
              {'call': 'setfsgid', 'reason': set([('cred', 'user_ns')])},
              {'call': 'unshare', 'reason': set([('cred', 'user_ns')])},
              {'call': 'signal', 'reason': set([('task_struct', 'cred')])},
              {'call': 'setreuid', 'reason': set([('cred', 'user_ns')])},
              {'call': 'semtimedop',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'umount', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_rr_get_interval',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'epoll_create1', 'reason': set([('cred', 'user_ns')])},
              {'call': 'getresuid', 'reason': set([('cred', 'user_ns')])},
              {'call': 'rt_sigprocmask',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'setsid', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sigaltstack',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_setattr',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'migrate_pages',
               'reason': set([('cred', 'user_ns'), ('task_struct', 'cred')])},
              {'call': 'getitimer', 'reason': set([('task_struct', 'cred')])},
              {'call': 'setpgid', 'reason': set([('task_struct', 'cred')])},
              {'call': 'setresgid',
               'reason': set([('cred', 'egid'),
                              ('cred', 'gid'),
                              ('cred', 'sgid'),
                              ('cred', 'user_ns')])},
              {'call': 'getsid', 'reason': set([('task_struct', 'cred')])},
              {'call': 'prlimit64',
               'reason': set([('cred', 'user_ns'), ('task_struct', 'cred')])},
              {'call': 'perf_event_open',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'getgroups16', 'reason': set([('cred', 'user_ns')])},
              {'call': 'rt_sigaction',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'getpgid', 'reason': set([('task_struct', 'cred')])},
              {'call': 'getpriority',
               'reason': set([('cred', 'user_ns'), ('task_struct', 'cred')])},
              {'call': 'sigaction', 'reason': set([('task_struct', 'cred')])},
              {'call': 'faccessat', 'reason': set([('cred', 'user_ns')])},
              {'call': 'setns', 'reason': set([('task_struct', 'cred')])},
              {'call': 'fork', 'reason': set([('task_struct', 'cred')])},
              {'call': 'get_robust_list',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'mq_timedsend',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_getscheduler',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'ptrace', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_getattr',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'getrusage', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_setscheduler',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'setresuid', 'reason': set([('cred', 'user_ns')])},
              {'call': 'setitimer', 'reason': set([('task_struct', 'cred')])},
              {'call': 'ioprio_get',
               'reason': set([('cred', 'user_ns'), ('task_struct', 'cred')])},
              {'call': 'vfork', 'reason': set([('task_struct', 'cred')])},
              {'call': 'setuid', 'reason': set([('cred', 'user_ns')])},
              {'call': 'prctl', 'reason': set([('task_struct', 'cred')])},
              {'call': 'move_pages',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'getgroups', 'reason': set([('cred', 'user_ns')])},
              {'call': 'setpriority',
               'reason': set([('cred', 'user_ns'), ('task_struct', 'cred')])},
              {'call': 'clone', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_getparam',
               'reason': set([('task_struct', 'cred')])}],
 'setresgid': [{'call': 'keyctl',
                'reason': set([('cred', 'user_ns'),
                               ('task_struct', 'cred')])},
               {'call': 'rt_sigtimedwait',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setfsuid', 'reason': set([('cred', 'user_ns')])},
               {'call': 'msgrcv', 'reason': set([('task_struct', 'cred')])},
               {'call': 'kill', 'reason': set([('task_struct', 'cred')])},
               {'call': 'getresuid16', 'reason': set([('cred', 'user_ns')])},
               {'call': 'getresgid', 'reason': set([('cred', 'user_ns')])},
               {'call': 'sched_getaffinity',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_setparam',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setgid',
                'reason': set([('cred', 'egid'),
                               ('cred', 'gid'),
                               ('cred', 'sgid'),
                               ('cred', 'user_ns')])},
               {'call': 'ioprio_set',
                'reason': set([('cred', 'user_ns'),
                               ('task_struct', 'cred')])},
               {'call': 'capset', 'reason': set([('cred', 'user_ns')])},
               {'call': 'getppid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'mq_timedreceive',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'getresgid16', 'reason': set([('cred', 'user_ns')])},
               {'call': 'capget', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_setaffinity',
                'reason': set([('cred', 'user_ns'),
                               ('task_struct', 'cred')])},
               {'call': 'setfsgid', 'reason': set([('cred', 'user_ns')])},
               {'call': 'unshare', 'reason': set([('cred', 'user_ns')])},
               {'call': 'signal', 'reason': set([('task_struct', 'cred')])},
               {'call': 'setreuid', 'reason': set([('cred', 'user_ns')])},
               {'call': 'semtimedop',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'umount', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_rr_get_interval',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'epoll_create1',
                'reason': set([('cred', 'user_ns')])},
               {'call': 'getresuid', 'reason': set([('cred', 'user_ns')])},
               {'call': 'rt_sigprocmask',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setsid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sigaltstack',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_setattr',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'migrate_pages',
                'reason': set([('cred', 'user_ns'),
                               ('task_struct', 'cred')])},
               {'call': 'getitimer',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setpgid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'setregid',
                'reason': set([('cred', 'egid'),
                               ('cred', 'gid'),
                               ('cred', 'sgid'),
                               ('cred', 'user_ns')])},
               {'call': 'getsid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'prlimit64',
                'reason': set([('cred', 'user_ns'),
                               ('task_struct', 'cred')])},
               {'call': 'perf_event_open',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'getgroups16', 'reason': set([('cred', 'user_ns')])},
               {'call': 'rt_sigaction',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'getpgid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'getpriority',
                'reason': set([('cred', 'user_ns'),
                               ('task_struct', 'cred')])},
               {'call': 'sigaction',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'faccessat', 'reason': set([('cred', 'user_ns')])},
               {'call': 'setns', 'reason': set([('task_struct', 'cred')])},
               {'call': 'fork', 'reason': set([('task_struct', 'cred')])},
               {'call': 'get_robust_list',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'mq_timedsend',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_getscheduler',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'ptrace', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_getattr',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'getrusage',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_setscheduler',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setresuid', 'reason': set([('cred', 'user_ns')])},
               {'call': 'setitimer',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'ioprio_get',
                'reason': set([('cred', 'user_ns'),
                               ('task_struct', 'cred')])},
               {'call': 'vfork', 'reason': set([('task_struct', 'cred')])},
               {'call': 'setuid', 'reason': set([('cred', 'user_ns')])},
               {'call': 'prctl', 'reason': set([('task_struct', 'cred')])},
               {'call': 'move_pages',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'getgroups', 'reason': set([('cred', 'user_ns')])},
               {'call': 'setpriority',
                'reason': set([('cred', 'user_ns'),
                               ('task_struct', 'cred')])},
               {'call': 'clone', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_getparam',
                'reason': set([('task_struct', 'cred')])}],
 'setresuid': [{'call': 'keyctl',
                'reason': set([('cred', 'user'),
                               ('cred', 'user_ns'),
                               ('task_struct', 'cred')])},
               {'call': 'rt_sigtimedwait',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setfsuid',
                'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
               {'call': 'msgrcv', 'reason': set([('task_struct', 'cred')])},
               {'call': 'kill', 'reason': set([('task_struct', 'cred')])},
               {'call': 'getresuid16',
                'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
               {'call': 'getresgid',
                'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
               {'call': 'sched_getaffinity',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_setparam',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setgid',
                'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
               {'call': 'ioprio_set',
                'reason': set([('cred', 'user'),
                               ('cred', 'user_ns'),
                               ('task_struct', 'cred')])},
               {'call': 'capset',
                'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
               {'call': 'getppid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'mq_timedreceive',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'getresgid16',
                'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
               {'call': 'capget', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_setaffinity',
                'reason': set([('cred', 'user'),
                               ('cred', 'user_ns'),
                               ('task_struct', 'cred')])},
               {'call': 'setfsgid',
                'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
               {'call': 'unshare',
                'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
               {'call': 'signal', 'reason': set([('task_struct', 'cred')])},
               {'call': 'setreuid',
                'reason': set([('cred', 'euid'),
                               ('cred', 'suid'),
                               ('cred', 'uid'),
                               ('cred', 'user'),
                               ('cred', 'user_ns')])},
               {'call': 'semtimedop',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'umount', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_rr_get_interval',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'epoll_create1',
                'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
               {'call': 'getresuid',
                'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
               {'call': 'rt_sigprocmask',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setsid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sigaltstack',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_setattr',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'migrate_pages',
                'reason': set([('cred', 'user'),
                               ('cred', 'user_ns'),
                               ('task_struct', 'cred')])},
               {'call': 'getitimer',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setpgid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'setresgid',
                'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
               {'call': 'setregid',
                'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
               {'call': 'getsid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'prlimit64',
                'reason': set([('cred', 'user'),
                               ('cred', 'user_ns'),
                               ('task_struct', 'cred')])},
               {'call': 'perf_event_open',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'getgroups16',
                'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
               {'call': 'rt_sigaction',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'getpgid', 'reason': set([('task_struct', 'cred')])},
               {'call': 'getpriority',
                'reason': set([('cred', 'user'),
                               ('cred', 'user_ns'),
                               ('task_struct', 'cred')])},
               {'call': 'sigaction',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'faccessat',
                'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
               {'call': 'setns', 'reason': set([('task_struct', 'cred')])},
               {'call': 'fork', 'reason': set([('task_struct', 'cred')])},
               {'call': 'get_robust_list',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'mq_timedsend',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_getscheduler',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'ptrace', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_getattr',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'getrusage',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_setscheduler',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'setitimer',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'ioprio_get',
                'reason': set([('cred', 'user'),
                               ('cred', 'user_ns'),
                               ('task_struct', 'cred')])},
               {'call': 'vfork', 'reason': set([('task_struct', 'cred')])},
               {'call': 'setuid',
                'reason': set([('cred', 'euid'),
                               ('cred', 'suid'),
                               ('cred', 'uid'),
                               ('cred', 'user'),
                               ('cred', 'user_ns')])},
               {'call': 'prctl', 'reason': set([('task_struct', 'cred')])},
               {'call': 'move_pages',
                'reason': set([('task_struct', 'cred')])},
               {'call': 'getgroups',
                'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
               {'call': 'setpriority',
                'reason': set([('cred', 'user'),
                               ('cred', 'user_ns'),
                               ('task_struct', 'cred')])},
               {'call': 'clone', 'reason': set([('task_struct', 'cred')])},
               {'call': 'sched_getparam',
                'reason': set([('task_struct', 'cred')])}],
 'setreuid': [{'call': 'keyctl',
               'reason': set([('cred', 'user'),
                              ('cred', 'user_ns'),
                              ('task_struct', 'cred')])},
              {'call': 'rt_sigtimedwait',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'setfsuid',
               'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
              {'call': 'msgrcv', 'reason': set([('task_struct', 'cred')])},
              {'call': 'kill', 'reason': set([('task_struct', 'cred')])},
              {'call': 'getresuid16',
               'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
              {'call': 'getresgid',
               'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
              {'call': 'sched_getaffinity',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_setparam',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'setgid',
               'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
              {'call': 'ioprio_set',
               'reason': set([('cred', 'user'),
                              ('cred', 'user_ns'),
                              ('task_struct', 'cred')])},
              {'call': 'capset',
               'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
              {'call': 'getppid', 'reason': set([('task_struct', 'cred')])},
              {'call': 'mq_timedreceive',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'getresgid16',
               'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
              {'call': 'capget', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_setaffinity',
               'reason': set([('cred', 'user'),
                              ('cred', 'user_ns'),
                              ('task_struct', 'cred')])},
              {'call': 'setfsgid',
               'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
              {'call': 'unshare',
               'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
              {'call': 'signal', 'reason': set([('task_struct', 'cred')])},
              {'call': 'semtimedop',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'umount', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_rr_get_interval',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'epoll_create1',
               'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
              {'call': 'getresuid',
               'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
              {'call': 'rt_sigprocmask',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'setsid', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sigaltstack',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_setattr',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'migrate_pages',
               'reason': set([('cred', 'user'),
                              ('cred', 'user_ns'),
                              ('task_struct', 'cred')])},
              {'call': 'getitimer', 'reason': set([('task_struct', 'cred')])},
              {'call': 'setpgid', 'reason': set([('task_struct', 'cred')])},
              {'call': 'setresgid',
               'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
              {'call': 'setregid',
               'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
              {'call': 'getsid', 'reason': set([('task_struct', 'cred')])},
              {'call': 'prlimit64',
               'reason': set([('cred', 'user'),
                              ('cred', 'user_ns'),
                              ('task_struct', 'cred')])},
              {'call': 'perf_event_open',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'getgroups16',
               'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
              {'call': 'rt_sigaction',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'getpgid', 'reason': set([('task_struct', 'cred')])},
              {'call': 'getpriority',
               'reason': set([('cred', 'user'),
                              ('cred', 'user_ns'),
                              ('task_struct', 'cred')])},
              {'call': 'sigaction', 'reason': set([('task_struct', 'cred')])},
              {'call': 'faccessat',
               'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
              {'call': 'setns', 'reason': set([('task_struct', 'cred')])},
              {'call': 'fork', 'reason': set([('task_struct', 'cred')])},
              {'call': 'get_robust_list',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'mq_timedsend',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_getscheduler',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'ptrace', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_getattr',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'getrusage', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_setscheduler',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'setresuid',
               'reason': set([('cred', 'euid'),
                              ('cred', 'suid'),
                              ('cred', 'uid'),
                              ('cred', 'user'),
                              ('cred', 'user_ns')])},
              {'call': 'setitimer', 'reason': set([('task_struct', 'cred')])},
              {'call': 'ioprio_get',
               'reason': set([('cred', 'user'),
                              ('cred', 'user_ns'),
                              ('task_struct', 'cred')])},
              {'call': 'vfork', 'reason': set([('task_struct', 'cred')])},
              {'call': 'setuid',
               'reason': set([('cred', 'euid'),
                              ('cred', 'suid'),
                              ('cred', 'uid'),
                              ('cred', 'user'),
                              ('cred', 'user_ns')])},
              {'call': 'prctl', 'reason': set([('task_struct', 'cred')])},
              {'call': 'move_pages',
               'reason': set([('task_struct', 'cred')])},
              {'call': 'getgroups',
               'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
              {'call': 'setpriority',
               'reason': set([('cred', 'user'),
                              ('cred', 'user_ns'),
                              ('task_struct', 'cred')])},
              {'call': 'clone', 'reason': set([('task_struct', 'cred')])},
              {'call': 'sched_getparam',
               'reason': set([('task_struct', 'cred')])}],
 'setrlimit': [{'call': 'keyctl',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'rt_sigtimedwait',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'msgrcv',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'kill',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'sched_getaffinity',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'sched_setparam',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'ioprio_set',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'getppid',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'mq_timedreceive',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'capget',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'sched_setaffinity',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'signal',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'semtimedop',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'umount',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'sched_rr_get_interval',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'rt_sigprocmask',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'setsid',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'sigaltstack',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'sched_setattr',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'migrate_pages',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'getitimer',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'setpgid',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'getsid',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'old_getrlimit',
                'reason': set([('rlimit', 'rlim_cur'),
                               ('rlimit', 'rlim_max')])},
               {'call': 'prlimit64',
                'reason': set([('rlimit', 'rlim_cur'),
                               ('rlimit', 'rlim_max'),
                               ('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'perf_event_open',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'rt_sigaction',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'getpgid',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'getpriority',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'sigaction',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'setns',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'fork',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'get_robust_list',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'mq_timedsend',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'sched_getscheduler',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'ptrace',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'sched_getattr',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'getrusage',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'sched_setscheduler',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'setitimer',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'ioprio_get',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'vfork',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'prctl',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'move_pages',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'setpriority',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'getrlimit',
                'reason': set([('compat_rlimit', 'rlim_cur'),
                               ('compat_rlimit', 'rlim_max')])},
               {'call': 'clone',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])},
               {'call': 'sched_getparam',
                'reason': set([('task_struct', 'group_leader'),
                               ('task_struct', 'sighand')])}],
 'setsid': [{'call': 'timer_create',
             'reason': set([('signal_struct', 'leader')])},
            {'call': 'exit_group',
             'reason': set([('signal_struct', 'leader')])}],
 'setsockopt': [{'call': 'accept4',
                 'reason': set([('proto_ops', 'compat_setsockopt')])}],
 'settimeofday': [{'call': 'waitid',
                   'reason': set([('timeval', 'tv_sec'),
                                  ('timeval', 'tv_usec')])},
                  {'call': 'adjtimex',
                   'reason': set([('timeval', 'tv_sec'),
                                  ('timeval', 'tv_usec')])},
                  {'call': 'getitimer',
                   'reason': set([('timeval', 'tv_sec'),
                                  ('timeval', 'tv_usec')])},
                  {'call': 'select',
                   'reason': set([('timeval', 'tv_sec'),
                                  ('timeval', 'tv_usec')])},
                  {'call': 'wait4',
                   'reason': set([('timeval', 'tv_sec'),
                                  ('timeval', 'tv_usec')])},
                  {'call': 'getrusage',
                   'reason': set([('timeval', 'tv_sec'),
                                  ('timeval', 'tv_usec')])},
                  {'call': 'setitimer',
                   'reason': set([('timeval', 'tv_sec'),
                                  ('timeval', 'tv_usec')])},
                  {'call': 'clock_adjtime',
                   'reason': set([('timeval', 'tv_sec'),
                                  ('timeval', 'tv_usec')])},
                  {'call': 'alarm',
                   'reason': set([('timeval', 'tv_sec'),
                                  ('timeval', 'tv_usec')])},
                  {'call': 'ppoll',
                   'reason': set([('timeval', 'tv_sec'),
                                  ('timeval', 'tv_usec')])}],
 'setuid': [{'call': 'keyctl',
             'reason': set([('cred', 'user'),
                            ('cred', 'user_ns'),
                            ('task_struct', 'cred')])},
            {'call': 'rt_sigtimedwait',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'setfsuid',
             'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
            {'call': 'msgrcv', 'reason': set([('task_struct', 'cred')])},
            {'call': 'kill', 'reason': set([('task_struct', 'cred')])},
            {'call': 'getresuid16',
             'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
            {'call': 'getresgid',
             'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
            {'call': 'sched_getaffinity',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_setparam',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'setgid',
             'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
            {'call': 'ioprio_set',
             'reason': set([('cred', 'user'),
                            ('cred', 'user_ns'),
                            ('task_struct', 'cred')])},
            {'call': 'capset',
             'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
            {'call': 'getppid', 'reason': set([('task_struct', 'cred')])},
            {'call': 'mq_timedreceive',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'getresgid16',
             'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
            {'call': 'capget', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_setaffinity',
             'reason': set([('cred', 'user'),
                            ('cred', 'user_ns'),
                            ('task_struct', 'cred')])},
            {'call': 'setfsgid',
             'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
            {'call': 'unshare',
             'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
            {'call': 'signal', 'reason': set([('task_struct', 'cred')])},
            {'call': 'setreuid',
             'reason': set([('cred', 'suid'),
                            ('cred', 'uid'),
                            ('cred', 'user'),
                            ('cred', 'user_ns')])},
            {'call': 'semtimedop', 'reason': set([('task_struct', 'cred')])},
            {'call': 'umount', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_rr_get_interval',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'epoll_create1',
             'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
            {'call': 'getresuid',
             'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
            {'call': 'rt_sigprocmask',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'setsid', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sigaltstack', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_setattr',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'migrate_pages',
             'reason': set([('cred', 'user'),
                            ('cred', 'user_ns'),
                            ('task_struct', 'cred')])},
            {'call': 'getitimer', 'reason': set([('task_struct', 'cred')])},
            {'call': 'setpgid', 'reason': set([('task_struct', 'cred')])},
            {'call': 'setresgid',
             'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
            {'call': 'setregid',
             'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
            {'call': 'getsid', 'reason': set([('task_struct', 'cred')])},
            {'call': 'prlimit64',
             'reason': set([('cred', 'user'),
                            ('cred', 'user_ns'),
                            ('task_struct', 'cred')])},
            {'call': 'perf_event_open',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'getgroups16',
             'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
            {'call': 'rt_sigaction',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'getpgid', 'reason': set([('task_struct', 'cred')])},
            {'call': 'getpriority',
             'reason': set([('cred', 'user'),
                            ('cred', 'user_ns'),
                            ('task_struct', 'cred')])},
            {'call': 'sigaction', 'reason': set([('task_struct', 'cred')])},
            {'call': 'faccessat',
             'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
            {'call': 'setns', 'reason': set([('task_struct', 'cred')])},
            {'call': 'fork', 'reason': set([('task_struct', 'cred')])},
            {'call': 'get_robust_list',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'mq_timedsend',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_getscheduler',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'ptrace', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_getattr',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'getrusage', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_setscheduler',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'setresuid',
             'reason': set([('cred', 'suid'),
                            ('cred', 'uid'),
                            ('cred', 'user'),
                            ('cred', 'user_ns')])},
            {'call': 'setitimer', 'reason': set([('task_struct', 'cred')])},
            {'call': 'ioprio_get',
             'reason': set([('cred', 'user'),
                            ('cred', 'user_ns'),
                            ('task_struct', 'cred')])},
            {'call': 'vfork', 'reason': set([('task_struct', 'cred')])},
            {'call': 'prctl', 'reason': set([('task_struct', 'cred')])},
            {'call': 'move_pages', 'reason': set([('task_struct', 'cred')])},
            {'call': 'getgroups',
             'reason': set([('cred', 'user'), ('cred', 'user_ns')])},
            {'call': 'setpriority',
             'reason': set([('cred', 'user'),
                            ('cred', 'user_ns'),
                            ('task_struct', 'cred')])},
            {'call': 'clone', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_getparam',
             'reason': set([('task_struct', 'cred')])}],
 'setxattr': [{'call': 'eventfd2',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'swapoff',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'pivot_root',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'memfd_create',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'remap_file_pages',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'dup3',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'unshare',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'epoll_create1',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'epoll_ctl',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'flock',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'openat',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'lookup_dcookie',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'uselib',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'accept4',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'socketpair',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'getcwd',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'shmat',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'socket',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'pipe2',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'perf_event_open',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'shmdt',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'quotactl',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'acct',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'open',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'dup',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'setns',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'shmctl',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'swapon',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'mmap_pgoff',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'mq_open',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'open_by_handle_at',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])}],
 'shmat': [{'call': 'keyctl', 'reason': set([('task_struct', 'mm')])},
           {'call': 'rt_sigtimedwait',
            'reason': set([('task_struct', 'mm')])},
           {'call': 'msgrcv', 'reason': set([('task_struct', 'mm')])},
           {'call': 'eventfd2', 'reason': set([('path', 'dentry')])},
           {'call': 'kill', 'reason': set([('task_struct', 'mm')])},
           {'call': 'swapoff', 'reason': set([('path', 'dentry')])},
           {'call': 'sched_getaffinity',
            'reason': set([('task_struct', 'mm')])},
           {'call': 'sched_setparam', 'reason': set([('task_struct', 'mm')])},
           {'call': 'pivot_root', 'reason': set([('path', 'dentry')])},
           {'call': 'memfd_create', 'reason': set([('path', 'dentry')])},
           {'call': 'ioprio_set', 'reason': set([('task_struct', 'mm')])},
           {'call': 'remap_file_pages', 'reason': set([('path', 'dentry')])},
           {'call': 'dup3', 'reason': set([('path', 'dentry')])},
           {'call': 'getppid', 'reason': set([('task_struct', 'mm')])},
           {'call': 'mq_timedreceive',
            'reason': set([('task_struct', 'mm')])},
           {'call': 'capget', 'reason': set([('task_struct', 'mm')])},
           {'call': 'sched_setaffinity',
            'reason': set([('task_struct', 'mm')])},
           {'call': 'unshare', 'reason': set([('path', 'dentry')])},
           {'call': 'signal', 'reason': set([('task_struct', 'mm')])},
           {'call': 'semtimedop', 'reason': set([('task_struct', 'mm')])},
           {'call': 'umount', 'reason': set([('task_struct', 'mm')])},
           {'call': 'sched_rr_get_interval',
            'reason': set([('task_struct', 'mm')])},
           {'call': 'epoll_create1', 'reason': set([('path', 'dentry')])},
           {'call': 'epoll_ctl', 'reason': set([('path', 'dentry')])},
           {'call': 'flock', 'reason': set([('path', 'dentry')])},
           {'call': 'openat', 'reason': set([('path', 'dentry')])},
           {'call': 'lookup_dcookie', 'reason': set([('path', 'dentry')])},
           {'call': 'uselib', 'reason': set([('path', 'dentry')])},
           {'call': 'rt_sigprocmask', 'reason': set([('task_struct', 'mm')])},
           {'call': 'accept4', 'reason': set([('path', 'dentry')])},
           {'call': 'setsid', 'reason': set([('task_struct', 'mm')])},
           {'call': 'sigaltstack', 'reason': set([('task_struct', 'mm')])},
           {'call': 'sched_setattr', 'reason': set([('task_struct', 'mm')])},
           {'call': 'socketpair', 'reason': set([('path', 'dentry')])},
           {'call': 'migrate_pages', 'reason': set([('task_struct', 'mm')])},
           {'call': 'getitimer', 'reason': set([('task_struct', 'mm')])},
           {'call': 'setpgid', 'reason': set([('task_struct', 'mm')])},
           {'call': 'getcwd', 'reason': set([('path', 'dentry')])},
           {'call': 'getsid', 'reason': set([('task_struct', 'mm')])},
           {'call': 'socket', 'reason': set([('path', 'dentry')])},
           {'call': 'pipe2', 'reason': set([('path', 'dentry')])},
           {'call': 'prlimit64', 'reason': set([('task_struct', 'mm')])},
           {'call': 'perf_event_open',
            'reason': set([('path', 'dentry'), ('task_struct', 'mm')])},
           {'call': 'shmdt', 'reason': set([('path', 'dentry')])},
           {'call': 'quotactl', 'reason': set([('path', 'dentry')])},
           {'call': 'rt_sigaction', 'reason': set([('task_struct', 'mm')])},
           {'call': 'getpgid', 'reason': set([('task_struct', 'mm')])},
           {'call': 'acct', 'reason': set([('path', 'dentry')])},
           {'call': 'open', 'reason': set([('path', 'dentry')])},
           {'call': 'getpriority', 'reason': set([('task_struct', 'mm')])},
           {'call': 'sigaction', 'reason': set([('task_struct', 'mm')])},
           {'call': 'dup', 'reason': set([('path', 'dentry')])},
           {'call': 'setns',
            'reason': set([('path', 'dentry'), ('task_struct', 'mm')])},
           {'call': 'fork', 'reason': set([('task_struct', 'mm')])},
           {'call': 'get_robust_list',
            'reason': set([('task_struct', 'mm')])},
           {'call': 'mq_timedsend', 'reason': set([('task_struct', 'mm')])},
           {'call': 'sched_getscheduler',
            'reason': set([('task_struct', 'mm')])},
           {'call': 'ptrace', 'reason': set([('task_struct', 'mm')])},
           {'call': 'shmctl',
            'reason': set([('path', 'dentry'),
                           ('shmid_kernel', 'shm_file')])},
           {'call': 'swapon', 'reason': set([('path', 'dentry')])},
           {'call': 'sched_getattr', 'reason': set([('task_struct', 'mm')])},
           {'call': 'getrusage', 'reason': set([('task_struct', 'mm')])},
           {'call': 'sched_setscheduler',
            'reason': set([('task_struct', 'mm')])},
           {'call': 'setitimer', 'reason': set([('task_struct', 'mm')])},
           {'call': 'ioprio_get', 'reason': set([('task_struct', 'mm')])},
           {'call': 'vfork', 'reason': set([('task_struct', 'mm')])},
           {'call': 'mmap_pgoff', 'reason': set([('path', 'dentry')])},
           {'call': 'prctl', 'reason': set([('task_struct', 'mm')])},
           {'call': 'move_pages', 'reason': set([('task_struct', 'mm')])},
           {'call': 'setpriority', 'reason': set([('task_struct', 'mm')])},
           {'call': 'clone', 'reason': set([('task_struct', 'mm')])},
           {'call': 'mq_open', 'reason': set([('path', 'dentry')])},
           {'call': 'sched_getparam', 'reason': set([('task_struct', 'mm')])},
           {'call': 'open_by_handle_at', 'reason': set([('path', 'dentry')])}],
 'shmctl': [{'call': 'keyctl',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'rt_sigtimedwait',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'msgrcv',
             'reason': set([('ipc_namespace', 'user_ns'),
                            ('kern_ipc_perm', 'deleted'),
                            ('kern_ipc_perm', 'mode'),
                            ('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'eventfd2', 'reason': set([('file', 'f_op')])},
            {'call': 'mq_unlink',
             'reason': set([('ipc_namespace', 'user_ns')])},
            {'call': 'kill',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'swapoff', 'reason': set([('file', 'f_op')])},
            {'call': 'msgget', 'reason': set([('ipc_namespace', 'user_ns')])},
            {'call': 'sched_getaffinity',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'sched_setparam',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'memfd_create', 'reason': set([('file', 'f_op')])},
            {'call': 'ioprio_set',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'remap_file_pages', 'reason': set([('file', 'f_op')])},
            {'call': 'dup3', 'reason': set([('file', 'f_op')])},
            {'call': 'getppid',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'ioperm', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'mq_timedreceive',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'capget',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'sched_setaffinity',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'signal',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'semtimedop',
             'reason': set([('ipc_namespace', 'user_ns'),
                            ('kern_ipc_perm', 'deleted'),
                            ('kern_ipc_perm', 'mode'),
                            ('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'umount',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'sched_rr_get_interval',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'epoll_create1', 'reason': set([('file', 'f_op')])},
            {'call': 'semctl',
             'reason': set([('ipc_namespace', 'user_ns'),
                            ('kern_ipc_perm', 'deleted'),
                            ('kern_ipc_perm', 'mode')])},
            {'call': 'epoll_ctl', 'reason': set([('file', 'f_op')])},
            {'call': 'flock', 'reason': set([('file', 'f_op')])},
            {'call': 'openat', 'reason': set([('file', 'f_op')])},
            {'call': 'shmget', 'reason': set([('ipc_namespace', 'user_ns')])},
            {'call': 'uselib', 'reason': set([('file', 'f_op')])},
            {'call': 'rt_sigprocmask',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'accept4', 'reason': set([('file', 'f_op')])},
            {'call': 'msgctl',
             'reason': set([('ipc_namespace', 'user_ns'),
                            ('kern_ipc_perm', 'deleted'),
                            ('kern_ipc_perm', 'mode')])},
            {'call': 'setsid',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'sigaltstack',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'sched_setattr',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'socketpair', 'reason': set([('file', 'f_op')])},
            {'call': 'migrate_pages',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'getitimer',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'setpgid',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'semget', 'reason': set([('ipc_namespace', 'user_ns')])},
            {'call': 'getsid',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'shmat',
             'reason': set([('file', 'f_op'),
                            ('ipc_namespace', 'user_ns'),
                            ('kern_ipc_perm', 'deleted'),
                            ('kern_ipc_perm', 'mode')])},
            {'call': 'socket', 'reason': set([('file', 'f_op')])},
            {'call': 'pipe2', 'reason': set([('file', 'f_op')])},
            {'call': 'prlimit64',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'perf_event_open',
             'reason': set([('file', 'f_op'),
                            ('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'shmdt', 'reason': set([('file', 'f_op')])},
            {'call': 'rt_sigaction',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'getpgid',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'acct', 'reason': set([('file', 'f_op')])},
            {'call': 'open', 'reason': set([('file', 'f_op')])},
            {'call': 'getpriority',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'sigaction',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'dup', 'reason': set([('file', 'f_op')])},
            {'call': 'setns',
             'reason': set([('file', 'f_op'),
                            ('ipc_namespace', 'user_ns'),
                            ('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'fork',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'get_robust_list',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'mq_timedsend',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'sched_getscheduler',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'ptrace',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'swapon', 'reason': set([('file', 'f_op')])},
            {'call': 'sched_getattr',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'getrusage',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'sched_setscheduler',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'setitimer',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'ioprio_get',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'vfork',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'mmap_pgoff', 'reason': set([('file', 'f_op')])},
            {'call': 'prctl',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'move_pages',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'msgsnd',
             'reason': set([('ipc_namespace', 'user_ns'),
                            ('kern_ipc_perm', 'deleted'),
                            ('kern_ipc_perm', 'mode')])},
            {'call': 'setpriority',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'clone',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'mq_open',
             'reason': set([('file', 'f_op'), ('ipc_namespace', 'user_ns')])},
            {'call': 'sched_getparam',
             'reason': set([('mm_segment_t', 'seg'),
                            ('task_struct', 'cred')])},
            {'call': 'open_by_handle_at', 'reason': set([('file', 'f_op')])}],
 'shmdt': [{'call': 'remap_file_pages',
            'reason': set([('vm_area_struct', 'vm_file'),
                           ('vm_area_struct', 'vm_ops'),
                           ('vm_area_struct', 'vm_pgoff')])},
           {'call': 'brk',
            'reason': set([('vm_area_struct', 'vm_file'),
                           ('vm_area_struct', 'vm_ops'),
                           ('vm_area_struct', 'vm_pgoff')])},
           {'call': 'get_mempolicy',
            'reason': set([('vm_area_struct', 'vm_file'),
                           ('vm_area_struct', 'vm_ops'),
                           ('vm_area_struct', 'vm_pgoff')])},
           {'call': 'munlockall',
            'reason': set([('vm_area_struct', 'vm_file'),
                           ('vm_area_struct', 'vm_ops'),
                           ('vm_area_struct', 'vm_pgoff')])},
           {'call': 'pkey_mprotect',
            'reason': set([('vm_area_struct', 'vm_file'),
                           ('vm_area_struct', 'vm_ops'),
                           ('vm_area_struct', 'vm_pgoff')])},
           {'call': 'madvise',
            'reason': set([('vm_area_struct', 'vm_file'),
                           ('vm_area_struct', 'vm_ops'),
                           ('vm_area_struct', 'vm_pgoff')])},
           {'call': 'mprotect',
            'reason': set([('vm_area_struct', 'vm_file'),
                           ('vm_area_struct', 'vm_ops'),
                           ('vm_area_struct', 'vm_pgoff')])},
           {'call': 'mremap',
            'reason': set([('vm_area_struct', 'vm_file'),
                           ('vm_area_struct', 'vm_ops'),
                           ('vm_area_struct', 'vm_pgoff')])},
           {'call': 'prctl',
            'reason': set([('vm_area_struct', 'vm_file'),
                           ('vm_area_struct', 'vm_ops'),
                           ('vm_area_struct', 'vm_pgoff')])},
           {'call': 'munlock',
            'reason': set([('vm_area_struct', 'vm_file'),
                           ('vm_area_struct', 'vm_ops'),
                           ('vm_area_struct', 'vm_pgoff')])},
           {'call': 'mincore',
            'reason': set([('vm_area_struct', 'vm_file'),
                           ('vm_area_struct', 'vm_ops'),
                           ('vm_area_struct', 'vm_pgoff')])},
           {'call': 'mlockall',
            'reason': set([('vm_area_struct', 'vm_file'),
                           ('vm_area_struct', 'vm_ops'),
                           ('vm_area_struct', 'vm_pgoff')])}],
 'sigaction': [{'call': 'keyctl', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'rt_sigtimedwait',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'msgrcv', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'kill', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'sched_getaffinity',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'sched_setparam',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'ioprio_set',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'getppid', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'ioperm', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'mq_timedreceive',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'capget', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'sched_setaffinity',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'signal', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'semtimedop',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'umount', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'sched_rr_get_interval',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'rt_sigprocmask',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'setsid', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'sigaltstack',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'sched_setattr',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'migrate_pages',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'getitimer',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'setpgid', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'getsid', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'prlimit64',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'perf_event_open',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'rt_sigaction',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'getpgid', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'getpriority',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'setns', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'fork', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'get_robust_list',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'mq_timedsend',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'sched_getscheduler',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'ptrace', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'sched_getattr',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'getrusage',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'sched_setscheduler',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'setitimer',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'ioprio_get',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'vfork', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'prctl', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'move_pages',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'setpriority',
                'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'clone', 'reason': set([('mm_segment_t', 'seg')])},
               {'call': 'sched_getparam',
                'reason': set([('mm_segment_t', 'seg')])}],
 'signalfd4': [{'call': 'syncfs', 'reason': set([('fd', 'flags')])},
               {'call': 'vmsplice', 'reason': set([('fd', 'flags')])},
               {'call': 'eventfd2', 'reason': set([('file', 'f_op')])},
               {'call': 'pwritev64', 'reason': set([('fd', 'flags')])},
               {'call': 'swapoff', 'reason': set([('file', 'f_op')])},
               {'call': 'fremovexattr', 'reason': set([('fd', 'flags')])},
               {'call': 'readahead', 'reason': set([('fd', 'flags')])},
               {'call': 'getdents', 'reason': set([('fd', 'flags')])},
               {'call': 'writev', 'reason': set([('fd', 'flags')])},
               {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
               {'call': 'fchmod', 'reason': set([('fd', 'flags')])},
               {'call': 'pread64', 'reason': set([('fd', 'flags')])},
               {'call': 'memfd_create', 'reason': set([('file', 'f_op')])},
               {'call': 'remap_file_pages',
                'reason': set([('file', 'f_op')])},
               {'call': 'dup3', 'reason': set([('file', 'f_op')])},
               {'call': 'read', 'reason': set([('fd', 'flags')])},
               {'call': 'fchown', 'reason': set([('fd', 'flags')])},
               {'call': 'mq_timedreceive', 'reason': set([('fd', 'flags')])},
               {'call': 'utime', 'reason': set([('fd', 'flags')])},
               {'call': 'fsync', 'reason': set([('fd', 'flags')])},
               {'call': 'bpf', 'reason': set([('fd', 'flags')])},
               {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
               {'call': 'fsetxattr', 'reason': set([('fd', 'flags')])},
               {'call': 'sendto', 'reason': set([('fd', 'flags')])},
               {'call': 'epoll_create1', 'reason': set([('file', 'f_op')])},
               {'call': 'tee', 'reason': set([('fd', 'flags')])},
               {'call': 'sync_file_range', 'reason': set([('fd', 'flags')])},
               {'call': 'lseek', 'reason': set([('fd', 'flags')])},
               {'call': 'connect', 'reason': set([('fd', 'flags')])},
               {'call': 'getsockname', 'reason': set([('fd', 'flags')])},
               {'call': 'epoll_ctl',
                'reason': set([('fd', 'flags'), ('file', 'f_op')])},
               {'call': 'flock',
                'reason': set([('fd', 'flags'), ('file', 'f_op')])},
               {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
               {'call': 'fchdir', 'reason': set([('fd', 'flags')])},
               {'call': 'openat', 'reason': set([('file', 'f_op')])},
               {'call': 'uselib', 'reason': set([('file', 'f_op')])},
               {'call': 'accept4',
                'reason': set([('fd', 'flags'), ('file', 'f_op')])},
               {'call': 'old_readdir', 'reason': set([('fd', 'flags')])},
               {'call': 'inotify_rm_watch', 'reason': set([('fd', 'flags')])},
               {'call': 'socketpair', 'reason': set([('file', 'f_op')])},
               {'call': 'utimensat', 'reason': set([('fd', 'flags')])},
               {'call': 'inotify_add_watch',
                'reason': set([('fd', 'flags')])},
               {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
               {'call': 'splice', 'reason': set([('fd', 'flags')])},
               {'call': 'ftruncate', 'reason': set([('fd', 'flags')])},
               {'call': 'preadv', 'reason': set([('fd', 'flags')])},
               {'call': 'getpeername', 'reason': set([('fd', 'flags')])},
               {'call': 'shmat', 'reason': set([('file', 'f_op')])},
               {'call': 'setsockopt', 'reason': set([('fd', 'flags')])},
               {'call': 'socket', 'reason': set([('file', 'f_op')])},
               {'call': 'pipe2', 'reason': set([('file', 'f_op')])},
               {'call': 'fcntl', 'reason': set([('fd', 'flags')])},
               {'call': 'ioctl', 'reason': set([('fd', 'flags')])},
               {'call': 'pwrite64', 'reason': set([('fd', 'flags')])},
               {'call': 'perf_event_open',
                'reason': set([('fd', 'flags'), ('file', 'f_op')])},
               {'call': 'shmdt', 'reason': set([('file', 'f_op')])},
               {'call': 'pwritev64v2', 'reason': set([('fd', 'flags')])},
               {'call': 'futimesat', 'reason': set([('fd', 'flags')])},
               {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
               {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
               {'call': 'acct', 'reason': set([('file', 'f_op')])},
               {'call': 'open', 'reason': set([('file', 'f_op')])},
               {'call': 'getsockopt', 'reason': set([('fd', 'flags')])},
               {'call': 'mq_getsetattr', 'reason': set([('fd', 'flags')])},
               {'call': 'dup', 'reason': set([('file', 'f_op')])},
               {'call': 'fdatasync', 'reason': set([('fd', 'flags')])},
               {'call': 'setns', 'reason': set([('file', 'f_op')])},
               {'call': 'getdents64', 'reason': set([('fd', 'flags')])},
               {'call': 'listen', 'reason': set([('fd', 'flags')])},
               {'call': 'copy_file_range', 'reason': set([('fd', 'flags')])},
               {'call': 'mq_timedsend', 'reason': set([('fd', 'flags')])},
               {'call': 'fgetxattr', 'reason': set([('fd', 'flags')])},
               {'call': 'shmctl', 'reason': set([('file', 'f_op')])},
               {'call': 'fcntl64', 'reason': set([('fd', 'flags')])},
               {'call': 'swapon', 'reason': set([('file', 'f_op')])},
               {'call': 'fallocate', 'reason': set([('fd', 'flags')])},
               {'call': 'epoll_wait', 'reason': set([('fd', 'flags')])},
               {'call': 'llseek', 'reason': set([('fd', 'flags')])},
               {'call': 'mmap_pgoff', 'reason': set([('file', 'f_op')])},
               {'call': 'preadv64v2', 'reason': set([('fd', 'flags')])},
               {'call': 'readv', 'reason': set([('fd', 'flags')])},
               {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
               {'call': 'fstatfs64', 'reason': set([('fd', 'flags')])},
               {'call': 'write', 'reason': set([('fd', 'flags')])},
               {'call': 'mq_notify', 'reason': set([('fd', 'flags')])},
               {'call': 'sendfile', 'reason': set([('fd', 'flags')])},
               {'call': 'mq_open', 'reason': set([('file', 'f_op')])},
               {'call': 'open_by_handle_at',
                'reason': set([('file', 'f_op')])},
               {'call': 'bind', 'reason': set([('fd', 'flags')])},
               {'call': 'flistxattr', 'reason': set([('fd', 'flags')])},
               {'call': 'sendfile64', 'reason': set([('fd', 'flags')])}],
 'splice': [{'call': 'syncfs', 'reason': set([('fd', 'flags')])},
            {'call': 'vmsplice', 'reason': set([('fd', 'flags')])},
            {'call': 'eventfd2',
             'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
            {'call': 'pwritev64', 'reason': set([('fd', 'flags')])},
            {'call': 'swapoff',
             'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
            {'call': 'fremovexattr', 'reason': set([('fd', 'flags')])},
            {'call': 'readahead', 'reason': set([('fd', 'flags')])},
            {'call': 'getdents', 'reason': set([('fd', 'flags')])},
            {'call': 'writev', 'reason': set([('fd', 'flags')])},
            {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
            {'call': 'fchmod', 'reason': set([('fd', 'flags')])},
            {'call': 'pread64', 'reason': set([('fd', 'flags')])},
            {'call': 'signalfd4', 'reason': set([('fd', 'flags')])},
            {'call': 'memfd_create',
             'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
            {'call': 'remap_file_pages',
             'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
            {'call': 'dup3',
             'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
            {'call': 'read', 'reason': set([('fd', 'flags')])},
            {'call': 'fchown', 'reason': set([('fd', 'flags')])},
            {'call': 'mq_timedreceive', 'reason': set([('fd', 'flags')])},
            {'call': 'utime', 'reason': set([('fd', 'flags')])},
            {'call': 'fsync', 'reason': set([('fd', 'flags')])},
            {'call': 'bpf', 'reason': set([('fd', 'flags')])},
            {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
            {'call': 'fsetxattr', 'reason': set([('fd', 'flags')])},
            {'call': 'sendto', 'reason': set([('fd', 'flags')])},
            {'call': 'epoll_create1',
             'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
            {'call': 'tee', 'reason': set([('fd', 'flags')])},
            {'call': 'sync_file_range', 'reason': set([('fd', 'flags')])},
            {'call': 'lseek', 'reason': set([('fd', 'flags')])},
            {'call': 'connect', 'reason': set([('fd', 'flags')])},
            {'call': 'getsockname', 'reason': set([('fd', 'flags')])},
            {'call': 'epoll_ctl',
             'reason': set([('fd', 'flags'),
                            ('file', 'f_flags'),
                            ('file', 'f_mode')])},
            {'call': 'flock',
             'reason': set([('fd', 'flags'),
                            ('file', 'f_flags'),
                            ('file', 'f_mode')])},
            {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
            {'call': 'fchdir', 'reason': set([('fd', 'flags')])},
            {'call': 'openat',
             'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
            {'call': 'uselib',
             'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
            {'call': 'accept4',
             'reason': set([('fd', 'flags'),
                            ('file', 'f_flags'),
                            ('file', 'f_mode')])},
            {'call': 'old_readdir', 'reason': set([('fd', 'flags')])},
            {'call': 'inotify_rm_watch', 'reason': set([('fd', 'flags')])},
            {'call': 'socketpair',
             'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
            {'call': 'utimensat', 'reason': set([('fd', 'flags')])},
            {'call': 'inotify_add_watch', 'reason': set([('fd', 'flags')])},
            {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
            {'call': 'ftruncate', 'reason': set([('fd', 'flags')])},
            {'call': 'preadv', 'reason': set([('fd', 'flags')])},
            {'call': 'getpeername', 'reason': set([('fd', 'flags')])},
            {'call': 'shmat',
             'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
            {'call': 'setsockopt', 'reason': set([('fd', 'flags')])},
            {'call': 'socket',
             'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
            {'call': 'pipe2',
             'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
            {'call': 'fcntl', 'reason': set([('fd', 'flags')])},
            {'call': 'ioctl', 'reason': set([('fd', 'flags')])},
            {'call': 'pwrite64', 'reason': set([('fd', 'flags')])},
            {'call': 'perf_event_open',
             'reason': set([('fd', 'flags'),
                            ('file', 'f_flags'),
                            ('file', 'f_mode')])},
            {'call': 'shmdt',
             'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
            {'call': 'pwritev64v2', 'reason': set([('fd', 'flags')])},
            {'call': 'futimesat', 'reason': set([('fd', 'flags')])},
            {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
            {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
            {'call': 'acct',
             'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
            {'call': 'open',
             'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
            {'call': 'getsockopt', 'reason': set([('fd', 'flags')])},
            {'call': 'mq_getsetattr',
             'reason': set([('fd', 'flags'), ('file', 'f_flags')])},
            {'call': 'dup',
             'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
            {'call': 'fdatasync', 'reason': set([('fd', 'flags')])},
            {'call': 'setns',
             'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
            {'call': 'getdents64', 'reason': set([('fd', 'flags')])},
            {'call': 'listen', 'reason': set([('fd', 'flags')])},
            {'call': 'copy_file_range', 'reason': set([('fd', 'flags')])},
            {'call': 'mq_timedsend', 'reason': set([('fd', 'flags')])},
            {'call': 'fgetxattr', 'reason': set([('fd', 'flags')])},
            {'call': 'shmctl',
             'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
            {'call': 'fcntl64', 'reason': set([('fd', 'flags')])},
            {'call': 'swapon',
             'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
            {'call': 'fallocate', 'reason': set([('fd', 'flags')])},
            {'call': 'epoll_wait', 'reason': set([('fd', 'flags')])},
            {'call': 'llseek', 'reason': set([('fd', 'flags')])},
            {'call': 'mmap_pgoff',
             'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
            {'call': 'preadv64v2', 'reason': set([('fd', 'flags')])},
            {'call': 'readv', 'reason': set([('fd', 'flags')])},
            {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
            {'call': 'fstatfs64', 'reason': set([('fd', 'flags')])},
            {'call': 'write', 'reason': set([('fd', 'flags')])},
            {'call': 'mq_notify', 'reason': set([('fd', 'flags')])},
            {'call': 'sendfile', 'reason': set([('fd', 'flags')])},
            {'call': 'mq_open',
             'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
            {'call': 'open_by_handle_at',
             'reason': set([('file', 'f_flags'), ('file', 'f_mode')])},
            {'call': 'bind', 'reason': set([('fd', 'flags')])},
            {'call': 'flistxattr', 'reason': set([('fd', 'flags')])},
            {'call': 'sendfile64', 'reason': set([('fd', 'flags')])}],
 'stat': [{'call': 'lstat',
           'reason': set([('__old_kernel_stat', 'st_ino'),
                          ('__old_kernel_stat', 'st_nlink')])},
          {'call': 'fstat',
           'reason': set([('__old_kernel_stat', 'st_ino'),
                          ('__old_kernel_stat', 'st_nlink'),
                          ('kstat', 'dev'),
                          ('kstat', 'ino'),
                          ('kstat', 'nlink'),
                          ('kstat', 'rdev')])},
          {'call': 'newfstat',
           'reason': set([('kstat', 'dev'),
                          ('kstat', 'ino'),
                          ('kstat', 'nlink'),
                          ('kstat', 'rdev')])}],
 'statfs': [{'call': 'ustat',
             'reason': set([('kstatfs', 'f_ffree'), ('kstatfs', 'f_files')])},
            {'call': 'fstatfs',
             'reason': set([('kstatfs', 'f_ffree'), ('kstatfs', 'f_files')])},
            {'call': 'fstatfs64',
             'reason': set([('kstatfs', 'f_ffree'), ('kstatfs', 'f_files')])},
            {'call': 'statfs64',
             'reason': set([('kstatfs', 'f_ffree'), ('kstatfs', 'f_files')])}],
 'statfs64': [{'call': 'ustat',
               'reason': set([('kstatfs', 'f_ffree'),
                              ('kstatfs', 'f_files')])},
              {'call': 'fstatfs',
               'reason': set([('kstatfs', 'f_ffree'),
                              ('kstatfs', 'f_files')])},
              {'call': 'statfs',
               'reason': set([('kstatfs', 'f_ffree'),
                              ('kstatfs', 'f_files')])},
              {'call': 'fstatfs64',
               'reason': set([('kstatfs', 'f_ffree'),
                              ('kstatfs', 'f_files')])}],
 'swapoff': [{'call': 'keyctl', 'reason': set([('task_struct', 'mm')])},
             {'call': 'rt_sigtimedwait',
              'reason': set([('task_struct', 'mm')])},
             {'call': 'msgrcv', 'reason': set([('task_struct', 'mm')])},
             {'call': 'eventfd2', 'reason': set([('file', 'f_mapping')])},
             {'call': 'kill', 'reason': set([('task_struct', 'mm')])},
             {'call': 'sched_getaffinity',
              'reason': set([('task_struct', 'mm')])},
             {'call': 'sched_setparam',
              'reason': set([('task_struct', 'mm')])},
             {'call': 'memfd_create', 'reason': set([('file', 'f_mapping')])},
             {'call': 'ioprio_set', 'reason': set([('task_struct', 'mm')])},
             {'call': 'remap_file_pages',
              'reason': set([('file', 'f_mapping')])},
             {'call': 'dup3', 'reason': set([('file', 'f_mapping')])},
             {'call': 'getppid', 'reason': set([('task_struct', 'mm')])},
             {'call': 'mq_timedreceive',
              'reason': set([('task_struct', 'mm')])},
             {'call': 'capget', 'reason': set([('task_struct', 'mm')])},
             {'call': 'sched_setaffinity',
              'reason': set([('task_struct', 'mm')])},
             {'call': 'signal', 'reason': set([('task_struct', 'mm')])},
             {'call': 'semtimedop', 'reason': set([('task_struct', 'mm')])},
             {'call': 'umount', 'reason': set([('task_struct', 'mm')])},
             {'call': 'sched_rr_get_interval',
              'reason': set([('task_struct', 'mm')])},
             {'call': 'epoll_create1',
              'reason': set([('file', 'f_mapping')])},
             {'call': 'epoll_ctl', 'reason': set([('file', 'f_mapping')])},
             {'call': 'flock', 'reason': set([('file', 'f_mapping')])},
             {'call': 'openat', 'reason': set([('file', 'f_mapping')])},
             {'call': 'uselib', 'reason': set([('file', 'f_mapping')])},
             {'call': 'rt_sigprocmask',
              'reason': set([('task_struct', 'mm')])},
             {'call': 'accept4', 'reason': set([('file', 'f_mapping')])},
             {'call': 'setsid', 'reason': set([('task_struct', 'mm')])},
             {'call': 'sigaltstack', 'reason': set([('task_struct', 'mm')])},
             {'call': 'sched_setattr',
              'reason': set([('task_struct', 'mm')])},
             {'call': 'socketpair', 'reason': set([('file', 'f_mapping')])},
             {'call': 'migrate_pages',
              'reason': set([('task_struct', 'mm')])},
             {'call': 'getitimer', 'reason': set([('task_struct', 'mm')])},
             {'call': 'setpgid', 'reason': set([('task_struct', 'mm')])},
             {'call': 'getsid', 'reason': set([('task_struct', 'mm')])},
             {'call': 'shmat', 'reason': set([('file', 'f_mapping')])},
             {'call': 'socket', 'reason': set([('file', 'f_mapping')])},
             {'call': 'pipe2', 'reason': set([('file', 'f_mapping')])},
             {'call': 'prlimit64', 'reason': set([('task_struct', 'mm')])},
             {'call': 'perf_event_open',
              'reason': set([('file', 'f_mapping'), ('task_struct', 'mm')])},
             {'call': 'shmdt', 'reason': set([('file', 'f_mapping')])},
             {'call': 'rt_sigaction', 'reason': set([('task_struct', 'mm')])},
             {'call': 'getpgid', 'reason': set([('task_struct', 'mm')])},
             {'call': 'acct', 'reason': set([('file', 'f_mapping')])},
             {'call': 'open', 'reason': set([('file', 'f_mapping')])},
             {'call': 'getpriority', 'reason': set([('task_struct', 'mm')])},
             {'call': 'sigaction', 'reason': set([('task_struct', 'mm')])},
             {'call': 'dup', 'reason': set([('file', 'f_mapping')])},
             {'call': 'setns',
              'reason': set([('file', 'f_mapping'), ('task_struct', 'mm')])},
             {'call': 'fork', 'reason': set([('task_struct', 'mm')])},
             {'call': 'get_robust_list',
              'reason': set([('task_struct', 'mm')])},
             {'call': 'mq_timedsend', 'reason': set([('task_struct', 'mm')])},
             {'call': 'sched_getscheduler',
              'reason': set([('task_struct', 'mm')])},
             {'call': 'ptrace', 'reason': set([('task_struct', 'mm')])},
             {'call': 'shmctl', 'reason': set([('file', 'f_mapping')])},
             {'call': 'swapon',
              'reason': set([('file', 'f_mapping'),
                             ('page', 'private'),
                             ('swap_info_struct', 'cluster_info'),
                             ('swap_info_struct', 'flags'),
                             ('swap_info_struct', 'inuse_pages'),
                             ('swap_info_struct', 'pages'),
                             ('swap_info_struct', 'prio'),
                             ('swap_info_struct', 'swap_map')])},
             {'call': 'sched_getattr',
              'reason': set([('task_struct', 'mm')])},
             {'call': 'getrusage', 'reason': set([('task_struct', 'mm')])},
             {'call': 'sched_setscheduler',
              'reason': set([('task_struct', 'mm')])},
             {'call': 'setitimer', 'reason': set([('task_struct', 'mm')])},
             {'call': 'ioprio_get', 'reason': set([('task_struct', 'mm')])},
             {'call': 'vfork', 'reason': set([('task_struct', 'mm')])},
             {'call': 'mmap_pgoff', 'reason': set([('file', 'f_mapping')])},
             {'call': 'prctl', 'reason': set([('task_struct', 'mm')])},
             {'call': 'move_pages', 'reason': set([('task_struct', 'mm')])},
             {'call': 'setpriority', 'reason': set([('task_struct', 'mm')])},
             {'call': 'clone', 'reason': set([('task_struct', 'mm')])},
             {'call': 'mq_open', 'reason': set([('file', 'f_mapping')])},
             {'call': 'sched_getparam',
              'reason': set([('task_struct', 'mm')])},
             {'call': 'open_by_handle_at',
              'reason': set([('file', 'f_mapping')])}],
 'swapon': [{'call': 'mq_unlink', 'reason': set([('inode', 'i_flags')])},
            {'call': 'swapoff',
             'reason': set([('inode', 'i_flags'),
                            ('swap_info_struct', 'bdev'),
                            ('swap_info_struct', 'flags'),
                            ('swap_info_struct', 'percpu_cluster'),
                            ('swap_info_struct', 'type')])},
            {'call': 'fchmod', 'reason': set([('inode', 'i_flags')])},
            {'call': 'memfd_create', 'reason': set([('inode', 'i_flags')])},
            {'call': 'readlinkat', 'reason': set([('inode', 'i_flags')])},
            {'call': 'fchown', 'reason': set([('inode', 'i_flags')])},
            {'call': 'mq_timedreceive',
             'reason': set([('inode', 'i_flags')])},
            {'call': 'uselib', 'reason': set([('inode', 'i_flags')])},
            {'call': 'fchmodat', 'reason': set([('inode', 'i_flags')])},
            {'call': 'inotify_add_watch',
             'reason': set([('inode', 'i_flags')])},
            {'call': 'ftruncate', 'reason': set([('inode', 'i_flags')])},
            {'call': 'ioctl', 'reason': set([('inode', 'i_flags')])},
            {'call': 'linkat', 'reason': set([('inode', 'i_flags')])},
            {'call': 'unlink', 'reason': set([('inode', 'i_flags')])},
            {'call': 'mq_getsetattr', 'reason': set([('inode', 'i_flags')])},
            {'call': 'faccessat', 'reason': set([('inode', 'i_flags')])},
            {'call': 'mq_timedsend', 'reason': set([('inode', 'i_flags')])},
            {'call': 'fchownat', 'reason': set([('inode', 'i_flags')])},
            {'call': 'mq_notify', 'reason': set([('inode', 'i_flags')])},
            {'call': 'sendfile', 'reason': set([('inode', 'i_flags')])},
            {'call': 'unlinkat', 'reason': set([('inode', 'i_flags')])},
            {'call': 'sendfile64', 'reason': set([('inode', 'i_flags')])}],
 'symlinkat': [{'call': 'sysfs',
                'reason': set([('filename', 'name'),
                               ('filename', 'refcnt')])},
               {'call': 'mq_unlink',
                'reason': set([('filename', 'name'),
                               ('filename', 'refcnt')])},
               {'call': 'swapoff',
                'reason': set([('filename', 'name'),
                               ('filename', 'refcnt')])},
               {'call': 'openat',
                'reason': set([('filename', 'name'),
                               ('filename', 'refcnt')])},
               {'call': 'uselib',
                'reason': set([('filename', 'name'),
                               ('filename', 'refcnt')])},
               {'call': 'renameat2',
                'reason': set([('filename', 'name'),
                               ('filename', 'refcnt')])},
               {'call': 'quotactl',
                'reason': set([('filename', 'name'),
                               ('filename', 'refcnt')])},
               {'call': 'acct',
                'reason': set([('filename', 'name'),
                               ('filename', 'refcnt')])},
               {'call': 'open',
                'reason': set([('filename', 'name'),
                               ('filename', 'refcnt')])},
               {'call': 'unlink',
                'reason': set([('filename', 'name'),
                               ('filename', 'refcnt')])},
               {'call': 'rmdir',
                'reason': set([('filename', 'name'),
                               ('filename', 'refcnt')])},
               {'call': 'swapon',
                'reason': set([('filename', 'name'),
                               ('filename', 'refcnt')])},
               {'call': 'mq_open',
                'reason': set([('filename', 'name'),
                               ('filename', 'refcnt')])},
               {'call': 'unlinkat',
                'reason': set([('filename', 'name'),
                               ('filename', 'refcnt')])}],
 'sync_file_range': [{'call': 'syncfs', 'reason': set([('fd', 'flags')])},
                     {'call': 'vmsplice', 'reason': set([('fd', 'flags')])},
                     {'call': 'pwritev64', 'reason': set([('fd', 'flags')])},
                     {'call': 'fremovexattr',
                      'reason': set([('fd', 'flags')])},
                     {'call': 'readahead', 'reason': set([('fd', 'flags')])},
                     {'call': 'getdents', 'reason': set([('fd', 'flags')])},
                     {'call': 'writev', 'reason': set([('fd', 'flags')])},
                     {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
                     {'call': 'fchmod', 'reason': set([('fd', 'flags')])},
                     {'call': 'pread64', 'reason': set([('fd', 'flags')])},
                     {'call': 'signalfd4', 'reason': set([('fd', 'flags')])},
                     {'call': 'read', 'reason': set([('fd', 'flags')])},
                     {'call': 'fchown', 'reason': set([('fd', 'flags')])},
                     {'call': 'mq_timedreceive',
                      'reason': set([('fd', 'flags')])},
                     {'call': 'utime', 'reason': set([('fd', 'flags')])},
                     {'call': 'fsync', 'reason': set([('fd', 'flags')])},
                     {'call': 'bpf', 'reason': set([('fd', 'flags')])},
                     {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
                     {'call': 'fsetxattr', 'reason': set([('fd', 'flags')])},
                     {'call': 'sendto', 'reason': set([('fd', 'flags')])},
                     {'call': 'tee', 'reason': set([('fd', 'flags')])},
                     {'call': 'lseek', 'reason': set([('fd', 'flags')])},
                     {'call': 'connect', 'reason': set([('fd', 'flags')])},
                     {'call': 'getsockname',
                      'reason': set([('fd', 'flags')])},
                     {'call': 'epoll_ctl', 'reason': set([('fd', 'flags')])},
                     {'call': 'flock', 'reason': set([('fd', 'flags')])},
                     {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
                     {'call': 'fchdir', 'reason': set([('fd', 'flags')])},
                     {'call': 'accept4', 'reason': set([('fd', 'flags')])},
                     {'call': 'old_readdir',
                      'reason': set([('fd', 'flags')])},
                     {'call': 'inotify_rm_watch',
                      'reason': set([('fd', 'flags')])},
                     {'call': 'utimensat', 'reason': set([('fd', 'flags')])},
                     {'call': 'inotify_add_watch',
                      'reason': set([('fd', 'flags')])},
                     {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
                     {'call': 'splice', 'reason': set([('fd', 'flags')])},
                     {'call': 'ftruncate', 'reason': set([('fd', 'flags')])},
                     {'call': 'preadv', 'reason': set([('fd', 'flags')])},
                     {'call': 'getpeername',
                      'reason': set([('fd', 'flags')])},
                     {'call': 'setsockopt', 'reason': set([('fd', 'flags')])},
                     {'call': 'fcntl', 'reason': set([('fd', 'flags')])},
                     {'call': 'ioctl', 'reason': set([('fd', 'flags')])},
                     {'call': 'pwrite64', 'reason': set([('fd', 'flags')])},
                     {'call': 'perf_event_open',
                      'reason': set([('fd', 'flags')])},
                     {'call': 'pwritev64v2',
                      'reason': set([('fd', 'flags')])},
                     {'call': 'futimesat', 'reason': set([('fd', 'flags')])},
                     {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
                     {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
                     {'call': 'getsockopt', 'reason': set([('fd', 'flags')])},
                     {'call': 'mq_getsetattr',
                      'reason': set([('fd', 'flags')])},
                     {'call': 'fdatasync', 'reason': set([('fd', 'flags')])},
                     {'call': 'getdents64', 'reason': set([('fd', 'flags')])},
                     {'call': 'listen', 'reason': set([('fd', 'flags')])},
                     {'call': 'copy_file_range',
                      'reason': set([('fd', 'flags')])},
                     {'call': 'mq_timedsend',
                      'reason': set([('fd', 'flags')])},
                     {'call': 'fgetxattr', 'reason': set([('fd', 'flags')])},
                     {'call': 'fcntl64', 'reason': set([('fd', 'flags')])},
                     {'call': 'fallocate', 'reason': set([('fd', 'flags')])},
                     {'call': 'epoll_wait', 'reason': set([('fd', 'flags')])},
                     {'call': 'llseek', 'reason': set([('fd', 'flags')])},
                     {'call': 'preadv64v2', 'reason': set([('fd', 'flags')])},
                     {'call': 'readv', 'reason': set([('fd', 'flags')])},
                     {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
                     {'call': 'fstatfs64', 'reason': set([('fd', 'flags')])},
                     {'call': 'write', 'reason': set([('fd', 'flags')])},
                     {'call': 'mq_notify', 'reason': set([('fd', 'flags')])},
                     {'call': 'sendfile', 'reason': set([('fd', 'flags')])},
                     {'call': 'bind', 'reason': set([('fd', 'flags')])},
                     {'call': 'flistxattr', 'reason': set([('fd', 'flags')])},
                     {'call': 'sendfile64', 'reason': set([('fd', 'flags')])}],
 'syncfs': [{'call': 'vmsplice', 'reason': set([('fd', 'flags')])},
            {'call': 'pwritev64', 'reason': set([('fd', 'flags')])},
            {'call': 'fremovexattr', 'reason': set([('fd', 'flags')])},
            {'call': 'readahead', 'reason': set([('fd', 'flags')])},
            {'call': 'getdents', 'reason': set([('fd', 'flags')])},
            {'call': 'writev', 'reason': set([('fd', 'flags')])},
            {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
            {'call': 'fchmod', 'reason': set([('fd', 'flags')])},
            {'call': 'pread64', 'reason': set([('fd', 'flags')])},
            {'call': 'signalfd4', 'reason': set([('fd', 'flags')])},
            {'call': 'read', 'reason': set([('fd', 'flags')])},
            {'call': 'fchown', 'reason': set([('fd', 'flags')])},
            {'call': 'mq_timedreceive', 'reason': set([('fd', 'flags')])},
            {'call': 'utime', 'reason': set([('fd', 'flags')])},
            {'call': 'fsync', 'reason': set([('fd', 'flags')])},
            {'call': 'bpf', 'reason': set([('fd', 'flags')])},
            {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
            {'call': 'fsetxattr', 'reason': set([('fd', 'flags')])},
            {'call': 'sendto', 'reason': set([('fd', 'flags')])},
            {'call': 'tee', 'reason': set([('fd', 'flags')])},
            {'call': 'sync_file_range', 'reason': set([('fd', 'flags')])},
            {'call': 'lseek', 'reason': set([('fd', 'flags')])},
            {'call': 'connect', 'reason': set([('fd', 'flags')])},
            {'call': 'getsockname', 'reason': set([('fd', 'flags')])},
            {'call': 'epoll_ctl', 'reason': set([('fd', 'flags')])},
            {'call': 'flock', 'reason': set([('fd', 'flags')])},
            {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
            {'call': 'fchdir', 'reason': set([('fd', 'flags')])},
            {'call': 'accept4', 'reason': set([('fd', 'flags')])},
            {'call': 'old_readdir', 'reason': set([('fd', 'flags')])},
            {'call': 'inotify_rm_watch', 'reason': set([('fd', 'flags')])},
            {'call': 'utimensat', 'reason': set([('fd', 'flags')])},
            {'call': 'inotify_add_watch', 'reason': set([('fd', 'flags')])},
            {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
            {'call': 'splice', 'reason': set([('fd', 'flags')])},
            {'call': 'ftruncate', 'reason': set([('fd', 'flags')])},
            {'call': 'preadv', 'reason': set([('fd', 'flags')])},
            {'call': 'getpeername', 'reason': set([('fd', 'flags')])},
            {'call': 'setsockopt', 'reason': set([('fd', 'flags')])},
            {'call': 'fcntl', 'reason': set([('fd', 'flags')])},
            {'call': 'ioctl', 'reason': set([('fd', 'flags')])},
            {'call': 'pwrite64', 'reason': set([('fd', 'flags')])},
            {'call': 'perf_event_open', 'reason': set([('fd', 'flags')])},
            {'call': 'pwritev64v2', 'reason': set([('fd', 'flags')])},
            {'call': 'futimesat', 'reason': set([('fd', 'flags')])},
            {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
            {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
            {'call': 'getsockopt', 'reason': set([('fd', 'flags')])},
            {'call': 'mq_getsetattr', 'reason': set([('fd', 'flags')])},
            {'call': 'fdatasync', 'reason': set([('fd', 'flags')])},
            {'call': 'getdents64', 'reason': set([('fd', 'flags')])},
            {'call': 'listen', 'reason': set([('fd', 'flags')])},
            {'call': 'copy_file_range', 'reason': set([('fd', 'flags')])},
            {'call': 'mq_timedsend', 'reason': set([('fd', 'flags')])},
            {'call': 'fgetxattr', 'reason': set([('fd', 'flags')])},
            {'call': 'fcntl64', 'reason': set([('fd', 'flags')])},
            {'call': 'fallocate', 'reason': set([('fd', 'flags')])},
            {'call': 'epoll_wait', 'reason': set([('fd', 'flags')])},
            {'call': 'llseek', 'reason': set([('fd', 'flags')])},
            {'call': 'preadv64v2', 'reason': set([('fd', 'flags')])},
            {'call': 'readv', 'reason': set([('fd', 'flags')])},
            {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
            {'call': 'fstatfs64', 'reason': set([('fd', 'flags')])},
            {'call': 'write', 'reason': set([('fd', 'flags')])},
            {'call': 'mq_notify', 'reason': set([('fd', 'flags')])},
            {'call': 'sendfile', 'reason': set([('fd', 'flags')])},
            {'call': 'bind', 'reason': set([('fd', 'flags')])},
            {'call': 'flistxattr', 'reason': set([('fd', 'flags')])},
            {'call': 'sendfile64', 'reason': set([('fd', 'flags')])}],
 'sysfs': [{'call': 'mq_unlink', 'reason': set([('filename', 'name')])},
           {'call': 'swapoff', 'reason': set([('filename', 'name')])},
           {'call': 'openat', 'reason': set([('filename', 'name')])},
           {'call': 'uselib', 'reason': set([('filename', 'name')])},
           {'call': 'renameat2', 'reason': set([('filename', 'name')])},
           {'call': 'symlinkat', 'reason': set([('filename', 'name')])},
           {'call': 'quotactl', 'reason': set([('filename', 'name')])},
           {'call': 'acct', 'reason': set([('filename', 'name')])},
           {'call': 'open', 'reason': set([('filename', 'name')])},
           {'call': 'unlink', 'reason': set([('filename', 'name')])},
           {'call': 'rmdir', 'reason': set([('filename', 'name')])},
           {'call': 'swapon', 'reason': set([('filename', 'name')])},
           {'call': 'mq_open', 'reason': set([('filename', 'name')])},
           {'call': 'unlinkat', 'reason': set([('filename', 'name')])}],
 'sysinfo': [{'call': 'keyctl', 'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'rt_sigtimedwait',
              'reason': set([('mm_segment_t', 'seg'),
                             ('timespec', 'tv_nsec')])},
             {'call': 'msgrcv', 'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'mq_unlink', 'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'kill', 'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'swapoff', 'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'sched_getaffinity',
              'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'sched_setparam',
              'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'fchmod', 'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'memfd_create',
              'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'ioprio_set', 'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'readlinkat', 'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'io_getevents',
              'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'getppid', 'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'fchown', 'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'ioperm', 'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'mq_timedreceive',
              'reason': set([('mm_segment_t', 'seg'),
                             ('timespec', 'tv_nsec')])},
             {'call': 'capget', 'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'utime', 'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'sched_setaffinity',
              'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'signal', 'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'semtimedop',
              'reason': set([('mm_segment_t', 'seg'),
                             ('timespec', 'tv_nsec')])},
             {'call': 'umount', 'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'settimeofday',
              'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'sched_rr_get_interval',
              'reason': set([('mm_segment_t', 'seg'),
                             ('timespec', 'tv_nsec')])},
             {'call': 'timerfd_gettime',
              'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'pselect6', 'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'uselib', 'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'rt_sigprocmask',
              'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'setsid', 'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'sigaltstack',
              'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'sched_setattr',
              'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'migrate_pages',
              'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'getitimer', 'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'fchmodat', 'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'setpgid', 'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'inotify_add_watch',
              'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'timer_settime',
              'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'ftruncate', 'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'timer_gettime',
              'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'getsid', 'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'ioctl', 'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'prlimit64', 'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'perf_event_open',
              'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'linkat', 'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'stime', 'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'rt_sigaction',
              'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'futimesat', 'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'getpgid', 'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'poll', 'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'select', 'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'unlink', 'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'getpriority',
              'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'sigaction', 'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'nanosleep', 'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'mq_getsetattr',
              'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'faccessat', 'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'setns', 'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'fork', 'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'get_robust_list',
              'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'mq_timedsend',
              'reason': set([('mm_segment_t', 'seg'),
                             ('timespec', 'tv_nsec')])},
             {'call': 'sched_getscheduler',
              'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'ptrace', 'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'swapon', 'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'epoll_wait', 'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'sched_getattr',
              'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'fchownat', 'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'getrusage', 'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'fstat', 'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'timerfd_settime',
              'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'sched_setscheduler',
              'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'setitimer', 'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'ioprio_get', 'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'vfork', 'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'prctl', 'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'move_pages', 'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'setpriority',
              'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'mq_notify', 'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'sendfile', 'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'newfstat', 'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'clone', 'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'clock_nanosleep',
              'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'unlinkat', 'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'sched_getparam',
              'reason': set([('mm_segment_t', 'seg')])},
             {'call': 'futex', 'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'recvmmsg', 'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'sendfile64', 'reason': set([('timespec', 'tv_nsec')])},
             {'call': 'ppoll', 'reason': set([('timespec', 'tv_nsec')])}],
 'syslog': [{'call': 'keyctl', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'rt_sigtimedwait',
             'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'msgrcv', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'kill', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'sched_getaffinity',
             'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'sched_setparam',
             'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'ioprio_set', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'getppid', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'ioperm', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'mq_timedreceive',
             'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'capget', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'sched_setaffinity',
             'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'signal', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'semtimedop', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'umount', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'sched_rr_get_interval',
             'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'rt_sigprocmask',
             'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'setsid', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'sigaltstack', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'sched_setattr',
             'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'migrate_pages',
             'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'getitimer', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'setpgid', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'getsid', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'prlimit64', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'perf_event_open',
             'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'rt_sigaction',
             'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'getpgid', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'getpriority', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'sigaction', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'setns', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'fork', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'get_robust_list',
             'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'mq_timedsend',
             'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'sched_getscheduler',
             'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'ptrace', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'sched_getattr',
             'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'getrusage', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'sched_setscheduler',
             'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'setitimer', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'ioprio_get', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'vfork', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'prctl', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'move_pages', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'setpriority', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'clone', 'reason': set([('mm_segment_t', 'seg')])},
            {'call': 'sched_getparam',
             'reason': set([('mm_segment_t', 'seg')])}],
 'tee': [{'call': 'syncfs', 'reason': set([('fd', 'flags')])},
         {'call': 'vmsplice', 'reason': set([('fd', 'flags')])},
         {'call': 'eventfd2', 'reason': set([('file', 'f_mode')])},
         {'call': 'pwritev64', 'reason': set([('fd', 'flags')])},
         {'call': 'swapoff', 'reason': set([('file', 'f_mode')])},
         {'call': 'fremovexattr', 'reason': set([('fd', 'flags')])},
         {'call': 'readahead', 'reason': set([('fd', 'flags')])},
         {'call': 'getdents', 'reason': set([('fd', 'flags')])},
         {'call': 'writev', 'reason': set([('fd', 'flags')])},
         {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
         {'call': 'fchmod', 'reason': set([('fd', 'flags')])},
         {'call': 'pread64', 'reason': set([('fd', 'flags')])},
         {'call': 'signalfd4', 'reason': set([('fd', 'flags')])},
         {'call': 'memfd_create', 'reason': set([('file', 'f_mode')])},
         {'call': 'remap_file_pages', 'reason': set([('file', 'f_mode')])},
         {'call': 'dup3', 'reason': set([('file', 'f_mode')])},
         {'call': 'read', 'reason': set([('fd', 'flags')])},
         {'call': 'fchown', 'reason': set([('fd', 'flags')])},
         {'call': 'mq_timedreceive', 'reason': set([('fd', 'flags')])},
         {'call': 'utime', 'reason': set([('fd', 'flags')])},
         {'call': 'fsync', 'reason': set([('fd', 'flags')])},
         {'call': 'bpf', 'reason': set([('fd', 'flags')])},
         {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
         {'call': 'fsetxattr', 'reason': set([('fd', 'flags')])},
         {'call': 'sendto', 'reason': set([('fd', 'flags')])},
         {'call': 'epoll_create1', 'reason': set([('file', 'f_mode')])},
         {'call': 'sync_file_range', 'reason': set([('fd', 'flags')])},
         {'call': 'lseek', 'reason': set([('fd', 'flags')])},
         {'call': 'connect', 'reason': set([('fd', 'flags')])},
         {'call': 'getsockname', 'reason': set([('fd', 'flags')])},
         {'call': 'epoll_ctl',
          'reason': set([('fd', 'flags'), ('file', 'f_mode')])},
         {'call': 'flock',
          'reason': set([('fd', 'flags'), ('file', 'f_mode')])},
         {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
         {'call': 'fchdir', 'reason': set([('fd', 'flags')])},
         {'call': 'openat', 'reason': set([('file', 'f_mode')])},
         {'call': 'uselib', 'reason': set([('file', 'f_mode')])},
         {'call': 'accept4',
          'reason': set([('fd', 'flags'), ('file', 'f_mode')])},
         {'call': 'old_readdir', 'reason': set([('fd', 'flags')])},
         {'call': 'inotify_rm_watch', 'reason': set([('fd', 'flags')])},
         {'call': 'socketpair', 'reason': set([('file', 'f_mode')])},
         {'call': 'utimensat', 'reason': set([('fd', 'flags')])},
         {'call': 'inotify_add_watch', 'reason': set([('fd', 'flags')])},
         {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
         {'call': 'splice', 'reason': set([('fd', 'flags')])},
         {'call': 'ftruncate', 'reason': set([('fd', 'flags')])},
         {'call': 'preadv', 'reason': set([('fd', 'flags')])},
         {'call': 'getpeername', 'reason': set([('fd', 'flags')])},
         {'call': 'shmat', 'reason': set([('file', 'f_mode')])},
         {'call': 'setsockopt', 'reason': set([('fd', 'flags')])},
         {'call': 'socket', 'reason': set([('file', 'f_mode')])},
         {'call': 'pipe2', 'reason': set([('file', 'f_mode')])},
         {'call': 'fcntl', 'reason': set([('fd', 'flags')])},
         {'call': 'ioctl', 'reason': set([('fd', 'flags')])},
         {'call': 'pwrite64', 'reason': set([('fd', 'flags')])},
         {'call': 'perf_event_open',
          'reason': set([('fd', 'flags'), ('file', 'f_mode')])},
         {'call': 'shmdt', 'reason': set([('file', 'f_mode')])},
         {'call': 'pwritev64v2', 'reason': set([('fd', 'flags')])},
         {'call': 'futimesat', 'reason': set([('fd', 'flags')])},
         {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
         {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
         {'call': 'acct', 'reason': set([('file', 'f_mode')])},
         {'call': 'open', 'reason': set([('file', 'f_mode')])},
         {'call': 'getsockopt', 'reason': set([('fd', 'flags')])},
         {'call': 'mq_getsetattr', 'reason': set([('fd', 'flags')])},
         {'call': 'dup', 'reason': set([('file', 'f_mode')])},
         {'call': 'fdatasync', 'reason': set([('fd', 'flags')])},
         {'call': 'setns', 'reason': set([('file', 'f_mode')])},
         {'call': 'getdents64', 'reason': set([('fd', 'flags')])},
         {'call': 'listen', 'reason': set([('fd', 'flags')])},
         {'call': 'copy_file_range', 'reason': set([('fd', 'flags')])},
         {'call': 'mq_timedsend', 'reason': set([('fd', 'flags')])},
         {'call': 'fgetxattr', 'reason': set([('fd', 'flags')])},
         {'call': 'shmctl', 'reason': set([('file', 'f_mode')])},
         {'call': 'fcntl64', 'reason': set([('fd', 'flags')])},
         {'call': 'swapon', 'reason': set([('file', 'f_mode')])},
         {'call': 'fallocate', 'reason': set([('fd', 'flags')])},
         {'call': 'epoll_wait', 'reason': set([('fd', 'flags')])},
         {'call': 'llseek', 'reason': set([('fd', 'flags')])},
         {'call': 'mmap_pgoff', 'reason': set([('file', 'f_mode')])},
         {'call': 'preadv64v2', 'reason': set([('fd', 'flags')])},
         {'call': 'readv', 'reason': set([('fd', 'flags')])},
         {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
         {'call': 'fstatfs64', 'reason': set([('fd', 'flags')])},
         {'call': 'write', 'reason': set([('fd', 'flags')])},
         {'call': 'mq_notify', 'reason': set([('fd', 'flags')])},
         {'call': 'sendfile', 'reason': set([('fd', 'flags')])},
         {'call': 'mq_open', 'reason': set([('file', 'f_mode')])},
         {'call': 'open_by_handle_at', 'reason': set([('file', 'f_mode')])},
         {'call': 'bind', 'reason': set([('fd', 'flags')])},
         {'call': 'flistxattr', 'reason': set([('fd', 'flags')])},
         {'call': 'sendfile64', 'reason': set([('fd', 'flags')])}],
 'tgkill': [{'call': 'keyctl', 'reason': set([('task_struct', 'cred')])},
            {'call': 'rt_sigtimedwait',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'msgrcv', 'reason': set([('task_struct', 'cred')])},
            {'call': 'kill', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_getaffinity',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_setparam',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'ioprio_set', 'reason': set([('task_struct', 'cred')])},
            {'call': 'getppid', 'reason': set([('task_struct', 'cred')])},
            {'call': 'mq_timedreceive',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'capget', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_setaffinity',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'signal', 'reason': set([('task_struct', 'cred')])},
            {'call': 'semtimedop', 'reason': set([('task_struct', 'cred')])},
            {'call': 'umount', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_rr_get_interval',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'rt_sigprocmask',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'setsid', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sigaltstack', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_setattr',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'migrate_pages',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'getitimer', 'reason': set([('task_struct', 'cred')])},
            {'call': 'setpgid', 'reason': set([('task_struct', 'cred')])},
            {'call': 'getsid', 'reason': set([('task_struct', 'cred')])},
            {'call': 'prlimit64', 'reason': set([('task_struct', 'cred')])},
            {'call': 'perf_event_open',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'rt_sigaction',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'getpgid', 'reason': set([('task_struct', 'cred')])},
            {'call': 'getpriority', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sigaction', 'reason': set([('task_struct', 'cred')])},
            {'call': 'setns', 'reason': set([('task_struct', 'cred')])},
            {'call': 'fork', 'reason': set([('task_struct', 'cred')])},
            {'call': 'get_robust_list',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'mq_timedsend',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_getscheduler',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'ptrace', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_getattr',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'getrusage', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_setscheduler',
             'reason': set([('task_struct', 'cred')])},
            {'call': 'setitimer', 'reason': set([('task_struct', 'cred')])},
            {'call': 'ioprio_get', 'reason': set([('task_struct', 'cred')])},
            {'call': 'vfork', 'reason': set([('task_struct', 'cred')])},
            {'call': 'prctl', 'reason': set([('task_struct', 'cred')])},
            {'call': 'move_pages', 'reason': set([('task_struct', 'cred')])},
            {'call': 'setpriority', 'reason': set([('task_struct', 'cred')])},
            {'call': 'clone', 'reason': set([('task_struct', 'cred')])},
            {'call': 'sched_getparam',
             'reason': set([('task_struct', 'cred')])}],
 'timer_create': [{'call': 'clock_getres',
                   'reason': set([('k_clock', 'timer_create')])},
                  {'call': 'timer_delete',
                   'reason': set([('k_clock', 'timer_create'),
                                  ('k_itimer', 'it_pid')])},
                  {'call': 'clock_gettime',
                   'reason': set([('k_clock', 'timer_create')])},
                  {'call': 'timer_settime',
                   'reason': set([('k_clock', 'timer_create'),
                                  ('k_itimer', 'it_pid')])},
                  {'call': 'timer_gettime',
                   'reason': set([('k_clock', 'timer_create'),
                                  ('k_itimer', 'it_pid')])},
                  {'call': 'clock_settime',
                   'reason': set([('k_clock', 'timer_create')])},
                  {'call': 'timer_getoverrun',
                   'reason': set([('k_itimer', 'it_pid')])},
                  {'call': 'clock_nanosleep',
                   'reason': set([('k_clock', 'timer_create')])},
                  {'call': 'clock_adjtime',
                   'reason': set([('k_clock', 'timer_create')])}],
 'timer_delete': [{'call': 'keyctl',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'rt_sigtimedwait',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'msgrcv',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'kill',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'clock_getres',
                   'reason': set([('k_clock', 'timer_del')])},
                  {'call': 'sched_getaffinity',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'sched_setparam',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'ioprio_set',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'getppid',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'mq_timedreceive',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'capget',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'sched_setaffinity',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'signal',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'semtimedop',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'umount',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'timer_create',
                   'reason': set([('k_clock', 'timer_del'),
                                  ('k_itimer', 'it_pid'),
                                  ('k_itimer', 'it_signal'),
                                  ('k_itimer', 'sigq')])},
                  {'call': 'clock_gettime',
                   'reason': set([('k_clock', 'timer_del')])},
                  {'call': 'sched_rr_get_interval',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'rt_sigprocmask',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'setsid',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'sigaltstack',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'sched_setattr',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'migrate_pages',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'getitimer',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'setpgid',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'timer_settime',
                   'reason': set([('k_clock', 'timer_del'),
                                  ('k_itimer', 'it_pid'),
                                  ('k_itimer', 'it_signal'),
                                  ('k_itimer', 'sigq')])},
                  {'call': 'timer_gettime',
                   'reason': set([('k_clock', 'timer_del'),
                                  ('k_itimer', 'it_pid'),
                                  ('k_itimer', 'it_signal'),
                                  ('k_itimer', 'sigq')])},
                  {'call': 'getsid',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'prlimit64',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'perf_event_open',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'rt_sigaction',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'getpgid',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'clock_settime',
                   'reason': set([('k_clock', 'timer_del')])},
                  {'call': 'getpriority',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'sigaction',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'setns',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'fork',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'get_robust_list',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'mq_timedsend',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'sched_getscheduler',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'ptrace',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'sched_getattr',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'getrusage',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'sched_setscheduler',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'setitimer',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'ioprio_get',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'vfork',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'prctl',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'move_pages',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'setpriority',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'timer_getoverrun',
                   'reason': set([('k_itimer', 'it_pid'),
                                  ('k_itimer', 'it_signal'),
                                  ('k_itimer', 'sigq')])},
                  {'call': 'clone',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'clock_nanosleep',
                   'reason': set([('k_clock', 'timer_del')])},
                  {'call': 'sched_getparam',
                   'reason': set([('task_struct', 'signal')])},
                  {'call': 'clock_adjtime',
                   'reason': set([('k_clock', 'timer_del')])}],
 'timer_getoverrun': [{'call': 'keyctl',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'rt_sigtimedwait',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'msgrcv',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'kill',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'timer_delete',
                       'reason': set([('k_itimer', 'it_signal')])},
                      {'call': 'sched_getaffinity',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'sched_setparam',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'ioprio_set',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'getppid',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'mq_timedreceive',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'capget',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'sched_setaffinity',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'signal',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'semtimedop',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'umount',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'timer_create',
                       'reason': set([('k_itimer', 'it_signal')])},
                      {'call': 'sched_rr_get_interval',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'rt_sigprocmask',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'setsid',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'sigaltstack',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'sched_setattr',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'migrate_pages',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'getitimer',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'setpgid',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'timer_settime',
                       'reason': set([('k_itimer', 'it_signal')])},
                      {'call': 'timer_gettime',
                       'reason': set([('k_itimer', 'it_signal')])},
                      {'call': 'getsid',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'prlimit64',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'perf_event_open',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'rt_sigaction',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'getpgid',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'getpriority',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'sigaction',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'setns',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'fork',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'get_robust_list',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'mq_timedsend',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'sched_getscheduler',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'ptrace',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'sched_getattr',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'getrusage',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'sched_setscheduler',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'setitimer',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'ioprio_get',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'vfork',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'prctl',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'move_pages',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'setpriority',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'clone',
                       'reason': set([('task_struct', 'signal')])},
                      {'call': 'sched_getparam',
                       'reason': set([('task_struct', 'signal')])}],
 'timer_gettime': [{'call': 'clock_getres',
                    'reason': set([('k_clock', 'timer_get')])},
                   {'call': 'timer_delete',
                    'reason': set([('k_clock', 'timer_get')])},
                   {'call': 'timer_create',
                    'reason': set([('k_clock', 'timer_get')])},
                   {'call': 'clock_gettime',
                    'reason': set([('k_clock', 'timer_get')])},
                   {'call': 'timer_settime',
                    'reason': set([('k_clock', 'timer_get')])},
                   {'call': 'clock_settime',
                    'reason': set([('k_clock', 'timer_get')])},
                   {'call': 'clock_nanosleep',
                    'reason': set([('k_clock', 'timer_get')])},
                   {'call': 'clock_adjtime',
                    'reason': set([('k_clock', 'timer_get')])}],
 'timer_settime': [{'call': 'clock_getres',
                    'reason': set([('k_clock', 'timer_set')])},
                   {'call': 'timer_delete',
                    'reason': set([('k_clock', 'timer_set')])},
                   {'call': 'timer_create',
                    'reason': set([('k_clock', 'timer_set')])},
                   {'call': 'clock_gettime',
                    'reason': set([('k_clock', 'timer_set')])},
                   {'call': 'timer_gettime',
                    'reason': set([('k_clock', 'timer_set')])},
                   {'call': 'clock_settime',
                    'reason': set([('k_clock', 'timer_set')])},
                   {'call': 'clock_nanosleep',
                    'reason': set([('k_clock', 'timer_set')])},
                   {'call': 'clock_adjtime',
                    'reason': set([('k_clock', 'timer_set')])}],
 'timerfd_create': [{'call': 'timerfd_gettime',
                     'reason': set([('timerfd_ctx', 'clockid')])},
                    {'call': 'timerfd_settime',
                     'reason': set([('timerfd_ctx', 'clockid')])}],
 'timerfd_gettime': [{'call': 'timerfd_settime',
                      'reason': set([('timerfd_ctx', 'expired'),
                                     ('timerfd_ctx', 'tintv')])},
                     {'call': 'timerfd_create',
                      'reason': set([('timerfd_ctx', 'expired'),
                                     ('timerfd_ctx', 'tintv')])}],
 'timerfd_settime': [{'call': 'timerfd_gettime',
                      'reason': set([('timerfd_ctx', 'expired'),
                                     ('timerfd_ctx', 'tintv')])},
                     {'call': 'timerfd_create',
                      'reason': set([('timerfd_ctx', 'expired'),
                                     ('timerfd_ctx', 'tintv')])}],
 'tkill': [{'call': 'keyctl', 'reason': set([('task_struct', 'cred')])},
           {'call': 'rt_sigtimedwait',
            'reason': set([('task_struct', 'cred')])},
           {'call': 'msgrcv', 'reason': set([('task_struct', 'cred')])},
           {'call': 'kill', 'reason': set([('task_struct', 'cred')])},
           {'call': 'sched_getaffinity',
            'reason': set([('task_struct', 'cred')])},
           {'call': 'sched_setparam',
            'reason': set([('task_struct', 'cred')])},
           {'call': 'ioprio_set', 'reason': set([('task_struct', 'cred')])},
           {'call': 'getppid', 'reason': set([('task_struct', 'cred')])},
           {'call': 'mq_timedreceive',
            'reason': set([('task_struct', 'cred')])},
           {'call': 'capget', 'reason': set([('task_struct', 'cred')])},
           {'call': 'sched_setaffinity',
            'reason': set([('task_struct', 'cred')])},
           {'call': 'signal', 'reason': set([('task_struct', 'cred')])},
           {'call': 'semtimedop', 'reason': set([('task_struct', 'cred')])},
           {'call': 'umount', 'reason': set([('task_struct', 'cred')])},
           {'call': 'sched_rr_get_interval',
            'reason': set([('task_struct', 'cred')])},
           {'call': 'rt_sigprocmask',
            'reason': set([('task_struct', 'cred')])},
           {'call': 'setsid', 'reason': set([('task_struct', 'cred')])},
           {'call': 'sigaltstack', 'reason': set([('task_struct', 'cred')])},
           {'call': 'sched_setattr',
            'reason': set([('task_struct', 'cred')])},
           {'call': 'migrate_pages',
            'reason': set([('task_struct', 'cred')])},
           {'call': 'getitimer', 'reason': set([('task_struct', 'cred')])},
           {'call': 'setpgid', 'reason': set([('task_struct', 'cred')])},
           {'call': 'getsid', 'reason': set([('task_struct', 'cred')])},
           {'call': 'prlimit64', 'reason': set([('task_struct', 'cred')])},
           {'call': 'perf_event_open',
            'reason': set([('task_struct', 'cred')])},
           {'call': 'rt_sigaction', 'reason': set([('task_struct', 'cred')])},
           {'call': 'getpgid', 'reason': set([('task_struct', 'cred')])},
           {'call': 'getpriority', 'reason': set([('task_struct', 'cred')])},
           {'call': 'sigaction', 'reason': set([('task_struct', 'cred')])},
           {'call': 'setns', 'reason': set([('task_struct', 'cred')])},
           {'call': 'fork', 'reason': set([('task_struct', 'cred')])},
           {'call': 'get_robust_list',
            'reason': set([('task_struct', 'cred')])},
           {'call': 'mq_timedsend', 'reason': set([('task_struct', 'cred')])},
           {'call': 'sched_getscheduler',
            'reason': set([('task_struct', 'cred')])},
           {'call': 'ptrace', 'reason': set([('task_struct', 'cred')])},
           {'call': 'sched_getattr',
            'reason': set([('task_struct', 'cred')])},
           {'call': 'getrusage', 'reason': set([('task_struct', 'cred')])},
           {'call': 'sched_setscheduler',
            'reason': set([('task_struct', 'cred')])},
           {'call': 'setitimer', 'reason': set([('task_struct', 'cred')])},
           {'call': 'ioprio_get', 'reason': set([('task_struct', 'cred')])},
           {'call': 'vfork', 'reason': set([('task_struct', 'cred')])},
           {'call': 'prctl', 'reason': set([('task_struct', 'cred')])},
           {'call': 'move_pages', 'reason': set([('task_struct', 'cred')])},
           {'call': 'setpriority', 'reason': set([('task_struct', 'cred')])},
           {'call': 'clone', 'reason': set([('task_struct', 'cred')])},
           {'call': 'sched_getparam',
            'reason': set([('task_struct', 'cred')])}],
 'umount': [{'call': 'syncfs', 'reason': set([('super_block', 's_flags')])},
            {'call': 'keyctl', 'reason': set([('task_struct', 'flags')])},
            {'call': 'rt_sigtimedwait',
             'reason': set([('task_struct', 'flags')])},
            {'call': 'msgrcv', 'reason': set([('task_struct', 'flags')])},
            {'call': 'eventfd2',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'mq_unlink',
             'reason': set([('vfsmount', 'mnt_flags'),
                            ('vfsmount', 'mnt_root')])},
            {'call': 'kill', 'reason': set([('task_struct', 'flags')])},
            {'call': 'swapoff',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'sched_getaffinity',
             'reason': set([('task_struct', 'flags')])},
            {'call': 'sched_setparam',
             'reason': set([('task_struct', 'flags')])},
            {'call': 'pivot_root',
             'reason': set([('mount', 'mnt_ns'),
                            ('path', 'dentry'),
                            ('path', 'mnt'),
                            ('vfsmount', 'mnt_flags'),
                            ('vfsmount', 'mnt_root')])},
            {'call': 'memfd_create',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'ioprio_set', 'reason': set([('task_struct', 'flags')])},
            {'call': 'remap_file_pages',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'dup3',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'getppid', 'reason': set([('task_struct', 'flags')])},
            {'call': 'mq_timedreceive',
             'reason': set([('task_struct', 'flags')])},
            {'call': 'capget', 'reason': set([('task_struct', 'flags')])},
            {'call': 'sched_setaffinity',
             'reason': set([('task_struct', 'flags')])},
            {'call': 'ustat', 'reason': set([('super_block', 's_flags')])},
            {'call': 'unshare',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'signal', 'reason': set([('task_struct', 'flags')])},
            {'call': 'setreuid', 'reason': set([('task_struct', 'flags')])},
            {'call': 'semtimedop', 'reason': set([('task_struct', 'flags')])},
            {'call': 'sched_rr_get_interval',
             'reason': set([('task_struct', 'flags')])},
            {'call': 'epoll_create1',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'epoll_ctl',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'flock',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'openat',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'lookup_dcookie',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'uselib',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'rt_sigprocmask',
             'reason': set([('task_struct', 'flags')])},
            {'call': 'accept4',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'setsid', 'reason': set([('task_struct', 'flags')])},
            {'call': 'sigaltstack',
             'reason': set([('task_struct', 'flags')])},
            {'call': 'sched_setattr',
             'reason': set([('task_struct', 'flags')])},
            {'call': 'socketpair',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'migrate_pages',
             'reason': set([('task_struct', 'flags')])},
            {'call': 'getitimer', 'reason': set([('task_struct', 'flags')])},
            {'call': 'setpgid', 'reason': set([('task_struct', 'flags')])},
            {'call': 'getcwd',
             'reason': set([('mount', 'mnt_ns'),
                            ('path', 'dentry'),
                            ('path', 'mnt'),
                            ('vfsmount', 'mnt_flags'),
                            ('vfsmount', 'mnt_root')])},
            {'call': 'getsid', 'reason': set([('task_struct', 'flags')])},
            {'call': 'shmat',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'socket',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'pipe2',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'prlimit64', 'reason': set([('task_struct', 'flags')])},
            {'call': 'perf_event_open',
             'reason': set([('path', 'dentry'),
                            ('path', 'mnt'),
                            ('task_struct', 'flags')])},
            {'call': 'shmdt',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'quotactl',
             'reason': set([('path', 'dentry'),
                            ('path', 'mnt'),
                            ('super_block', 's_flags')])},
            {'call': 'rt_sigaction',
             'reason': set([('task_struct', 'flags')])},
            {'call': 'getpgid', 'reason': set([('task_struct', 'flags')])},
            {'call': 'acct',
             'reason': set([('path', 'dentry'),
                            ('path', 'mnt'),
                            ('vfsmount', 'mnt_flags'),
                            ('vfsmount', 'mnt_root')])},
            {'call': 'open',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'getpriority',
             'reason': set([('task_struct', 'flags')])},
            {'call': 'sigaction', 'reason': set([('task_struct', 'flags')])},
            {'call': 'dup',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'setns',
             'reason': set([('nsproxy', 'mnt_ns'),
                            ('path', 'dentry'),
                            ('path', 'mnt'),
                            ('task_struct', 'flags')])},
            {'call': 'fork', 'reason': set([('task_struct', 'flags')])},
            {'call': 'get_robust_list',
             'reason': set([('task_struct', 'flags')])},
            {'call': 'mq_timedsend',
             'reason': set([('task_struct', 'flags')])},
            {'call': 'sched_getscheduler',
             'reason': set([('task_struct', 'flags')])},
            {'call': 'ptrace', 'reason': set([('task_struct', 'flags')])},
            {'call': 'shmctl',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'swapon',
             'reason': set([('path', 'dentry'),
                            ('path', 'mnt'),
                            ('super_block', 's_flags')])},
            {'call': 'sched_getattr',
             'reason': set([('task_struct', 'flags')])},
            {'call': 'getrusage', 'reason': set([('task_struct', 'flags')])},
            {'call': 'sched_setscheduler',
             'reason': set([('task_struct', 'flags')])},
            {'call': 'setresuid', 'reason': set([('task_struct', 'flags')])},
            {'call': 'setitimer', 'reason': set([('task_struct', 'flags')])},
            {'call': 'ioprio_get', 'reason': set([('task_struct', 'flags')])},
            {'call': 'vfork', 'reason': set([('task_struct', 'flags')])},
            {'call': 'setuid', 'reason': set([('task_struct', 'flags')])},
            {'call': 'mmap_pgoff',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'prctl', 'reason': set([('task_struct', 'flags')])},
            {'call': 'move_pages', 'reason': set([('task_struct', 'flags')])},
            {'call': 'setpriority',
             'reason': set([('task_struct', 'flags')])},
            {'call': 'clone', 'reason': set([('task_struct', 'flags')])},
            {'call': 'mq_open',
             'reason': set([('path', 'dentry'),
                            ('path', 'mnt'),
                            ('vfsmount', 'mnt_flags'),
                            ('vfsmount', 'mnt_root')])},
            {'call': 'sched_getparam',
             'reason': set([('task_struct', 'flags')])},
            {'call': 'open_by_handle_at',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])}],
 'uname': [{'call': 'keyctl',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'rt_sigtimedwait',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'msgrcv',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'kill', 'reason': set([('task_struct', 'personality')])},
           {'call': 'sched_getaffinity',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'sched_setparam',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'ioprio_set',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'personality',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'getppid',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'mq_timedreceive',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'capget',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'sched_setaffinity',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'signal',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'semtimedop',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'umount',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'sched_rr_get_interval',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'rt_sigprocmask',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'setsid',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'sigaltstack',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'sched_setattr',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'migrate_pages',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'getitimer',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'setpgid',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'getsid',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'prlimit64',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'perf_event_open',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'rt_sigaction',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'getpgid',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'getpriority',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'sigaction',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'setns', 'reason': set([('task_struct', 'personality')])},
           {'call': 'fork', 'reason': set([('task_struct', 'personality')])},
           {'call': 'get_robust_list',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'mq_timedsend',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'sched_getscheduler',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'ptrace',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'sched_getattr',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'getrusage',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'sched_setscheduler',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'setitimer',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'ioprio_get',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'vfork', 'reason': set([('task_struct', 'personality')])},
           {'call': 'prctl', 'reason': set([('task_struct', 'personality')])},
           {'call': 'move_pages',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'setpriority',
            'reason': set([('task_struct', 'personality')])},
           {'call': 'clone', 'reason': set([('task_struct', 'personality')])},
           {'call': 'sched_getparam',
            'reason': set([('task_struct', 'personality')])}],
 'unlink': [{'call': 'eventfd2',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'mq_unlink', 'reason': set([('dentry', 'd_inode')])},
            {'call': 'swapoff',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'pivot_root',
             'reason': set([('dentry', 'd_inode'),
                            ('path', 'dentry'),
                            ('path', 'mnt')])},
            {'call': 'memfd_create',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'remap_file_pages',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'dup3',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'unshare',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'mkdirat', 'reason': set([('dentry', 'd_inode')])},
            {'call': 'epoll_create1',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'epoll_ctl',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'flock',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'openat',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'lookup_dcookie',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'uselib',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'renameat2', 'reason': set([('dentry', 'd_inode')])},
            {'call': 'accept4',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'socketpair',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'getcwd',
             'reason': set([('dentry', 'd_inode'),
                            ('path', 'dentry'),
                            ('path', 'mnt')])},
            {'call': 'ftruncate', 'reason': set([('dentry', 'd_inode')])},
            {'call': 'shmat',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'mknodat', 'reason': set([('dentry', 'd_inode')])},
            {'call': 'socket',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'symlinkat', 'reason': set([('dentry', 'd_inode')])},
            {'call': 'pipe2',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'perf_event_open',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'linkat', 'reason': set([('dentry', 'd_inode')])},
            {'call': 'shmdt',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'quotactl',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'acct',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'open',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'rmdir', 'reason': set([('dentry', 'd_inode')])},
            {'call': 'dup',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'setns',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'shmctl',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'swapon',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'mmap_pgoff',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])},
            {'call': 'mq_open',
             'reason': set([('dentry', 'd_inode'),
                            ('path', 'dentry'),
                            ('path', 'mnt')])},
            {'call': 'unlinkat', 'reason': set([('dentry', 'd_inode')])},
            {'call': 'open_by_handle_at',
             'reason': set([('path', 'dentry'), ('path', 'mnt')])}],
 'unlinkat': [{'call': 'eventfd2',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'mq_unlink', 'reason': set([('dentry', 'd_inode')])},
              {'call': 'swapoff',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'pivot_root',
               'reason': set([('dentry', 'd_inode'),
                              ('path', 'dentry'),
                              ('path', 'mnt')])},
              {'call': 'memfd_create',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'remap_file_pages',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'dup3',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'unshare',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'mkdirat', 'reason': set([('dentry', 'd_inode')])},
              {'call': 'epoll_create1',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'epoll_ctl',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'flock',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'openat',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'lookup_dcookie',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'uselib',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'renameat2', 'reason': set([('dentry', 'd_inode')])},
              {'call': 'accept4',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'socketpair',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'getcwd',
               'reason': set([('dentry', 'd_inode'),
                              ('path', 'dentry'),
                              ('path', 'mnt')])},
              {'call': 'ftruncate', 'reason': set([('dentry', 'd_inode')])},
              {'call': 'shmat',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'mknodat', 'reason': set([('dentry', 'd_inode')])},
              {'call': 'socket',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'symlinkat', 'reason': set([('dentry', 'd_inode')])},
              {'call': 'pipe2',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'perf_event_open',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'linkat', 'reason': set([('dentry', 'd_inode')])},
              {'call': 'shmdt',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'quotactl',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'acct',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'open',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'unlink', 'reason': set([('dentry', 'd_inode')])},
              {'call': 'rmdir', 'reason': set([('dentry', 'd_inode')])},
              {'call': 'dup',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'setns',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'shmctl',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'swapon',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'mmap_pgoff',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])},
              {'call': 'mq_open',
               'reason': set([('dentry', 'd_inode'),
                              ('path', 'dentry'),
                              ('path', 'mnt')])},
              {'call': 'open_by_handle_at',
               'reason': set([('path', 'dentry'), ('path', 'mnt')])}],
 'uselib': [{'call': 'syncfs', 'reason': set([('super_block', 's_iflags')])},
            {'call': 'mq_unlink', 'reason': set([('vfsmount', 'mnt_flags')])},
            {'call': 'pivot_root',
             'reason': set([('vfsmount', 'mnt_flags')])},
            {'call': 'ustat', 'reason': set([('super_block', 's_iflags')])},
            {'call': 'umount',
             'reason': set([('super_block', 's_iflags'),
                            ('vfsmount', 'mnt_flags')])},
            {'call': 'getcwd', 'reason': set([('vfsmount', 'mnt_flags')])},
            {'call': 'quotactl',
             'reason': set([('super_block', 's_iflags')])},
            {'call': 'acct', 'reason': set([('vfsmount', 'mnt_flags')])},
            {'call': 'swapon', 'reason': set([('super_block', 's_iflags')])},
            {'call': 'mq_open', 'reason': set([('vfsmount', 'mnt_flags')])}],
 'ustat': [{'call': 'syncfs', 'reason': set([('super_block', 's_root')])},
           {'call': 'umount', 'reason': set([('super_block', 's_root')])},
           {'call': 'quotactl', 'reason': set([('super_block', 's_root')])},
           {'call': 'swapon', 'reason': set([('super_block', 's_root')])}],
 'utime': [{'call': 'rt_sigtimedwait',
            'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'mq_unlink', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'swapoff', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'fchmod', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'memfd_create', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'readlinkat', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'io_getevents', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'fchown', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'mq_timedreceive',
            'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'semtimedop', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'settimeofday', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'sched_rr_get_interval',
            'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'timerfd_gettime',
            'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'pselect6', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'uselib', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'fchmodat', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'inotify_add_watch',
            'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'timer_settime',
            'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'ftruncate', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'timer_gettime',
            'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'ioctl', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'linkat', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'stime', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'futimesat', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'poll', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'select', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'unlink', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'nanosleep', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'mq_getsetattr',
            'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'faccessat', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'mq_timedsend', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'swapon', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'epoll_wait', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'fchownat', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'fstat', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'timerfd_settime',
            'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'mq_notify', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'sendfile', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'newfstat', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'clock_nanosleep',
            'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'unlinkat', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'futex', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'recvmmsg', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'sendfile64', 'reason': set([('timespec', 'tv_nsec')])},
           {'call': 'ppoll', 'reason': set([('timespec', 'tv_nsec')])}],
 'utimensat': [{'call': 'rt_sigtimedwait',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'mq_unlink',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'swapoff', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'fchmod', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'memfd_create',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'readlinkat',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'io_getevents',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'fchown', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'mq_timedreceive',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'utime', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'semtimedop',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'settimeofday',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'sched_rr_get_interval',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'timerfd_gettime',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'pselect6', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'uselib', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'fchmodat', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'inotify_add_watch',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'timer_settime',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'ftruncate',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'timer_gettime',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'ioctl', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'linkat', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'stime', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'futimesat',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'poll', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'select', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'unlink', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'nanosleep',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'mq_getsetattr',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'faccessat',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'mq_timedsend',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'swapon', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'epoll_wait',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'fchownat', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'fstat', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'timerfd_settime',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'mq_notify',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'sendfile', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'newfstat', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'clock_nanosleep',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'unlinkat', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'futex', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'recvmmsg', 'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'sendfile64',
                'reason': set([('timespec', 'tv_nsec')])},
               {'call': 'ppoll', 'reason': set([('timespec', 'tv_nsec')])}],
 'vmsplice': [{'call': 'syncfs', 'reason': set([('fd', 'flags')])},
              {'call': 'eventfd2', 'reason': set([('file', 'f_mode')])},
              {'call': 'pwritev64', 'reason': set([('fd', 'flags')])},
              {'call': 'swapoff', 'reason': set([('file', 'f_mode')])},
              {'call': 'fremovexattr', 'reason': set([('fd', 'flags')])},
              {'call': 'readahead', 'reason': set([('fd', 'flags')])},
              {'call': 'getdents', 'reason': set([('fd', 'flags')])},
              {'call': 'writev', 'reason': set([('fd', 'flags')])},
              {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
              {'call': 'fchmod', 'reason': set([('fd', 'flags')])},
              {'call': 'pread64', 'reason': set([('fd', 'flags')])},
              {'call': 'signalfd4', 'reason': set([('fd', 'flags')])},
              {'call': 'memfd_create', 'reason': set([('file', 'f_mode')])},
              {'call': 'remap_file_pages',
               'reason': set([('file', 'f_mode')])},
              {'call': 'dup3', 'reason': set([('file', 'f_mode')])},
              {'call': 'read', 'reason': set([('fd', 'flags')])},
              {'call': 'fchown', 'reason': set([('fd', 'flags')])},
              {'call': 'mq_timedreceive', 'reason': set([('fd', 'flags')])},
              {'call': 'utime', 'reason': set([('fd', 'flags')])},
              {'call': 'fsync', 'reason': set([('fd', 'flags')])},
              {'call': 'bpf', 'reason': set([('fd', 'flags')])},
              {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
              {'call': 'fsetxattr', 'reason': set([('fd', 'flags')])},
              {'call': 'sendto', 'reason': set([('fd', 'flags')])},
              {'call': 'epoll_create1', 'reason': set([('file', 'f_mode')])},
              {'call': 'tee', 'reason': set([('fd', 'flags')])},
              {'call': 'sync_file_range', 'reason': set([('fd', 'flags')])},
              {'call': 'lseek', 'reason': set([('fd', 'flags')])},
              {'call': 'connect', 'reason': set([('fd', 'flags')])},
              {'call': 'getsockname', 'reason': set([('fd', 'flags')])},
              {'call': 'epoll_ctl',
               'reason': set([('fd', 'flags'), ('file', 'f_mode')])},
              {'call': 'flock',
               'reason': set([('fd', 'flags'), ('file', 'f_mode')])},
              {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
              {'call': 'fchdir', 'reason': set([('fd', 'flags')])},
              {'call': 'openat', 'reason': set([('file', 'f_mode')])},
              {'call': 'uselib', 'reason': set([('file', 'f_mode')])},
              {'call': 'accept4',
               'reason': set([('fd', 'flags'), ('file', 'f_mode')])},
              {'call': 'old_readdir', 'reason': set([('fd', 'flags')])},
              {'call': 'inotify_rm_watch', 'reason': set([('fd', 'flags')])},
              {'call': 'socketpair', 'reason': set([('file', 'f_mode')])},
              {'call': 'utimensat', 'reason': set([('fd', 'flags')])},
              {'call': 'inotify_add_watch', 'reason': set([('fd', 'flags')])},
              {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
              {'call': 'splice', 'reason': set([('fd', 'flags')])},
              {'call': 'ftruncate', 'reason': set([('fd', 'flags')])},
              {'call': 'preadv', 'reason': set([('fd', 'flags')])},
              {'call': 'getpeername', 'reason': set([('fd', 'flags')])},
              {'call': 'shmat', 'reason': set([('file', 'f_mode')])},
              {'call': 'setsockopt', 'reason': set([('fd', 'flags')])},
              {'call': 'socket', 'reason': set([('file', 'f_mode')])},
              {'call': 'pipe2', 'reason': set([('file', 'f_mode')])},
              {'call': 'fcntl', 'reason': set([('fd', 'flags')])},
              {'call': 'ioctl', 'reason': set([('fd', 'flags')])},
              {'call': 'pwrite64', 'reason': set([('fd', 'flags')])},
              {'call': 'perf_event_open',
               'reason': set([('fd', 'flags'), ('file', 'f_mode')])},
              {'call': 'shmdt', 'reason': set([('file', 'f_mode')])},
              {'call': 'pwritev64v2', 'reason': set([('fd', 'flags')])},
              {'call': 'futimesat', 'reason': set([('fd', 'flags')])},
              {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
              {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
              {'call': 'acct', 'reason': set([('file', 'f_mode')])},
              {'call': 'open', 'reason': set([('file', 'f_mode')])},
              {'call': 'getsockopt', 'reason': set([('fd', 'flags')])},
              {'call': 'mq_getsetattr', 'reason': set([('fd', 'flags')])},
              {'call': 'dup', 'reason': set([('file', 'f_mode')])},
              {'call': 'fdatasync', 'reason': set([('fd', 'flags')])},
              {'call': 'setns', 'reason': set([('file', 'f_mode')])},
              {'call': 'getdents64', 'reason': set([('fd', 'flags')])},
              {'call': 'listen', 'reason': set([('fd', 'flags')])},
              {'call': 'copy_file_range', 'reason': set([('fd', 'flags')])},
              {'call': 'mq_timedsend', 'reason': set([('fd', 'flags')])},
              {'call': 'fgetxattr', 'reason': set([('fd', 'flags')])},
              {'call': 'shmctl', 'reason': set([('file', 'f_mode')])},
              {'call': 'fcntl64', 'reason': set([('fd', 'flags')])},
              {'call': 'swapon', 'reason': set([('file', 'f_mode')])},
              {'call': 'fallocate', 'reason': set([('fd', 'flags')])},
              {'call': 'epoll_wait', 'reason': set([('fd', 'flags')])},
              {'call': 'llseek', 'reason': set([('fd', 'flags')])},
              {'call': 'mmap_pgoff', 'reason': set([('file', 'f_mode')])},
              {'call': 'preadv64v2', 'reason': set([('fd', 'flags')])},
              {'call': 'readv', 'reason': set([('fd', 'flags')])},
              {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
              {'call': 'fstatfs64', 'reason': set([('fd', 'flags')])},
              {'call': 'write', 'reason': set([('fd', 'flags')])},
              {'call': 'mq_notify', 'reason': set([('fd', 'flags')])},
              {'call': 'sendfile', 'reason': set([('fd', 'flags')])},
              {'call': 'mq_open', 'reason': set([('file', 'f_mode')])},
              {'call': 'open_by_handle_at',
               'reason': set([('file', 'f_mode')])},
              {'call': 'bind', 'reason': set([('fd', 'flags')])},
              {'call': 'flistxattr', 'reason': set([('fd', 'flags')])},
              {'call': 'sendfile64', 'reason': set([('fd', 'flags')])}],
 'write': [{'call': 'syncfs', 'reason': set([('fd', 'flags')])},
           {'call': 'vmsplice', 'reason': set([('fd', 'flags')])},
           {'call': 'pwritev64', 'reason': set([('fd', 'flags')])},
           {'call': 'fremovexattr', 'reason': set([('fd', 'flags')])},
           {'call': 'readahead', 'reason': set([('fd', 'flags')])},
           {'call': 'getdents', 'reason': set([('fd', 'flags')])},
           {'call': 'writev', 'reason': set([('fd', 'flags')])},
           {'call': 'preadv64', 'reason': set([('fd', 'flags')])},
           {'call': 'fchmod', 'reason': set([('fd', 'flags')])},
           {'call': 'pread64', 'reason': set([('fd', 'flags')])},
           {'call': 'signalfd4', 'reason': set([('fd', 'flags')])},
           {'call': 'read', 'reason': set([('fd', 'flags')])},
           {'call': 'fchown', 'reason': set([('fd', 'flags')])},
           {'call': 'mq_timedreceive', 'reason': set([('fd', 'flags')])},
           {'call': 'utime', 'reason': set([('fd', 'flags')])},
           {'call': 'fsync', 'reason': set([('fd', 'flags')])},
           {'call': 'bpf', 'reason': set([('fd', 'flags')])},
           {'call': 'recvfrom', 'reason': set([('fd', 'flags')])},
           {'call': 'fsetxattr', 'reason': set([('fd', 'flags')])},
           {'call': 'sendto', 'reason': set([('fd', 'flags')])},
           {'call': 'tee', 'reason': set([('fd', 'flags')])},
           {'call': 'sync_file_range', 'reason': set([('fd', 'flags')])},
           {'call': 'lseek', 'reason': set([('fd', 'flags')])},
           {'call': 'connect', 'reason': set([('fd', 'flags')])},
           {'call': 'getsockname', 'reason': set([('fd', 'flags')])},
           {'call': 'epoll_ctl', 'reason': set([('fd', 'flags')])},
           {'call': 'flock', 'reason': set([('fd', 'flags')])},
           {'call': 'pwritev', 'reason': set([('fd', 'flags')])},
           {'call': 'fchdir', 'reason': set([('fd', 'flags')])},
           {'call': 'accept4', 'reason': set([('fd', 'flags')])},
           {'call': 'old_readdir', 'reason': set([('fd', 'flags')])},
           {'call': 'inotify_rm_watch', 'reason': set([('fd', 'flags')])},
           {'call': 'utimensat', 'reason': set([('fd', 'flags')])},
           {'call': 'inotify_add_watch', 'reason': set([('fd', 'flags')])},
           {'call': 'preadv2', 'reason': set([('fd', 'flags')])},
           {'call': 'splice', 'reason': set([('fd', 'flags')])},
           {'call': 'ftruncate', 'reason': set([('fd', 'flags')])},
           {'call': 'preadv', 'reason': set([('fd', 'flags')])},
           {'call': 'getpeername', 'reason': set([('fd', 'flags')])},
           {'call': 'setsockopt', 'reason': set([('fd', 'flags')])},
           {'call': 'fcntl', 'reason': set([('fd', 'flags')])},
           {'call': 'ioctl', 'reason': set([('fd', 'flags')])},
           {'call': 'pwrite64', 'reason': set([('fd', 'flags')])},
           {'call': 'perf_event_open', 'reason': set([('fd', 'flags')])},
           {'call': 'pwritev64v2', 'reason': set([('fd', 'flags')])},
           {'call': 'futimesat', 'reason': set([('fd', 'flags')])},
           {'call': 'pwritev2', 'reason': set([('fd', 'flags')])},
           {'call': 'shutdown', 'reason': set([('fd', 'flags')])},
           {'call': 'getsockopt', 'reason': set([('fd', 'flags')])},
           {'call': 'mq_getsetattr', 'reason': set([('fd', 'flags')])},
           {'call': 'fdatasync', 'reason': set([('fd', 'flags')])},
           {'call': 'getdents64', 'reason': set([('fd', 'flags')])},
           {'call': 'listen', 'reason': set([('fd', 'flags')])},
           {'call': 'copy_file_range', 'reason': set([('fd', 'flags')])},
           {'call': 'mq_timedsend', 'reason': set([('fd', 'flags')])},
           {'call': 'fgetxattr', 'reason': set([('fd', 'flags')])},
           {'call': 'fcntl64', 'reason': set([('fd', 'flags')])},
           {'call': 'fallocate', 'reason': set([('fd', 'flags')])},
           {'call': 'epoll_wait', 'reason': set([('fd', 'flags')])},
           {'call': 'llseek', 'reason': set([('fd', 'flags')])},
           {'call': 'preadv64v2', 'reason': set([('fd', 'flags')])},
           {'call': 'readv', 'reason': set([('fd', 'flags')])},
           {'call': 'fstatfs', 'reason': set([('fd', 'flags')])},
           {'call': 'fstatfs64', 'reason': set([('fd', 'flags')])},
           {'call': 'mq_notify', 'reason': set([('fd', 'flags')])},
           {'call': 'sendfile', 'reason': set([('fd', 'flags')])},
           {'call': 'bind', 'reason': set([('fd', 'flags')])},
           {'call': 'flistxattr', 'reason': set([('fd', 'flags')])},
           {'call': 'sendfile64', 'reason': set([('fd', 'flags')])}]}
