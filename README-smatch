	***Compiling Smatch***

make

This compiles creates a binary called "smatch".

	***Using Smatch***

Normally you can do this:

	make CC=/path/to/cgcc CHECK="/path/to/smatch --full-path" | tee warns.txt

Smatch has specific checks for some projects which you can enable
with the "-p" parameter.

	make CC=/path/to/cgcc CHECK="/path/to/smatch --full-path -p=wine" | tee warns.txt

For the Linux kernel use this command:
 
	make C=1 CHECK="/path/to/smatch --full-path -p=kernel" | tee warns.txt

After the compile finishes and you have a warns.txt file, you can view the errors 
with the following command:

	egrep '(warn|error):' warns.txt | tee err-list

There are also a couple helper scripts for specific types of errors in the 
smatch_scripts/ directory.

	smatch_scripts/filter_kernel_deref_check.sh
	smatch_scripts/show_unreachable.sh
	smatch_scripts/show_ifs.sh

BTW, if you are testing the kernel and only one to test one file you can do:

	/path/to/smatch_scripts/kchecker drivers/whatever/file.c

The kchecker script also has an option "--sparse" which runs sparse on the file
instead of smatch.  So when I am writing kernel patches in vim I do:

	:! kchecker % && kchecker --sparse %


	***Debugging Hints***

Sometimes you it is not obvious why smatch is printing an error.  The --debug 
option is usefull here.  It prints a message on each state change.

Also if smatch crashes use:  kchecker --valgrind drivers/whatever/file.c and 
send me the stack dump.

	***How Smatch Works***

It's basically a state machine that tracks the flow of code.

int a;  <- state is unitialized.

if (b) {
       a = foo();  <- state is initialized. 
       if (a) {
       	      bar(a);  <- state is non zero.
       }
}
baz(a);  <- state is undefined.  possibly unitialized, zero, or non-zero

The core parts of smatch understand how code flows, if conditions, loops,
and merging states back together.  The checker bits keep track of states
that they are interested in and print error messages and so on.

	***Coding Smatch***

The core smatch files start with "smatch_" the check scripts are named 
"check_*.c".  There is a template check script called check_template.c
that is designed to teach the basics.  Rename it and edit out the bits
you want.

The first file you should look at is smatch.h.  All the
functions for check scripts are at the top.

Smatch is based on sparse.  You will want to understand a couple sparse 
data types: 
	struct expression from expression.h
	struct symbol from symbol.h
	struct statement from parse.h

More complicated scripts are also going to need functions from smatch_slist.h

